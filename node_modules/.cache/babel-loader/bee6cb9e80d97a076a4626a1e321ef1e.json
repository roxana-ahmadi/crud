{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = props => props.filterData;\n\nconst addClouse = ({\n  setData\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData(d => d.set('childs', d.childs.concat(query)));\n};\n\nconst deleteChild = ({\n  setData\n}) => index => {\n  setData(d => d.set('childs', d.childs.filter((value, i) => i !== index)));\n};\n\nconst changeOprand = ({\n  setData\n}) => oprand => {\n  setData(d => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData(d => d.set('childs', d.childs.concat(Record({\n    op: 'and',\n    childs: [],\n    mainQuery: query\n  })())));\n};\n\nconst makeMainQuery = props => data => {\n  console.log('maake main query start', data);\n  console.log(props.mainQuery);\n\n  if (data.childs) {\n    console.log('1');\n    const {\n      op\n    } = data;\n    data.childs.map(x => {\n      if (op === 'and') {\n        console.log('2');\n        console.log('x', x);\n        console.log('main query', props.mainQuery);\n        console.log(props.mainQuery);\n        return props.mainQuery = Parse.Query.and(props.mainQuery, data.childs[0]);\n      }\n\n      if (op === 'or') {\n        console.log('op', data.op);\n        return props.mainQuery = Parse.Query.and(props.mainQuery, makeMainQuery(x));\n      }\n\n      if (!x.op) {\n        return x; // if (op === 'and') {\n        //   console.log('op', op);\n        //   props.mainQuery = Parse.Query.and(props.mainQuery, x);\n        // } else {\n        //   props.mainQuery = Parse.Query.or(props.mainQuery, x);\n        // }\n      }\n\n      return makeMainQuery(x);\n    });\n  }\n\n  return data;\n};\n\nconst oprandController = pipe(withState(init), withHandlers({\n  addClouse,\n  deleteChild,\n  changeOprand,\n  addOprand,\n  makeMainQuery\n}));\nexport default oprandController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/oprand/oprandController.js"],"names":["Parse","Record","withState","withHandlers","pipe","ClouseQuery","Object","extend","init","props","filterData","addClouse","setData","query","Query","d","set","childs","concat","deleteChild","index","filter","value","i","changeOprand","oprand","addOprand","op","mainQuery","makeMainQuery","data","console","log","map","x","and","oprandController"],"mappings":"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","sourcesContent":["import Parse from 'parse';\nimport {\n  Record,\n} from 'immutable';\nimport {\n  withState, withHandlers, pipe,\n} from '../../util';\n\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = (props) => props.filterData;\n\nconst addClouse = ({ setData }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData((d) => d.set('childs', d.childs.concat(query)));\n};\n\nconst deleteChild = ({ setData }) => (index) => {\n  setData((d) => d.set('childs', d.childs.filter((value, i) => i !== index)));\n};\n\nconst changeOprand = ({ setData }) => (oprand) => {\n  setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({ setData }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\n\nconst makeMainQuery = (props) => (data) => {\n  console.log('maake main query start', data);\n  console.log(props.mainQuery);\n\n  if (data.childs) {\n    console.log('1');\n    const { op } = data;\n    data.childs.map((x) => {\n      if (op === 'and') {\n        console.log('2');\n        console.log('x', x);\n        console.log('main query', props.mainQuery);\n        console.log(props.mainQuery);\n        return props.mainQuery = Parse.Query.and(props.mainQuery, data.childs[0]);\n      }\n      if (op === 'or') {\n        console.log('op', data.op);\n        return props.mainQuery = Parse.Query.and(props.mainQuery, makeMainQuery(x));\n      }\n      if (!x.op) {\n        return x;\n        // if (op === 'and') {\n        //   console.log('op', op);\n        //   props.mainQuery = Parse.Query.and(props.mainQuery, x);\n        // } else {\n        //   props.mainQuery = Parse.Query.or(props.mainQuery, x);\n        // }\n      }\n      return makeMainQuery(x);\n    });\n  }\n\n  return data;\n};\n\n\nconst oprandController = pipe(\n  withState(init),\n  withHandlers({\n    addClouse,\n    deleteChild,\n    changeOprand,\n    addOprand,\n    makeMainQuery,\n  }),\n);\n\nexport default oprandController;\n"]},"metadata":{},"sourceType":"module"}