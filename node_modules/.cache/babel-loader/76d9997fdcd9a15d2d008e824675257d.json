{"ast":null,"code":"import Parse from 'parse';\nimport { withState, withHandlers, pipe, withLifecycle } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = props => props.filterData; // const makeMainQuery = ({ data, setData }) => () => {\n//   console.log();\n//   console.log('makemain query');\n//   let mainQuery = new Parse.Query(ClouseQuery);\n//   if (data.op === 'and') {\n//     data.childs.map((item) => {\n//       if (!item.childs) { mainQuery = Parse.Query.and(mainQuery, item); } else {\n//         mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n//       }\n//     });\n//   } else {\n//     data.childs.map((item) => {\n//       if (!item.childs) { mainQuery = Parse.Query.or(mainQuery, item); } else {\n//         mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n//       }\n//     });\n//   }\n//   const newdd = { ...data };\n//   newdd.mainQuery = mainQuery;\n//   newdd.mainQuery.find().then((response) => {\n//     newdd.searchResults = response;\n//     console.log(response);\n//   });\n//   console.log(newdd.searchResults);\n//   console.log(newdd.mainQuery);\n//   setData(newdd);\n// };\n\n\nconst addClouse = ({\n  setData,\n  data,\n  makeMainQuery\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n  makeMainQuery(newd);\n};\n\nconst deleteChild = ({\n  setData,\n  data,\n  makeMainQuery\n}) => index => {\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n  makeMainQuery(newd);\n};\n\nconst changeOprand = ({\n  setData,\n  data,\n  makeMainQuery\n}) => oprand => {\n  const newd = { ...data\n  };\n  newd.op = oprand;\n  setData(newd);\n  makeMainQuery(newd); // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData,\n  data,\n  filterData,\n  makeMainQuery\n}) => () => {\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.concat(filterData);\n  setData(newd);\n  makeMainQuery(newd); // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'rox',\n    number: 456\n  });\n}; // const onUpdate = (props) => {\n//   if (props) {\n//     console.log('update props', props);\n//     props.makeMainQuery(props.data);\n//   }\n// };\n\n\nconst oprandController = pipe(withState(init), withHandlers({\n  // makeMainQuery,\n  addClouse,\n  deleteChild,\n  changeOprand,\n  addOprand,\n  addObject\n}), withLifecycle({// onUpdate,\n}));\nexport default oprandController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/oprand/oprandController.js"],"names":["Parse","withState","withHandlers","pipe","withLifecycle","ClouseQuery","Object","extend","init","props","filterData","addClouse","setData","data","makeMainQuery","query","Query","newd","childs","concat","deleteChild","index","filter","value","i","changeOprand","oprand","op","addOprand","addObject","obj","save","name","number","oprandController"],"mappings":"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","sourcesContent":["\nimport Parse from 'parse';\nimport {\n  withState, withHandlers, pipe, withLifecycle,\n} from '../../util';\n\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = (props) => props.filterData;\n\n// const makeMainQuery = ({ data, setData }) => () => {\n//   console.log();\n//   console.log('makemain query');\n//   let mainQuery = new Parse.Query(ClouseQuery);\n//   if (data.op === 'and') {\n//     data.childs.map((item) => {\n//       if (!item.childs) { mainQuery = Parse.Query.and(mainQuery, item); } else {\n//         mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n//       }\n//     });\n//   } else {\n//     data.childs.map((item) => {\n//       if (!item.childs) { mainQuery = Parse.Query.or(mainQuery, item); } else {\n//         mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n//       }\n//     });\n//   }\n//   const newdd = { ...data };\n//   newdd.mainQuery = mainQuery;\n//   newdd.mainQuery.find().then((response) => {\n//     newdd.searchResults = response;\n//     console.log(response);\n//   });\n//   console.log(newdd.searchResults);\n//   console.log(newdd.mainQuery);\n//   setData(newdd);\n// };\n\nconst addClouse = ({ setData, data, makeMainQuery }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data };\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n  makeMainQuery(newd);\n};\n\nconst deleteChild = ({ setData, data, makeMainQuery }) => (index) => {\n  const newd = { ...data };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n  makeMainQuery(newd);\n};\n\nconst changeOprand = ({ setData, data, makeMainQuery }) => (oprand) => {\n  const newd = { ...data };\n  newd.op = oprand;\n  setData(newd);\n  makeMainQuery(newd);\n\n  // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData, data, filterData, makeMainQuery,\n}) => () => {\n  const newd = { ...data };\n  newd.childs = newd.childs.concat(filterData);\n  setData(newd);\n  makeMainQuery(newd);\n  // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'rox',\n    number: 456,\n\n  });\n};\n\n// const onUpdate = (props) => {\n//   if (props) {\n//     console.log('update props', props);\n//     props.makeMainQuery(props.data);\n//   }\n// };\n\n\nconst oprandController = pipe(\n  withState(init),\n  withHandlers({\n    // makeMainQuery,\n    addClouse,\n    deleteChild,\n    changeOprand,\n    addOprand,\n    addObject,\n  }),\n  withLifecycle({\n    // onUpdate,\n  }),\n\n);\n\nexport default oprandController;\n"]},"metadata":{},"sourceType":"module"}