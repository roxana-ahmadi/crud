{"ast":null,"code":"import Parse from 'parse';\nimport { withState, withHandlers, pipe } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = props => props.filterData;\n\nconst makeMainQuery = ({\n  setData,\n  newd\n}) => {\n  console.log('makeMainQuery func');\n  console.log('makeMainQuery porps', newd, setData);\n  let mainQuery = new Parse.Query(ClouseQuery);\n\n  if (newd.op === 'and') {\n    newd.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    newd.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  }\n\n  newd.mainQuery = mainQuery;\n  console.log(newd.mainQuery);\n};\n\nconst addClouse = ({\n  setData,\n  data\n}) => () => {\n  console.log('add clouse func data', data);\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n  console.log('add clouse func ned data', newd);\n  makeMainQuery({\n    setData,\n    newd\n  });\n};\n\nconst deleteChild = ({\n  setData,\n  data\n}) => index => {\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n};\n\nconst changeOprand = ({\n  setData,\n  data\n}) => oprand => {\n  const newd = { ...data\n  };\n  newd.op = oprand;\n  setData(newd);\n  makeMainQuery({\n    setData,\n    newd\n  }); // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.concat({\n    op: 'and',\n    childs: [],\n    mainQuery: query,\n    searchResults: []\n  });\n  setData(newd);\n  makeMainQuery({\n    setData,\n    newd\n  }); // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'rox',\n    number: 456\n  });\n};\n\nconst oprandController = pipe(withState(init), withHandlers({\n  makeMainQuery,\n  addClouse,\n  deleteChild,\n  changeOprand,\n  addOprand,\n  addObject\n}));\nexport default oprandController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/oprand/oprandController.js"],"names":["Parse","withState","withHandlers","pipe","ClouseQuery","Object","extend","init","props","filterData","makeMainQuery","setData","newd","console","log","mainQuery","Query","op","childs","map","item","and","or","addClouse","data","query","concat","deleteChild","index","filter","value","i","changeOprand","oprand","addOprand","searchResults","addObject","obj","save","name","number","oprandController"],"mappings":"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","sourcesContent":["\nimport Parse from 'parse';\nimport {\n  withState, withHandlers, pipe,\n} from '../../util';\n\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = (props) => props.filterData;\n\nconst makeMainQuery = ({ setData, newd }) => {\n  console.log('makeMainQuery func');\n  console.log('makeMainQuery porps', newd, setData);\n\n  let mainQuery = new Parse.Query(ClouseQuery);\n  if (newd.op === 'and') {\n    newd.childs.map((item) => {\n      if (!item.childs) { mainQuery = Parse.Query.and(mainQuery, item); } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    newd.childs.map((item) => {\n      if (!item.childs) { mainQuery = Parse.Query.or(mainQuery, item); } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  }\n  newd.mainQuery = mainQuery;\n  console.log(newd.mainQuery);\n};\n\nconst addClouse = ({ setData, data }) => () => {\n  console.log('add clouse func data', data);\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data };\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n  console.log('add clouse func ned data', newd);\n\n  makeMainQuery({ setData, newd });\n};\n\nconst deleteChild = ({ setData, data }) => (index) => {\n  const newd = { ...data };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n};\n\nconst changeOprand = ({ setData, data }) => (oprand) => {\n  const newd = { ...data };\n  newd.op = oprand;\n  setData(newd);\n  makeMainQuery({ setData, newd });\n\n  // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({ setData, data }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data };\n  newd.childs = newd.childs.concat({\n    op: 'and', childs: [], mainQuery: query, searchResults: [],\n  });\n  setData(newd);\n  makeMainQuery({ setData, newd });\n  // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'rox',\n    number: 456,\n\n  });\n};\n\n\nconst oprandController = pipe(\n  withState(init),\n  withHandlers({\n    makeMainQuery,\n    addClouse,\n    deleteChild,\n    changeOprand,\n    addOprand,\n    addObject,\n  }),\n\n);\n\nexport default oprandController;\n"]},"metadata":{},"sourceType":"module"}