{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Represents a Role on the Parse server. Roles represent groupings of\n * Users for the purposes of granting permissions (e.g. specifying an ACL\n * for an Object). Roles are specified by their sets of child users and\n * child roles, all of which are granted any permissions that the parent\n * role has.\n *\n * <p>Roles must have a name (which cannot be changed after creation of the\n * role), and must specify an ACL.</p>\n * @alias Parse.Role\n * @extends Parse.Object\n */\n\n\nvar ParseRole =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseRole, _ParseObject);\n  /**\n   * @param {String} name The name of the Role to create.\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\n   * A Parse.Role is a local representation of a role persisted to the Parse\n   * cloud.\n   */\n\n  function ParseRole(name\n  /*: string*/\n  , acl\n  /*: ParseACL*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseRole);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseRole).call(this, '_Role'));\n\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      _this.setName(name);\n\n      _this.setACL(acl);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\n   *\n    * @return {String} the name of the role.\n   */\n\n\n  (0, _createClass2.default)(ParseRole, [{\n    key: \"getName\",\n    value: function ()\n    /*: ?string*/\n    {\n      var name = this.get('name');\n\n      if (name == null || typeof name === 'string') {\n        return name;\n      }\n\n      return '';\n    }\n    /**\n     * Sets the name for a role. This value must be set before the role has\n     * been saved to the server, and cannot be set once the role has been\n     * saved.\n     *\n     * <p>\n     *   A role's name can only contain alphanumeric characters, _, -, and\n     *   spaces.\n     * </p>\n     *\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\n     *\n      * @param {String} name The name of the role.\n     * @param {Object} options Standard options object with success and error\n     *     callbacks.\n     */\n\n  }, {\n    key: \"setName\",\n    value: function (name\n    /*: string*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('name', name, options);\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Users that are direct\n     * children of this role. These users are granted any privileges that this\n     * role has been granted (e.g. read or write access through ACLs). You can\n     * add or remove users from the role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\n     *\n      * @return {Parse.Relation} the relation for the users belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('users');\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Roles that are direct\n     * children of this role. These roles' users are granted any privileges that\n     * this role has been granted (e.g. read or write access through ACLs). You\n     * can add or remove child roles from this role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\n     *\n      * @return {Parse.Relation} the relation for the roles belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getRoles\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('roles');\n    }\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseError | boolean*/\n    {\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\n\n      if (isInvalid) {\n        return isInvalid;\n      }\n\n      if ('name' in attrs && attrs.name !== this.getName()) {\n        var newName = attrs.name;\n\n        if (this.id && this.id !== attrs.objectId) {\n          // Check to see if the objectId being set matches this.id\n          // This happens during a fetch -- the id is set before calling fetch\n          // Let the name be set in this case\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'A role\\'s name can only be set before it has been saved.');\n        }\n\n        if (typeof newName !== 'string') {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'A role\\'s name must be a String.');\n        }\n\n        if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'A role\\'s name can be only contain alphanumeric characters, _, ' + '-, and spaces.');\n        }\n      }\n\n      return false;\n    }\n  }]);\n  return ParseRole;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\n\nvar _default = ParseRole;\nexports.default = _default;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/node_modules/parse/lib/browser/ParseRole.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_ParseACL","_ParseError","_ParseObject2","ParseRole","_ParseObject","name","acl","_this","call","setName","setACL","key","get","options","set","relation","attrs","isInvalid","prototype","getName","newName","id","objectId","OTHER_CAUSE","test","registerSubclass","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Represents a Role on the Parse server. Roles represent groupings of\n * Users for the purposes of granting permissions (e.g. specifying an ACL\n * for an Object). Roles are specified by their sets of child users and\n * child roles, all of which are granted any permissions that the parent\n * role has.\n *\n * <p>Roles must have a name (which cannot be changed after creation of the\n * role), and must specify an ACL.</p>\n * @alias Parse.Role\n * @extends Parse.Object\n */\n\n\nvar ParseRole =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseRole, _ParseObject);\n  /**\n   * @param {String} name The name of the Role to create.\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\n   * A Parse.Role is a local representation of a role persisted to the Parse\n   * cloud.\n   */\n\n  function ParseRole(name\n  /*: string*/\n  , acl\n  /*: ParseACL*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseRole);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseRole).call(this, '_Role'));\n\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      _this.setName(name);\n\n      _this.setACL(acl);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\n   *\n    * @return {String} the name of the role.\n   */\n\n\n  (0, _createClass2.default)(ParseRole, [{\n    key: \"getName\",\n    value: function ()\n    /*: ?string*/\n    {\n      var name = this.get('name');\n\n      if (name == null || typeof name === 'string') {\n        return name;\n      }\n\n      return '';\n    }\n    /**\n     * Sets the name for a role. This value must be set before the role has\n     * been saved to the server, and cannot be set once the role has been\n     * saved.\n     *\n     * <p>\n     *   A role's name can only contain alphanumeric characters, _, -, and\n     *   spaces.\n     * </p>\n     *\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\n     *\n      * @param {String} name The name of the role.\n     * @param {Object} options Standard options object with success and error\n     *     callbacks.\n     */\n\n  }, {\n    key: \"setName\",\n    value: function (name\n    /*: string*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('name', name, options);\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Users that are direct\n     * children of this role. These users are granted any privileges that this\n     * role has been granted (e.g. read or write access through ACLs). You can\n     * add or remove users from the role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\n     *\n      * @return {Parse.Relation} the relation for the users belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('users');\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Roles that are direct\n     * children of this role. These roles' users are granted any privileges that\n     * this role has been granted (e.g. read or write access through ACLs). You\n     * can add or remove child roles from this role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\n     *\n      * @return {Parse.Relation} the relation for the roles belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getRoles\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('roles');\n    }\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseError | boolean*/\n    {\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\n\n      if (isInvalid) {\n        return isInvalid;\n      }\n\n      if ('name' in attrs && attrs.name !== this.getName()) {\n        var newName = attrs.name;\n\n        if (this.id && this.id !== attrs.objectId) {\n          // Check to see if the objectId being set matches this.id\n          // This happens during a fetch -- the id is set before calling fetch\n          // Let the name be set in this case\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'A role\\'s name can only be set before it has been saved.');\n        }\n\n        if (typeof newName !== 'string') {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'A role\\'s name must be a String.');\n        }\n\n        if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'A role\\'s name can be only contain alphanumeric characters, _, ' + '-, and spaces.');\n        }\n      }\n\n      return false;\n    }\n  }]);\n  return ParseRole;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\n\nvar _default = ParseRole;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}