{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe, withLifecycle } from '../../util';\nconst ClouseQuery = Parse.Object.extend(\"ClouseQuery\");\n\nconst onCreate = ({\n  setData\n}) => {\n  console.log('componentDidMount');\n  const query = new Parse.Query('ClouseQuery');\n  query.find().then(response => {\n    setData(d => d.set('personsList', response));\n  });\n};\n\nconst addPerson = ({\n  data,\n  setData\n}) => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: data.personName\n  }).then(() => setData(d => d.merge({\n    personName: undefined,\n    personsList: d.personsList.concat(obj)\n  })));\n};\n\nconst setPersonName = ({\n  setData\n}) => personName => {\n  setData(d => d.set('personName', personName));\n};\n\nconst deletePerson = ({\n  setData,\n  data\n}) => index => {\n  const selectedPerson = data.personsList[index];\n  const query = new Parse.Query('ClouseQuery');\n  query.get(selectedPerson.id).then(response => {\n    response.destroy().then(() => setData(d => d.set('personsList', d.personsList.filter((value, i) => i !== index))));\n  });\n};\n\nconst editPerson = ({\n  data,\n  setData\n}) => index => {\n  const selectedPerson = data.personsList[index].toJSON();\n  setData(d => d.merge({\n    personName: selectedPerson.name,\n    selectedPersonId: selectedPerson.objectId,\n    selectedPersonIndex: index,\n    editing: !data.editing\n  }));\n};\n\nconst makeMainQuery = ({\n  data,\n  setData\n}) => oprandData => {\n  let mainQuery = new Parse.Query(ClouseQuery);\n\n  if (oprandData.op === \"and\") {\n    oprandData.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    oprandData.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.or(mainQuery, item.mainQuery);\n      }\n    });\n  } // filterData.mainQuery = mainQuery;\n\n\n  setData(d => d.set('tmpdata', oprandData)); // data.tmpdata = oprandData;\n\n  mainQuery.find().then(result => {\n    console.log(result);\n    let dataSource = result.map((item, key) => {\n      return { ...item.toJSON(),\n        key\n      };\n    });\n    setData(d => d.set('personsList', dataSource));\n  });\n};\n\nconst confirmEdit = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query('ClouseQuery');\n  query.get(data.selectedPersonId).then(response => {\n    response.save({\n      name: data.personName\n    }).then(updatedPerson => {\n      const tempList = [...data.personsList];\n      tempList.splice(data.selectedPersonIndex, 1, updatedPerson);\n      setData(d => d.merge({\n        personsList: tempList,\n        editing: !data.editing,\n        personName: undefined\n      }));\n    });\n  });\n};\n\nconst init = () => Record({\n  personName: undefined,\n  personsList: [],\n  selectedPersonId: undefined,\n  selectedPersonIndex: undefined,\n  editing: false,\n  personSearched: [],\n  tmpdata: null\n});\n\nconst tableController = pipe(withState(() => init(), 'data', 'setData'), withHandlers({\n  addPerson,\n  setPersonName,\n  deletePerson,\n  editPerson,\n  confirmEdit,\n  makeMainQuery\n}), withLifecycle({\n  onCreate // onUpdate,\n\n}));\nexport default tableController;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/src/components/table/tableController.js"],"names":["Parse","Record","withState","withHandlers","pipe","withLifecycle","ClouseQuery","Object","extend","onCreate","setData","console","log","query","Query","find","then","response","d","set","addPerson","data","obj","save","name","personName","merge","undefined","personsList","concat","setPersonName","deletePerson","index","selectedPerson","get","id","destroy","filter","value","i","editPerson","toJSON","selectedPersonId","objectId","selectedPersonIndex","editing","makeMainQuery","oprandData","mainQuery","op","childs","map","item","and","or","result","dataSource","key","confirmEdit","updatedPerson","tempList","splice","init","personSearched","tmpdata","tableController"],"mappings":"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","sourcesContent":["import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe, withLifecycle, } from '../../util';\n\nconst ClouseQuery = Parse.Object.extend(\"ClouseQuery\");\n\n\nconst onCreate = ({ setData }) => {\n  console.log('componentDidMount');\n  const query = new Parse.Query('ClouseQuery');\n  query.find().then((response) => {\n    setData((d) => d.set('personsList', response));\n  });\n};\n\nconst addPerson = ({ data, setData }) => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: data.personName,\n  }).then(() => setData((d) => d.merge({\n    personName: undefined,\n    personsList: d.personsList.concat(obj),\n  })));\n};\n\nconst setPersonName = ({ setData }) => (personName) => {\n  setData((d) => d.set('personName', personName));\n};\n\nconst deletePerson = ({ setData, data }) => (index) => {\n  const selectedPerson = data.personsList[index];\n  const query = new Parse.Query('ClouseQuery');\n  query.get(selectedPerson.id).then((response) => {\n    response.destroy().then(() => setData((d) => d.set('personsList', d.personsList.filter((value, i) => i !== index))));\n  });\n};\n\nconst editPerson = ({ data, setData }) => (index) => {\n  const selectedPerson = data.personsList[index].toJSON();\n  setData((d) => d.merge({\n    personName: selectedPerson.name,\n    selectedPersonId: selectedPerson.objectId,\n    selectedPersonIndex: index,\n    editing: !data.editing,\n  }));\n};\n\nconst makeMainQuery = ({ data, setData }) => (oprandData) => {\n  let mainQuery = new Parse.Query(ClouseQuery);\n  if (oprandData.op === \"and\") {\n    oprandData.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    oprandData.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.or(mainQuery, item.mainQuery);\n      }\n    });\n  }\n  // filterData.mainQuery = mainQuery;\n  setData((d) => d.set('tmpdata', oprandData))\n  // data.tmpdata = oprandData;\n  mainQuery.find().then(result => {\n\n    console.log(result)\n    let dataSource = result.map((item, key) => {\n      return {\n        ...item.toJSON(),\n        key,\n      }\n    })\n    setData((d) => d.set('personsList', dataSource))\n\n\n  });\n\n};\n\nconst confirmEdit = ({ setData, data }) => () => {\n  const query = new Parse.Query('ClouseQuery');\n  query.get(data.selectedPersonId).then((response) => {\n    response.save({\n      name: data.personName,\n    }).then((updatedPerson) => {\n      const tempList = [...data.personsList];\n      tempList.splice(data.selectedPersonIndex, 1, updatedPerson);\n      setData((d) => d.merge({\n        personsList: tempList,\n        editing: !data.editing,\n        personName: undefined,\n      }));\n    });\n  });\n};\n\nconst init = () => Record({\n  personName: undefined,\n  personsList: [],\n  selectedPersonId: undefined,\n  selectedPersonIndex: undefined,\n  editing: false,\n  personSearched: [],\n  tmpdata: null\n\n});\n\nconst tableController = pipe(\n  withState(() => init(), 'data', 'setData'),\n  withHandlers({\n    addPerson,\n    setPersonName,\n    deletePerson,\n    editPerson,\n    confirmEdit,\n    makeMainQuery\n  }),\n  withLifecycle({\n    onCreate,\n    // onUpdate,\n  }),\n);\n\nexport default tableController;\n"]},"metadata":{},"sourceType":"module"}