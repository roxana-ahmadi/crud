{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe } from '../../util';\n\nconst setConstraint = ({\n  setData\n}) => selectedConstraint => {\n  setData(d => d.set('selectedConstraint', selectedConstraint));\n};\n\nconst setFieldValue = ({\n  data,\n  setData,\n  makeMainQuery,\n  newd\n}) => fieldValue => {\n  data.query._where = {}; // eslint-disable-next-line default-case\n\n  switch (data.selectedConstraint) {\n    case 'EqualTo':\n      setData(d => d.merge({\n        fieldValue,\n        query: data.query.equalTo(data.fieldName, fieldValue)\n      }));\n      break;\n\n    case 'NotEqualTo':\n      setData(d => d.merge({\n        fieldValue,\n        query: data.query.notEqualTo(data.fieldName, fieldValue)\n      }));\n      break;\n\n    case 'GreaterThan':\n      setData(d => d.merge({\n        fieldValue,\n        query: data.query.greaterThan(data.fieldName, fieldValue)\n      }));\n      break;\n\n    case 'LessThan':\n      setData(d => d.merge({\n        fieldValue,\n        query: data.query.lessThan(data.fieldName, fieldValue)\n      }));\n      break;\n\n    case 'GreaterThanOrEqualTo':\n      setData(d => d.merge({\n        fieldValue,\n        query: data.query.greaterThanOrEqualTo(data.fieldName, fieldValue)\n      }));\n      break;\n\n    case 'LessThanOrEqualTo':\n      setData(d => d.merge({\n        fieldValue,\n        query: data.query.lessThanOrEqualTo(data.fieldName, fieldValue)\n      }));\n      break;\n\n    case 'StartsWith':\n      setData(d => d.merge({\n        fieldValue,\n        query: data.query.startsWith(data.fieldName, fieldValue)\n      }));\n      break;\n\n    case 'Contains':\n      setData(d => d.merge({\n        fieldValue,\n        query: data.query.contains(data.fieldName, fieldValue)\n      }));\n      break;\n\n    case 'EndsWith':\n      setData(d => d.merge({\n        fieldValue,\n        query: data.query.endsWith(data.fieldName, fieldValue)\n      }));\n      break;\n\n    default:\n      setData(d => d.set('query', data.query.equalTo(data.fieldName, fieldValue)));\n  }\n\n  makeMainQuery();\n};\n\nconst setFieldName = ({\n  setData\n}) => fieldName => {\n  setData(d => d.merge({\n    fieldValue: '',\n    fieldName\n  })); // console.log('quet', data.query);\n};\n\nconst init = props => Record({\n  fieldName: 'name',\n  fieldValue: '',\n  query: props.query,\n  selectedConstraint: 'EqualTo',\n  counter: props.counter,\n  jsonq: props.query.toJSON()\n});\n\nconst clouseController = pipe(withState(props => init(props)), withHandlers({\n  setFieldValue,\n  setConstraint,\n  setFieldName\n}));\nexport default clouseController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/clouse/clouseController.js"],"names":["Record","withState","withHandlers","pipe","setConstraint","setData","selectedConstraint","d","set","setFieldValue","data","makeMainQuery","newd","fieldValue","query","_where","merge","equalTo","fieldName","notEqualTo","greaterThan","lessThan","greaterThanOrEqualTo","lessThanOrEqualTo","startsWith","contains","endsWith","setFieldName","init","props","counter","jsonq","toJSON","clouseController"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  Record,\n} from 'immutable';\nimport {\n  withState, withHandlers, pipe,\n} from '../../util';\n\n\nconst setConstraint = ({ setData }) => (selectedConstraint) => {\n  setData((d) => d.set('selectedConstraint', selectedConstraint));\n};\n\nconst setFieldValue = ({\n  data, setData, makeMainQuery, newd,\n}) => (fieldValue) => {\n  data.query._where = {};\n\n  // eslint-disable-next-line default-case\n  switch (data.selectedConstraint) {\n    case 'EqualTo':\n      setData((d) => d.merge({\n        fieldValue,\n        query: data.query.equalTo(data.fieldName, fieldValue),\n      }));\n      break;\n    case 'NotEqualTo':\n      setData((d) => d.merge({\n        fieldValue,\n        query: data.query.notEqualTo(data.fieldName, fieldValue),\n      }));\n      break;\n    case 'GreaterThan':\n      setData((d) => d.merge({\n        fieldValue,\n        query: data.query.greaterThan(data.fieldName, fieldValue),\n      }));\n      break;\n    case 'LessThan':\n      setData((d) => d.merge({\n        fieldValue,\n        query: data.query.lessThan(data.fieldName, fieldValue),\n      }));\n      break;\n    case 'GreaterThanOrEqualTo':\n      setData((d) => d.merge({\n        fieldValue,\n        query: data.query.greaterThanOrEqualTo(data.fieldName, fieldValue),\n      }));\n      break;\n    case 'LessThanOrEqualTo':\n      setData((d) => d.merge({\n        fieldValue,\n        query: data.query.lessThanOrEqualTo(data.fieldName, fieldValue),\n      }));\n      break;\n\n    case 'StartsWith':\n      setData((d) => d.merge({\n        fieldValue,\n        query: data.query.startsWith(data.fieldName, fieldValue),\n      }));\n      break;\n    case 'Contains':\n      setData((d) => d.merge({\n        fieldValue,\n        query: data.query.contains(data.fieldName, fieldValue),\n      }));\n      break;\n    case 'EndsWith':\n      setData((d) => d.merge({\n        fieldValue,\n        query: data.query.endsWith(data.fieldName, fieldValue),\n      }));\n      break;\n    default:\n      setData((d) => d.set('query', data.query.equalTo(data.fieldName, fieldValue)));\n  }\n  makeMainQuery();\n};\n\nconst setFieldName = ({ setData }) => (fieldName) => {\n  setData((d) => d.merge({\n    fieldValue: '',\n    fieldName,\n  }));\n  // console.log('quet', data.query);\n};\n\nconst init = (props) => Record({\n  fieldName: 'name',\n  fieldValue: '',\n  query: props.query,\n  selectedConstraint: 'EqualTo',\n  counter: props.counter,\n  jsonq: props.query.toJSON(),\n\n});\n\nconst clouseController = pipe(\n  withState((props) => init(props)),\n  withHandlers({\n    setFieldValue,\n    setConstraint,\n    setFieldName,\n  }),\n);\n\nexport default clouseController;\n"]},"metadata":{},"sourceType":"module"}