{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe, withLifecycle } from '../../util';\n\nconst onCreate = ({\n  setData\n}) => {\n  console.log('componentDidMount');\n  const query = new Parse.Query('Person');\n  query.find().then(response => {\n    setData(d => d.set('personsList', response));\n  });\n};\n\nconst addPerson = ({\n  data,\n  setData\n}) => () => {\n  const obj = new Parse.Object('Person');\n  obj.save({\n    name: data.personName\n  }).then(() => setData(d => d.merge({\n    personName: undefined,\n    personsList: d.personsList.concat(obj)\n  })));\n};\n\nconst setPersonName = ({\n  setData\n}) => personName => {\n  setData(d => d.set('personName', personName));\n};\n\nconst deletePerson = ({\n  setData,\n  data\n}) => index => {\n  const selectedPerson = data.personsList[index];\n  const query = new Parse.Query('Person');\n  query.get(selectedPerson.id).then(response => {\n    response.destroy().then(() => setData(d => d.set('personsList', d.personsList.filter((value, i) => i !== index))));\n  });\n};\n\nconst editPerson = ({\n  data,\n  setData\n}) => index => {\n  const selectedPerson = data.personsList[index].toJSON();\n  setData(d => d.merge({\n    personName: selectedPerson.name,\n    selectedPersonId: selectedPerson.objectId,\n    selectedPersonIndex: index,\n    editing: !data.editing\n  }));\n};\n\nconst onSearch = ({\n  setData,\n  data\n}) => value => {\n  console.log('finding', value);\n  const query = new Parse.Query('Person');\n  query.contains('name', value);\n  console.log('query', query);\n  query.find().then(response => {\n    setData(d => d.set('personsList', response));\n  });\n};\n\nconst confirmEdit = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query('Person');\n  query.get(data.selectedPersonId).then(response => {\n    response.save({\n      name: data.personName\n    }).then(updatedPerson => {\n      const tempList = [...data.personsList];\n      tempList.splice(data.selectedPersonIndex, 1, updatedPerson);\n      setData(d => d.merge({\n        personsList: tempList,\n        editing: !data.editing,\n        personName: undefined\n      }));\n    });\n  });\n};\n\nconst init = () => Record({\n  personName: undefined,\n  personsList: [],\n  selectedPersonId: undefined,\n  selectedPersonIndex: undefined,\n  editing: false,\n  personSearched: []\n});\n\nconst tableController = pipe(withState(() => init(), 'data', 'setData'), withHandlers({\n  addPerson,\n  setPersonName,\n  onSearch,\n  deletePerson,\n  editPerson,\n  confirmEdit\n}), withLifecycle({\n  onCreate\n}));\nexport default tableController;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/src/components/table/tableController.js"],"names":["Parse","Record","withState","withHandlers","pipe","withLifecycle","onCreate","setData","console","log","query","Query","find","then","response","d","set","addPerson","data","obj","Object","save","name","personName","merge","undefined","personsList","concat","setPersonName","deletePerson","index","selectedPerson","get","id","destroy","filter","value","i","editPerson","toJSON","selectedPersonId","objectId","selectedPersonIndex","editing","onSearch","contains","confirmEdit","updatedPerson","tempList","splice","init","personSearched","tableController"],"mappings":"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","sourcesContent":["import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe, withLifecycle, } from '../../util';\n\n\nconst onCreate = ({ setData }) => {\n  console.log('componentDidMount');\n  const query = new Parse.Query('Person');\n  query.find().then((response) => {\n    setData((d) => d.set('personsList', response));\n  });\n};\n\nconst addPerson = ({ data, setData }) => () => {\n  const obj = new Parse.Object('Person');\n  obj.save({\n    name: data.personName,\n  }).then(() => setData((d) => d.merge({\n    personName: undefined,\n    personsList: d.personsList.concat(obj),\n  })));\n};\n\nconst setPersonName = ({ setData }) => (personName) => {\n  setData((d) => d.set('personName', personName));\n};\n\nconst deletePerson = ({ setData, data }) => (index) => {\n  const selectedPerson = data.personsList[index];\n  const query = new Parse.Query('Person');\n  query.get(selectedPerson.id).then((response) => {\n    response.destroy().then(() => setData((d) => d.set('personsList', d.personsList.filter((value, i) => i !== index))));\n  });\n};\n\nconst editPerson = ({ data, setData }) => (index) => {\n  const selectedPerson = data.personsList[index].toJSON();\n  setData((d) => d.merge({\n    personName: selectedPerson.name,\n    selectedPersonId: selectedPerson.objectId,\n    selectedPersonIndex: index,\n    editing: !data.editing,\n  }));\n};\n\nconst onSearch = ({ setData, data }) => (value) => {\n  console.log('finding', value)\n  const query = new Parse.Query('Person');\n  query.contains('name', value);\n  console.log('query', query)\n  query.find().then((response) => {\n    setData((d) => d.set('personsList', response));\n  });\n}\n\nconst confirmEdit = ({ setData, data }) => () => {\n  const query = new Parse.Query('Person');\n  query.get(data.selectedPersonId).then((response) => {\n    response.save({\n      name: data.personName,\n    }).then((updatedPerson) => {\n      const tempList = [...data.personsList];\n      tempList.splice(data.selectedPersonIndex, 1, updatedPerson);\n      setData((d) => d.merge({\n        personsList: tempList,\n        editing: !data.editing,\n        personName: undefined,\n      }));\n    });\n  });\n};\n\nconst init = () => Record({\n  personName: undefined,\n  personsList: [],\n  selectedPersonId: undefined,\n  selectedPersonIndex: undefined,\n  editing: false,\n  personSearched: [],\n});\n\nconst tableController = pipe(\n  withState(() => init(), 'data', 'setData'),\n  withHandlers({\n    addPerson,\n    setPersonName,\n    onSearch,\n    deletePerson,\n    editPerson,\n    confirmEdit,\n  }),\n  withLifecycle({\n    onCreate,\n  }),\n);\n\nexport default tableController;\n"]},"metadata":{},"sourceType":"module"}