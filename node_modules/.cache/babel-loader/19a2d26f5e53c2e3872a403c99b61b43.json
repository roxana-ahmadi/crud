{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = props => props.filterData;\n\nconst makeMainQuery = ({\n  setData,\n  data\n}) => {\n  console.log('mmmmm');\n  let mainQuery = new Parse.Query(ClouseQuery);\n\n  if (data.op === 'and') {\n    data.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    data.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  }\n\n  com;\n  const newd = { ...data\n  };\n  newd.mainQuery = mainQuery;\n  mainQuery.find().then(response => {\n    newd.searchResults = response;\n    setData(newd);\n    console.log('nd', newd);\n  });\n};\n\nconst addClouse = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data\n  };\n  console.log('newd', newd);\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n  console.log('nedadd', newd);\n  makeMainQuery({\n    setData,\n    data\n  });\n};\n\nconst deleteChild = ({\n  setData,\n  data\n}) => index => {\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n};\n\nconst changeOprand = ({\n  setData,\n  data\n}) => oprand => {\n  const newd = { ...data\n  };\n  newd.op = oprand;\n  setData(newd); // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.concat({\n    op: 'and',\n    childs: [],\n    mainQuery: query,\n    searchResults: []\n  });\n  setData(newd);\n  makeMainQuery({\n    setData,\n    data\n  }); // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'naz',\n    number: 456\n  });\n};\n\nconst oprandController = pipe(withState(init), withHandlers({\n  makeMainQuery,\n  addClouse,\n  deleteChild,\n  changeOprand,\n  addOprand,\n  addObject\n}));\nexport default oprandController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/oprand/oprandController.js"],"names":["Parse","Record","withState","withHandlers","pipe","ClouseQuery","Object","extend","init","props","filterData","makeMainQuery","setData","data","console","log","mainQuery","Query","op","childs","map","item","and","or","com","newd","find","then","response","searchResults","addClouse","query","concat","deleteChild","index","filter","value","i","changeOprand","oprand","addOprand","addObject","obj","save","name","number","oprandController"],"mappings":"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","sourcesContent":["\nimport Parse from 'parse';\nimport {\n  Record,\n} from 'immutable';\nimport {\n  withState, withHandlers, pipe,\n} from '../../util';\n\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = (props) => props.filterData;\n\nconst makeMainQuery = ({ setData, data }) => {\n  console.log('mmmmm');\n  let mainQuery = new Parse.Query(ClouseQuery);\n  if (data.op === 'and') {\n    data.childs.map((item) => {\n      if (!item.childs) { mainQuery = Parse.Query.and(mainQuery, item); } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    data.childs.map((item) => {\n      if (!item.childs) { mainQuery = Parse.Query.or(mainQuery, item); } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  }\n  com;\n  const newd = { ...data };\n  newd.mainQuery = mainQuery;\n  mainQuery.find().then((response) => {\n    newd.searchResults = response;\n    setData(newd);\n    console.log('nd', newd);\n  });\n};\n\nconst addClouse = ({ setData, data }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data };\n  console.log('newd', newd);\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n  console.log('nedadd', newd);\n  makeMainQuery({ setData, data });\n};\n\nconst deleteChild = ({ setData, data }) => (index) => {\n  const newd = { ...data };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n};\n\nconst changeOprand = ({ setData, data }) => (oprand) => {\n  const newd = { ...data };\n  newd.op = oprand;\n  setData(newd);\n  // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({ setData, data }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data };\n  newd.childs = newd.childs.concat({\n    op: 'and', childs: [], mainQuery: query, searchResults: [],\n  });\n  setData(newd);\n  makeMainQuery({ setData, data });\n  // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'naz',\n    number: 456,\n\n  });\n};\n\n\nconst oprandController = pipe(\n  withState(init),\n  withHandlers({\n    makeMainQuery,\n    addClouse,\n    deleteChild,\n    changeOprand,\n    addOprand,\n\n    addObject,\n  }),\n\n);\n\nexport default oprandController;\n"]},"metadata":{},"sourceType":"module"}