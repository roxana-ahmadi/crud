{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\nlet mainQuery = new Parse.Object(ClouseQuery);\n\nconst init = props => props.filterData;\n\nconst addClouse = ({\n  setData\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData(d => d.set('childs', d.childs.concat(query)));\n};\n\nconst deleteChild = ({\n  setData\n}) => index => {\n  setData(d => d.set('childs', d.childs.filter((value, i) => i !== index)));\n};\n\nconst changeOprand = ({\n  setData\n}) => oprand => {\n  setData(d => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData(d => d.set('childs', d.childs.concat(Record({\n    op: 'and',\n    childs: [],\n    mainQuery: query\n  })())));\n};\n\nconst makeMainQuery = () => data => {\n  console.log('maake main query start', data);\n  console.log(data.mainQuery);\n\n  if (data.childs) {\n    console.log('1');\n    const {\n      op\n    } = data;\n    data.childs.map(x => {\n      if (op === 'and') {\n        console.log('2');\n        console.log('x', x);\n        console.log('main query', data.mainQuery);\n        console.log(data.mainQuery);\n        return mainQuery = Parse.Query.and(data.mainQuery, data.childs[0]);\n      }\n\n      if (op === 'or') {\n        console.log('op', data.op);\n        return mainQuery = Parse.Query.and(data.mainQuery, makeMainQuery(x));\n      }\n\n      if (!x.op) {\n        return x;\n\n        if (op === 'and') {\n          console.log('op', op);\n          data.mainQuery = Parse.Query.and(data.mainQuery, x);\n        } else {\n          data.mainQuery = Parse.Query.or(data.mainQuery, x);\n        }\n      }\n\n      return makeMainQuery(x);\n    });\n  }\n\n  return data;\n};\n\nconst oprandController = pipe(withState(init), withHandlers({\n  addClouse,\n  deleteChild,\n  changeOprand,\n  addOprand,\n  makeMainQuery\n}));\nexport default oprandController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/oprand/oprandController.js"],"names":["Parse","Record","withState","withHandlers","pipe","ClouseQuery","Object","extend","mainQuery","init","props","filterData","addClouse","setData","query","Query","d","set","childs","concat","deleteChild","index","filter","value","i","changeOprand","oprand","addOprand","op","makeMainQuery","data","console","log","map","x","and","or","oprandController"],"mappings":"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","sourcesContent":["import Parse from 'parse';\nimport {\n  Record,\n} from 'immutable';\nimport {\n  withState, withHandlers, pipe,\n} from '../../util';\n\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\nlet mainQuery = new Parse.Object(ClouseQuery);\n\nconst init = (props) => props.filterData;\n\nconst addClouse = ({ setData }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData((d) => d.set('childs', d.childs.concat(query)));\n};\n\nconst deleteChild = ({ setData }) => (index) => {\n  setData((d) => d.set('childs', d.childs.filter((value, i) => i !== index)));\n};\n\nconst changeOprand = ({ setData }) => (oprand) => {\n  setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({ setData }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\n\nconst makeMainQuery = () => (data) => {\n  console.log('maake main query start', data);\n  console.log(data.mainQuery);\n\n  if (data.childs) {\n    console.log('1');\n    const { op } = data;\n    data.childs.map((x) => {\n      if (op === 'and') {\n        console.log('2');\n        console.log('x', x);\n        console.log('main query', data.mainQuery);\n        console.log(data.mainQuery);\n        return mainQuery = Parse.Query.and(data.mainQuery, data.childs[0]);\n      }\n      if (op === 'or') {\n        console.log('op', data.op);\n        return mainQuery = Parse.Query.and(data.mainQuery, makeMainQuery(x));\n      }\n      if (!x.op) {\n        return x;\n        if (op === 'and') {\n          console.log('op', op);\n          data.mainQuery = Parse.Query.and(data.mainQuery, x);\n        } else {\n          data.mainQuery = Parse.Query.or(data.mainQuery, x);\n        }\n      }\n      return makeMainQuery(x);\n    });\n  }\n\n  return data;\n};\n\n\nconst oprandController = pipe(\n  withState(init),\n  withHandlers({\n    addClouse,\n    deleteChild,\n    changeOprand,\n    addOprand,\n    makeMainQuery,\n  }),\n);\n\nexport default oprandController;\n"]},"metadata":{},"sourceType":"module"}