{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = props => props.filterData;\n\nconst addClouse = ({\n  setData\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData(d => d.set('childs', d.childs.concat(query)));\n};\n\nconst deleteChild = ({\n  setData\n}) => index => {\n  setData(d => d.set('childs', d.childs.filter((value, i) => i !== index)));\n};\n\nconst changeOprand = ({\n  setData\n}) => oprand => {\n  setData(d => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData(d => d.set('childs', d.childs.concat(Record({\n    op: 'and',\n    childs: [],\n    mainQuery: query\n  })())));\n};\n\nlet mainQuery = new Parse.Query(ClouseQuery);\n\nconst makeMainQuery = data => {\n  console.log('1');\n\n  if (data.childs) {\n    console.log('2');\n    data.childs.map(x => {\n      mainQuery = Parse.Query.and(makeMainQuery(x), mainQuery);\n    });\n  }\n\n  return data; // console.log('maake main query start', data);\n  // console.log(data.mainQuery);\n  // if (data.childs) {\n  //   const { op } = data;\n  //   data.childs.map((x) => {\n  //     if (op === 'and') {\n  //       return Parse.Query.or(mainQuery, makeMainQuery(x));\n  //     }\n  //     if (op === 'or') {\n  //       console.log('op', data.op);\n  //       return mainQuery = Parse.Query.or(mainQuery, makeMainQuery(x));\n  //     }\n  //     if (!x.op) {\n  //       if (op === 'and') {\n  //         console.log('op', op);\n  //         mainQuery = Parse.Query.and(mainQuery, x);\n  //       } else {\n  //         mainQuery = Parse.Query.or(mainQuery, x);\n  //       }\n  //     }\n  //     return makeMainQuery(x);\n  //   });\n  // } else {\n  //   console.log('nochilds');\n  //   return data;\n  // }\n};\n\nconst f = n => {\n  console.log(n);\n\n  if (n <= 1) {\n    return 1;\n  }\n\n  return n * f(n - 1);\n};\n\nconst recursiveFunc = () => n => {\n  makeMainQuery(n);\n};\n\nconst oprandController = pipe(withState(init), withHandlers({\n  addClouse,\n  deleteChild,\n  changeOprand,\n  addOprand,\n  makeMainQuery,\n  recursiveFunc\n}));\nexport default oprandController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/oprand/oprandController.js"],"names":["Parse","Record","withState","withHandlers","pipe","ClouseQuery","Object","extend","init","props","filterData","addClouse","setData","query","Query","d","set","childs","concat","deleteChild","index","filter","value","i","changeOprand","oprand","addOprand","op","mainQuery","makeMainQuery","data","console","log","map","x","and","f","n","recursiveFunc","oprandController"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,MADF,QAEO,WAFP;AAGA,SACEC,SADF,EACaC,YADb,EAC2BC,IAD3B,QAEO,YAFP;AAKA,MAAMC,WAAW,GAAGL,KAAK,CAACM,MAAN,CAAaC,MAAb,CAAoB,aAApB,CAApB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAWA,KAAK,CAACC,UAA9B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB,MAAM;AACvC,QAAMC,KAAK,GAAG,IAAIb,KAAK,CAACc,KAAV,CAAgBT,WAAhB,CAAd;AACAO,EAAAA,OAAO,CAAEG,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,QAAN,EAAgBD,CAAC,CAACE,MAAF,CAASC,MAAT,CAAgBL,KAAhB,CAAhB,CAAR,CAAP;AACD,CAHD;;AAKA,MAAMM,WAAW,GAAG,CAAC;AAAEP,EAAAA;AAAF,CAAD,KAAkBQ,KAAD,IAAW;AAC9CR,EAAAA,OAAO,CAAEG,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,QAAN,EAAgBD,CAAC,CAACE,MAAF,CAASI,MAAT,CAAgB,CAACC,KAAD,EAAQC,CAAR,KAAcA,CAAC,KAAKH,KAApC,CAAhB,CAAR,CAAP;AACD,CAFD;;AAIA,MAAMI,YAAY,GAAG,CAAC;AAAEZ,EAAAA;AAAF,CAAD,KAAkBa,MAAD,IAAY;AAChDb,EAAAA,OAAO,CAAEG,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,IAAN,EAAYS,MAAZ,CAAR,CAAP;AACD,CAFD;;AAIA,MAAMC,SAAS,GAAG,CAAC;AAAEd,EAAAA;AAAF,CAAD,KAAiB,MAAM;AACvC,QAAMC,KAAK,GAAG,IAAIb,KAAK,CAACc,KAAV,CAAgBT,WAAhB,CAAd;AACAO,EAAAA,OAAO,CAAEG,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,QAAN,EAAgBD,CAAC,CAACE,MAAF,CAASC,MAAT,CAAgBjB,MAAM,CAAC;AAAE0B,IAAAA,EAAE,EAAE,KAAN;AAAaV,IAAAA,MAAM,EAAE,EAArB;AAAyBW,IAAAA,SAAS,EAAEf;AAApC,GAAD,CAAN,EAAhB,CAAhB,CAAR,CAAP;AACD,CAHD;;AAKA,IAAIe,SAAS,GAAG,IAAI5B,KAAK,CAACc,KAAV,CAAgBT,WAAhB,CAAhB;;AAEA,MAAMwB,aAAa,GAAIC,IAAD,IAAU;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,MAAIF,IAAI,CAACb,MAAT,EAAiB;AACfc,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAEAF,IAAAA,IAAI,CAACb,MAAL,CAAYgB,GAAZ,CAAiBC,CAAD,IAAO;AAAEN,MAAAA,SAAS,GAAG5B,KAAK,CAACc,KAAN,CAAYqB,GAAZ,CAAgBN,aAAa,CAACK,CAAD,CAA7B,EAAkCN,SAAlC,CAAZ;AAA2D,KAApF;AACD;;AACD,SAAOE,IAAP,CAP8B,CAQ9B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAnCD;;AAqCA,MAAMM,CAAC,GAAIC,CAAD,IAAO;AACfN,EAAAA,OAAO,CAACC,GAAR,CAAYK,CAAZ;;AACA,MAAIA,CAAC,IAAI,CAAT,EAAY;AACV,WAAO,CAAP;AACD;;AACD,SAAOA,CAAC,GAAGD,CAAC,CAACC,CAAC,GAAG,CAAL,CAAZ;AACD,CAND;;AAQA,MAAMC,aAAa,GAAG,MAAOD,CAAD,IAAO;AACjCR,EAAAA,aAAa,CAACQ,CAAD,CAAb;AACD,CAFD;;AAIA,MAAME,gBAAgB,GAAGnC,IAAI,CAC3BF,SAAS,CAACM,IAAD,CADkB,EAE3BL,YAAY,CAAC;AACXQ,EAAAA,SADW;AAEXQ,EAAAA,WAFW;AAGXK,EAAAA,YAHW;AAIXE,EAAAA,SAJW;AAKXG,EAAAA,aALW;AAMXS,EAAAA;AANW,CAAD,CAFe,CAA7B;AAYA,eAAeC,gBAAf","sourcesContent":["import Parse from 'parse';\nimport {\n  Record,\n} from 'immutable';\nimport {\n  withState, withHandlers, pipe,\n} from '../../util';\n\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = (props) => props.filterData;\n\nconst addClouse = ({ setData }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData((d) => d.set('childs', d.childs.concat(query)));\n};\n\nconst deleteChild = ({ setData }) => (index) => {\n  setData((d) => d.set('childs', d.childs.filter((value, i) => i !== index)));\n};\n\nconst changeOprand = ({ setData }) => (oprand) => {\n  setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({ setData }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\nlet mainQuery = new Parse.Query(ClouseQuery);\n\nconst makeMainQuery = (data) => {\n  console.log('1');\n  if (data.childs) {\n    console.log('2');\n\n    data.childs.map((x) => { mainQuery = Parse.Query.and(makeMainQuery(x), mainQuery); });\n  }\n  return data;\n  // console.log('maake main query start', data);\n  // console.log(data.mainQuery);\n\n  // if (data.childs) {\n  //   const { op } = data;\n  //   data.childs.map((x) => {\n  //     if (op === 'and') {\n  //       return Parse.Query.or(mainQuery, makeMainQuery(x));\n  //     }\n  //     if (op === 'or') {\n  //       console.log('op', data.op);\n  //       return mainQuery = Parse.Query.or(mainQuery, makeMainQuery(x));\n  //     }\n  //     if (!x.op) {\n  //       if (op === 'and') {\n  //         console.log('op', op);\n  //         mainQuery = Parse.Query.and(mainQuery, x);\n  //       } else {\n  //         mainQuery = Parse.Query.or(mainQuery, x);\n  //       }\n  //     }\n  //     return makeMainQuery(x);\n  //   });\n  // } else {\n  //   console.log('nochilds');\n  //   return data;\n  // }\n};\n\nconst f = (n) => {\n  console.log(n);\n  if (n <= 1) {\n    return 1;\n  }\n  return n * f(n - 1);\n};\n\nconst recursiveFunc = () => (n) => {\n  makeMainQuery(n);\n};\n\nconst oprandController = pipe(\n  withState(init),\n  withHandlers({\n    addClouse,\n    deleteChild,\n    changeOprand,\n    addOprand,\n    makeMainQuery,\n    recursiveFunc,\n  }),\n);\n\nexport default oprandController;\n"]},"metadata":{},"sourceType":"module"}