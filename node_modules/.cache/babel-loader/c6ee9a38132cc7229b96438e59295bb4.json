{"ast":null,"code":"/*\n * Copyright (c) 2019-present, The Yumcoder Authors. All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\nimport { useReducer, useMemo } from 'react';\n\nconst withStateHandlers = (initialValue, handlers) => (props = {}) => {\n  const actionTypes = Object.keys(handlers); // note: action.type is function name, action.payload are function parameters\n  // handler = function [action.type](action.payload)\n\n  const reducer = (state, action) => ({ ...state,\n    ...handlers[action.type](state, props)(...action.payload)\n  }); // see https://reactjs.org/docs/hooks-reference.html#usereducer\n\n\n  const [state, dispatch] = useReducer(reducer, // eslint-disable-next-line react-hooks/exhaustive-deps\n  typeof initialValue === 'function' ? useMemo(() => initialValue(props), []) : initialValue);\n  const boundHandlers = actionTypes.reduce((obj, type) => Object.assign(obj, {\n    [type]: (...payload) => {\n      if (payload !== undefined) dispatch({\n        type,\n        payload\n      });\n    }\n  }), {});\n  return { ...props,\n    ...state,\n    ...boundHandlers\n  };\n};\n\nexport default withStateHandlers;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/src/util/withStateHandlers.js"],"names":["useReducer","useMemo","withStateHandlers","initialValue","handlers","props","actionTypes","Object","keys","reducer","state","action","type","payload","dispatch","boundHandlers","reduce","obj","assign","undefined"],"mappings":"AAAA;;;;;;AAOA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,YAAD,EAAeC,QAAf,KAA4B,CAACC,KAAK,GAAG,EAAT,KAAgB;AACpE,QAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAApB,CADoE,CAGpE;AACA;;AACA,QAAMK,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,MAAoB,EAClC,GAAGD,KAD+B;AAElC,OAAGN,QAAQ,CAACO,MAAM,CAACC,IAAR,CAAR,CAAsBF,KAAtB,EAA6BL,KAA7B,EAAoC,GAAGM,MAAM,CAACE,OAA9C;AAF+B,GAApB,CAAhB,CALoE,CAUpE;;;AACA,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBd,UAAU,CAClCS,OADkC,EAElC;AACA,SAAON,YAAP,KAAwB,UAAxB,GAAqCF,OAAO,CAAC,MAAME,YAAY,CAACE,KAAD,CAAnB,EAA4B,EAA5B,CAA5C,GAA8EF,YAH5C,CAApC;AAMA,QAAMY,aAAa,GAAGT,WAAW,CAACU,MAAZ,CACpB,CAACC,GAAD,EAAML,IAAN,KACEL,MAAM,CAACW,MAAP,CAAcD,GAAd,EAAmB;AACjB,KAACL,IAAD,GAAQ,CAAC,GAAGC,OAAJ,KAAgB;AACtB,UAAIA,OAAO,KAAKM,SAAhB,EAA2BL,QAAQ,CAAC;AAAEF,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,CAAR;AAC5B;AAHgB,GAAnB,CAFkB,EAOpB,EAPoB,CAAtB;AAUA,SAAO,EAAE,GAAGR,KAAL;AAAY,OAAGK,KAAf;AAAsB,OAAGK;AAAzB,GAAP;AACD,CA5BD;;AA8BA,eAAeb,iBAAf","sourcesContent":["/*\n * Copyright (c) 2019-present, The Yumcoder Authors. All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { useReducer, useMemo } from 'react';\n\nconst withStateHandlers = (initialValue, handlers) => (props = {}) => {\n  const actionTypes = Object.keys(handlers);\n\n  // note: action.type is function name, action.payload are function parameters\n  // handler = function [action.type](action.payload)\n  const reducer = (state, action) => ({\n    ...state,\n    ...handlers[action.type](state, props)(...action.payload),\n  });\n\n  // see https://reactjs.org/docs/hooks-reference.html#usereducer\n  const [state, dispatch] = useReducer(\n    reducer,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    typeof initialValue === 'function' ? useMemo(() => initialValue(props), []) : initialValue,\n  );\n\n  const boundHandlers = actionTypes.reduce(\n    (obj, type) =>\n      Object.assign(obj, {\n        [type]: (...payload) => {\n          if (payload !== undefined) dispatch({ type, payload });\n        },\n      }),\n    {},\n  );\n\n  return { ...props, ...state, ...boundHandlers };\n};\n\nexport default withStateHandlers;\n"]},"metadata":{},"sourceType":"module"}