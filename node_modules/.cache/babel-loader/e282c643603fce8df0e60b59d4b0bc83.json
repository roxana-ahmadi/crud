{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n * @alias Parse.User\n * @extends Parse.Object\n */\n\nvar ParseUser =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n  /**\n   * @param {Object} attributes The initial set of data to store in the user.\n   */\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseUser).call(this, '_User'));\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Parse User');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n    * @param {Object} options\n   * @return {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {String|AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {Object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {Object} saveOpts useMasterKey / sessionToken\n     * @return {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authType] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n      */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for\n     * unlinking)\n      */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {String|AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {Object} options MasterKey / SessionToken\n     * @return {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n      */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n      */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n      */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n      * @return {Boolean}\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n      * @return {String}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n      * @param {String} username\n     * @param {Object} options\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n      * @param {String} password\n     * @param {Object} options\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n      * @return {String}\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n      * @param {String} email\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n      * @return {String} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n      * @return (Boolean) whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {Object} attrs Extra fields to set on the new user, or null.\n     * @param {Object} options\n     * @return {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {Object} options\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"save\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this6 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n\n        return _this7;\n      });\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class\n      * @param {Object} protoProps A set of properties to add to the prototype\n     * @param {Object} classProps A set of static properties to add to the class\n     * @static\n     * @return {Class} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: {[prop: string]: any}*/\n    , classProps\n    /*: {[prop: string]: any}*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n      * @static\n     * @return {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n      * @static\n     * @return {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} username The username (or email) to sign up with.\n     * @param {String} password The password to sign up with.\n     * @param {Object} attrs Extra fields to set on the new user.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} username The username (or email) to log in with.\n     * @param {String} password The password to log in with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} sessionToken The sessionToken to log in with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {String} sessionToken The sessionToken to get user with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {Object} userJSON The JSON map of the User's data\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @static\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} email The email address associated with the user that\n     *     forgot their password.\n     * @param {Object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n      * @param {Boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n      * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n      * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n      * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var currentUser = this.currentUser();\n\n    var promise = _promise.default.resolve();\n\n    if (currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser)) {\n      promise = currentUser.destroy({\n        sessionToken: currentUser.getSessionToken()\n      });\n    }\n\n    currentUserCache = user;\n\n    user._cleanupAuthData();\n\n    user._synchronizeAllAuthData();\n\n    return promise.then(function () {\n      return DefaultController.updateUserOnDisk(user);\n    });\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty name.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request('GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var token = user.getSessionToken();\n\n    if (!token) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n\n    options.sessionToken = token;\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n\n      session._finishFetch(result);\n\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return _promise.default.resolve(user);\n    });\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/node_modules/parse/lib/browser/ParseUser.js"],"names":["_interopRequireDefault","require","_Object$defineProperty2","exports","value","default","_stringify","_defineProperty","_promise","_typeof2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_AnonymousUtils","_CoreManager","_isRevocableSession","_ParseError","_ParseObject2","_ParseSession","_Storage","CURRENT_USER_KEY","canUseCurrentUser","get","currentUserCacheMatchesDisk","currentUserCache","authProviders","ParseUser","_ParseObject","attributes","_this","call","set","Error","key","options","upgradeOptions","hasOwnProperty","useMasterKey","controller","getUserController","upgradeToRevocableSession","provider","_this2","saveOpts","arguments","length","undefined","sessionToken","getSessionToken","authType","authProvider","restoreAuthentication","getAuthType","authData","linkWith","resolve","reject","authenticate","success","result","opts","then","error","_error","isCurrent","_unlinkFrom","_key","_synchronizeAuthData","_key2","_this3","_key3","_logOutWith","deauthenticate","current","id","username","anonymous","password","email","token","attrs","signupOptions","installationId","signUp","loginOptions","logIn","_this4","_len","args","Array","_key4","prototype","apply","updateUserOnDisk","_this5","_len2","_key5","removeUserFromDisk","_this6","_len3","_key6","_this7","_len4","_key7","protoProps","classProps","_prop","enumerable","writable","configurable","_prop2","currentUser","currentUserAsync","user","OTHER_CAUSE","_finishFetch","becomeOptions","become","meOptions","me","userJSON","hydrate","logOut","requestOptions","requestPasswordReset","isAllowed","_upgradeToRevocableSession","currentAsync","registerSubclass","DefaultController","path","generatePath","json","toJSON","className","userData","crypto","getCryptoController","encrypt","setItemAsync","removeItemAsync","setCurrentUser","promise","equals","isLinked","destroy","_cleanupAuthData","_synchronizeAllAuthData","async","getItem","decrypt","JSON","parse","_id","objectId","_sessionToken","fromJSON","getItemAsync","toString","save","RESTController","getRESTController","stateController","getObjectStateController","auth","request","response","_migrateId","_setExisted","setPendingOp","_getStateIdentifier","isAnonymous","currentSession","_logOutWithAll","SESSION_MISSING","session","setUserController","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n * @alias Parse.User\n * @extends Parse.Object\n */\n\nvar ParseUser =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n  /**\n   * @param {Object} attributes The initial set of data to store in the user.\n   */\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseUser).call(this, '_User'));\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Parse User');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n    * @param {Object} options\n   * @return {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {String|AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {Object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {Object} saveOpts useMasterKey / sessionToken\n     * @return {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authType] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n      */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for\n     * unlinking)\n      */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {String|AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {Object} options MasterKey / SessionToken\n     * @return {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n      */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n      */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n      */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n      * @return {Boolean}\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n      * @return {String}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n      * @param {String} username\n     * @param {Object} options\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n      * @param {String} password\n     * @param {Object} options\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n      * @return {String}\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n      * @param {String} email\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n      * @return {String} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n      * @return (Boolean) whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {Object} attrs Extra fields to set on the new user, or null.\n     * @param {Object} options\n     * @return {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {Object} options\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"save\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this6 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n\n        return _this7;\n      });\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class\n      * @param {Object} protoProps A set of properties to add to the prototype\n     * @param {Object} classProps A set of static properties to add to the class\n     * @static\n     * @return {Class} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: {[prop: string]: any}*/\n    , classProps\n    /*: {[prop: string]: any}*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n      * @static\n     * @return {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n      * @static\n     * @return {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} username The username (or email) to sign up with.\n     * @param {String} password The password to sign up with.\n     * @param {Object} attrs Extra fields to set on the new user.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} username The username (or email) to log in with.\n     * @param {String} password The password to log in with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} sessionToken The sessionToken to log in with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {String} sessionToken The sessionToken to get user with.\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {Object} userJSON The JSON map of the User's data\n     * @static\n     * @return {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @static\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * <p>Calls options.success or options.error on completion.</p>\n     *\n      * @param {String} email The email address associated with the user that\n     *     forgot their password.\n     * @param {Object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n      * @param {Boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n      * @param {Object} options\n     * @static\n     * @return {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n      * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n      * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var currentUser = this.currentUser();\n\n    var promise = _promise.default.resolve();\n\n    if (currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser)) {\n      promise = currentUser.destroy({\n        sessionToken: currentUser.getSessionToken()\n      });\n    }\n\n    currentUserCache = user;\n\n    user._cleanupAuthData();\n\n    user._synchronizeAllAuthData();\n\n    return promise.then(function () {\n      return DefaultController.updateUserOnDisk(user);\n    });\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty name.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request('GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var token = user.getSessionToken();\n\n    if (!token) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n\n    options.sessionToken = token;\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n\n      session._finishFetch(result);\n\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return _promise.default.resolve(user);\n    });\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}