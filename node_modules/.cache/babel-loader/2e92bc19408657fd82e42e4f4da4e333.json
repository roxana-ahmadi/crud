{"ast":null,"code":"/*\n * Copyright (c) 2019-present, The Yumcoder Authors. All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useRef } from 'react';\n\nfunction usePrevious(value) {\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst withLifecycle = spec => (props = {}) => {\n  if (spec.onCreate) {\n    // If you only want to run the function given to useEffect after the initial render,\n    // you can give it an empty array as second argument.\n    useEffect(() => {\n      spec.onCreate.call(props, props);\n    }, []);\n  }\n\n  if (spec.onDestroy) {\n    // When you return a function in the callback passed to useEffect,\n    // the returned function will be called before the component is removed from the UI\n    useEffect(() => () => {\n      spec.onDestroy.call(props, props);\n    }, []);\n  }\n\n  if (spec.onUpdate) {\n    const previousProps = usePrevious(props);\n    useEffect(() => {\n      spec.onUpdate.call(props, previousProps);\n    });\n  }\n\n  return { ...props\n  };\n};\n\nexport default withLifecycle;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/util/withLifecycle.js"],"names":["useEffect","useRef","usePrevious","value","ref","current","withLifecycle","spec","props","onCreate","call","onDestroy","onUpdate","previousProps"],"mappings":"AAAA;;;;;;;AAOA;AACA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAMC,GAAG,GAAGH,MAAM,CAAC,IAAD,CAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACD,GAFQ,CAAT;AAIA,SAAOC,GAAG,CAACC,OAAX;AACD;;AAED,MAAMC,aAAa,GAAGC,IAAI,IAAI,CAACC,KAAK,GAAG,EAAT,KAAgB;AAC5C,MAAID,IAAI,CAACE,QAAT,EAAmB;AACjB;AACA;AACAT,IAAAA,SAAS,CAAC,MAAM;AACdO,MAAAA,IAAI,CAACE,QAAL,CAAcC,IAAd,CAAmBF,KAAnB,EAA0BA,KAA1B;AACD,KAFQ,EAEN,EAFM,CAAT;AAGD;;AAED,MAAID,IAAI,CAACI,SAAT,EAAoB;AAClB;AACA;AACAX,IAAAA,SAAS,CACP,MAAM,MAAM;AACVO,MAAAA,IAAI,CAACI,SAAL,CAAeD,IAAf,CAAoBF,KAApB,EAA2BA,KAA3B;AACD,KAHM,EAIP,EAJO,CAAT;AAMD;;AAED,MAAID,IAAI,CAACK,QAAT,EAAmB;AACjB,UAAMC,aAAa,GAAGX,WAAW,CAACM,KAAD,CAAjC;AACAR,IAAAA,SAAS,CAAC,MAAM;AACdO,MAAAA,IAAI,CAACK,QAAL,CAAcF,IAAd,CAAmBF,KAAnB,EAA0BK,aAA1B;AACD,KAFQ,CAAT;AAGD;;AAED,SAAO,EAAE,GAAGL;AAAL,GAAP;AACD,CA5BD;;AA8BA,eAAeF,aAAf","sourcesContent":["/*\n * Copyright (c) 2019-present, The Yumcoder Authors. All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useRef } from 'react';\n\nfunction usePrevious(value) {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current;\n}\n\nconst withLifecycle = spec => (props = {}) => {\n  if (spec.onCreate) {\n    // If you only want to run the function given to useEffect after the initial render,\n    // you can give it an empty array as second argument.\n    useEffect(() => {\n      spec.onCreate.call(props, props);\n    }, []);\n  }\n\n  if (spec.onDestroy) {\n    // When you return a function in the callback passed to useEffect,\n    // the returned function will be called before the component is removed from the UI\n    useEffect(\n      () => () => {\n        spec.onDestroy.call(props, props);\n      },\n      [],\n    );\n  }\n\n  if (spec.onUpdate) {\n    const previousProps = usePrevious(props);\n    useEffect(() => {\n      spec.onUpdate.call(props, previousProps);\n    });\n  }\n\n  return { ...props };\n};\n\nexport default withLifecycle;\n"]},"metadata":{},"sourceType":"module"}