{"ast":null,"code":"import Parse from 'parse';\nimport { withState, withHandlers, pipe } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = props => props.filterData;\n\nconst makeMainQuery = ({\n  data,\n  setData\n}) => () => {\n  console.log();\n  console.log('makemain query');\n  let mainQuery = new Parse.Query(ClouseQuery);\n\n  if (data.op === 'and') {\n    data.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    data.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  }\n\n  const newdd = { ...data\n  };\n  newdd.mainQuery = mainQuery;\n  newdd.mainQuery.find().then(response => {\n    newdd.searchResults = response;\n    console.log(response);\n  });\n  console.log(newdd.searchResults);\n  console.log(newdd.mainQuery);\n  setData(newdd);\n};\n\nconst addClouse = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n  makeMainQuery({\n    setData,\n    data\n  });\n};\n\nconst deleteChild = ({\n  setData,\n  data\n}) => index => {\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n  makeMainQuery({\n    setData,\n    data\n  });\n};\n\nconst changeOprand = ({\n  setData,\n  data\n}) => oprand => {\n  const newd = { ...data\n  };\n  newd.op = oprand;\n  setData(newd);\n  makeMainQuery({\n    setData,\n    data\n  }); // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData,\n  data,\n  filterData\n}) => () => {\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.concat(filterData);\n  setData(newd);\n  makeMainQuery({\n    setData,\n    data\n  }); // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'rox',\n    number: 456\n  });\n};\n\nconst oprandController = pipe(withState(init), withHandlers({\n  makeMainQuery,\n  addClouse,\n  deleteChild,\n  changeOprand,\n  addOprand,\n  addObject\n}));\nexport default oprandController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/oprand/oprandController.js"],"names":["Parse","withState","withHandlers","pipe","ClouseQuery","Object","extend","init","props","filterData","makeMainQuery","data","setData","console","log","mainQuery","Query","op","childs","map","item","and","or","newdd","find","then","response","searchResults","addClouse","query","newd","concat","deleteChild","index","filter","value","i","changeOprand","oprand","addOprand","addObject","obj","save","name","number","oprandController"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,SADF,EACaC,YADb,EAC2BC,IAD3B,QAEO,YAFP;AAKA,MAAMC,WAAW,GAAGJ,KAAK,CAACK,MAAN,CAAaC,MAAb,CAAoB,aAApB,CAApB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAWA,KAAK,CAACC,UAA9B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB,MAAM;AACjDC,EAAAA,OAAO,CAACC,GAAR;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,MAAIC,SAAS,GAAG,IAAIf,KAAK,CAACgB,KAAV,CAAgBZ,WAAhB,CAAhB;;AACA,MAAIO,IAAI,CAACM,EAAL,KAAY,KAAhB,EAAuB;AACrBN,IAAAA,IAAI,CAACO,MAAL,CAAYC,GAAZ,CAAiBC,IAAD,IAAU;AACxB,UAAI,CAACA,IAAI,CAACF,MAAV,EAAkB;AAAEH,QAAAA,SAAS,GAAGf,KAAK,CAACgB,KAAN,CAAYK,GAAZ,CAAgBN,SAAhB,EAA2BK,IAA3B,CAAZ;AAA+C,OAAnE,MAAyE;AACvEL,QAAAA,SAAS,GAAGf,KAAK,CAACgB,KAAN,CAAYK,GAAZ,CAAgBN,SAAhB,EAA2BK,IAAI,CAACL,SAAhC,CAAZ;AACD;AACF,KAJD;AAKD,GAND,MAMO;AACLJ,IAAAA,IAAI,CAACO,MAAL,CAAYC,GAAZ,CAAiBC,IAAD,IAAU;AACxB,UAAI,CAACA,IAAI,CAACF,MAAV,EAAkB;AAAEH,QAAAA,SAAS,GAAGf,KAAK,CAACgB,KAAN,CAAYM,EAAZ,CAAeP,SAAf,EAA0BK,IAA1B,CAAZ;AAA8C,OAAlE,MAAwE;AACtEL,QAAAA,SAAS,GAAGf,KAAK,CAACgB,KAAN,CAAYK,GAAZ,CAAgBN,SAAhB,EAA2BK,IAAI,CAACL,SAAhC,CAAZ;AACD;AACF,KAJD;AAKD;;AACD,QAAMQ,KAAK,GAAG,EAAE,GAAGZ;AAAL,GAAd;AACAY,EAAAA,KAAK,CAACR,SAAN,GAAkBA,SAAlB;AACAQ,EAAAA,KAAK,CAACR,SAAN,CAAgBS,IAAhB,GAAuBC,IAAvB,CAA6BC,QAAD,IAAc;AACxCH,IAAAA,KAAK,CAACI,aAAN,GAAsBD,QAAtB;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACD,GAHD;AAIAb,EAAAA,OAAO,CAACC,GAAR,CAAYS,KAAK,CAACI,aAAlB;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAYS,KAAK,CAACR,SAAlB;AACAH,EAAAA,OAAO,CAACW,KAAD,CAAP;AACD,CA1BD;;AA4BA,MAAMK,SAAS,GAAG,CAAC;AAAEhB,EAAAA,OAAF;AAAWD,EAAAA;AAAX,CAAD,KAAuB,MAAM;AAC7C,QAAMkB,KAAK,GAAG,IAAI7B,KAAK,CAACgB,KAAV,CAAgBZ,WAAhB,CAAd;AACA,QAAM0B,IAAI,GAAG,EAAE,GAAGnB;AAAL,GAAb;AACAmB,EAAAA,IAAI,CAACZ,MAAL,GAAcY,IAAI,CAACZ,MAAL,CAAYa,MAAZ,CAAmBF,KAAnB,CAAd;AACAjB,EAAAA,OAAO,CAACkB,IAAD,CAAP;AACApB,EAAAA,aAAa,CAAC;AAAEE,IAAAA,OAAF;AAAWD,IAAAA;AAAX,GAAD,CAAb;AACD,CAND;;AAQA,MAAMqB,WAAW,GAAG,CAAC;AAAEpB,EAAAA,OAAF;AAAWD,EAAAA;AAAX,CAAD,KAAwBsB,KAAD,IAAW;AACpD,QAAMH,IAAI,GAAG,EAAE,GAAGnB;AAAL,GAAb;AACAmB,EAAAA,IAAI,CAACZ,MAAL,GAAcY,IAAI,CAACZ,MAAL,CAAYgB,MAAZ,CAAmB,CAACC,KAAD,EAAQC,CAAR,KAAcA,CAAC,KAAKH,KAAvC,CAAd;AACArB,EAAAA,OAAO,CAACkB,IAAD,CAAP;AACApB,EAAAA,aAAa,CAAC;AAAEE,IAAAA,OAAF;AAAWD,IAAAA;AAAX,GAAD,CAAb;AACD,CALD;;AAOA,MAAM0B,YAAY,GAAG,CAAC;AAAEzB,EAAAA,OAAF;AAAWD,EAAAA;AAAX,CAAD,KAAwB2B,MAAD,IAAY;AACtD,QAAMR,IAAI,GAAG,EAAE,GAAGnB;AAAL,GAAb;AACAmB,EAAAA,IAAI,CAACb,EAAL,GAAUqB,MAAV;AACA1B,EAAAA,OAAO,CAACkB,IAAD,CAAP;AACApB,EAAAA,aAAa,CAAC;AAAEE,IAAAA,OAAF;AAAWD,IAAAA;AAAX,GAAD,CAAb,CAJsD,CAMtD;AACD,CAPD;;AASA,MAAM4B,SAAS,GAAG,CAAC;AAAE3B,EAAAA,OAAF;AAAWD,EAAAA,IAAX;AAAiBF,EAAAA;AAAjB,CAAD,KAAmC,MAAM;AACzD,QAAMqB,IAAI,GAAG,EAAE,GAAGnB;AAAL,GAAb;AACAmB,EAAAA,IAAI,CAACZ,MAAL,GAAcY,IAAI,CAACZ,MAAL,CAAYa,MAAZ,CAAmBtB,UAAnB,CAAd;AACAG,EAAAA,OAAO,CAACkB,IAAD,CAAP;AACApB,EAAAA,aAAa,CAAC;AAAEE,IAAAA,OAAF;AAAWD,IAAAA;AAAX,GAAD,CAAb,CAJyD,CAKzD;AACD,CAND;;AASA,MAAM6B,SAAS,GAAG,MAAM,MAAM;AAC5B,QAAMC,GAAG,GAAG,IAAIzC,KAAK,CAACK,MAAV,CAAiB,aAAjB,CAAZ;AACAoC,EAAAA,GAAG,CAACC,IAAJ,CAAS;AACPC,IAAAA,IAAI,EAAE,KADC;AAEPC,IAAAA,MAAM,EAAE;AAFD,GAAT;AAKD,CAPD;;AAUA,MAAMC,gBAAgB,GAAG1C,IAAI,CAC3BF,SAAS,CAACM,IAAD,CADkB,EAE3BL,YAAY,CAAC;AACXQ,EAAAA,aADW;AAEXkB,EAAAA,SAFW;AAGXI,EAAAA,WAHW;AAIXK,EAAAA,YAJW;AAKXE,EAAAA,SALW;AAMXC,EAAAA;AANW,CAAD,CAFe,CAA7B;AAaA,eAAeK,gBAAf","sourcesContent":["\nimport Parse from 'parse';\nimport {\n  withState, withHandlers, pipe,\n} from '../../util';\n\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = (props) => props.filterData;\n\nconst makeMainQuery = ({ data, setData }) => () => {\n  console.log();\n  console.log('makemain query');\n  let mainQuery = new Parse.Query(ClouseQuery);\n  if (data.op === 'and') {\n    data.childs.map((item) => {\n      if (!item.childs) { mainQuery = Parse.Query.and(mainQuery, item); } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    data.childs.map((item) => {\n      if (!item.childs) { mainQuery = Parse.Query.or(mainQuery, item); } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  }\n  const newdd = { ...data };\n  newdd.mainQuery = mainQuery;\n  newdd.mainQuery.find().then((response) => {\n    newdd.searchResults = response;\n    console.log(response);\n  });\n  console.log(newdd.searchResults);\n  console.log(newdd.mainQuery);\n  setData(newdd);\n};\n\nconst addClouse = ({ setData, data }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data };\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n  makeMainQuery({ setData, data });\n};\n\nconst deleteChild = ({ setData, data }) => (index) => {\n  const newd = { ...data };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n  makeMainQuery({ setData, data });\n};\n\nconst changeOprand = ({ setData, data }) => (oprand) => {\n  const newd = { ...data };\n  newd.op = oprand;\n  setData(newd);\n  makeMainQuery({ setData, data });\n\n  // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({ setData, data, filterData }) => () => {\n  const newd = { ...data };\n  newd.childs = newd.childs.concat(filterData);\n  setData(newd);\n  makeMainQuery({ setData, data });\n  // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'rox',\n    number: 456,\n\n  });\n};\n\n\nconst oprandController = pipe(\n  withState(init),\n  withHandlers({\n    makeMainQuery,\n    addClouse,\n    deleteChild,\n    changeOprand,\n    addOprand,\n    addObject,\n  }),\n\n);\n\nexport default oprandController;\n"]},"metadata":{},"sourceType":"module"}