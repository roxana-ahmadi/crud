{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _bind = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/bind\"));\n\nvar _setTimeout2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/set-timeout\"));\n\nvar _values = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/values\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/map\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _EventEmitter2 = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _LiveQuerySubscription = _interopRequireDefault(require(\"./LiveQuerySubscription\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n/* global WebSocket */\n// The LiveQuery client inner state\n\n\nvar CLIENT_STATE = {\n  INITIALIZED: 'initialized',\n  CONNECTING: 'connecting',\n  CONNECTED: 'connected',\n  CLOSED: 'closed',\n  RECONNECTING: 'reconnecting',\n  DISCONNECTED: 'disconnected'\n}; // The event type the LiveQuery client should sent to server\n\nvar OP_TYPES = {\n  CONNECT: 'connect',\n  SUBSCRIBE: 'subscribe',\n  UNSUBSCRIBE: 'unsubscribe',\n  ERROR: 'error'\n}; // The event we get back from LiveQuery server\n\nvar OP_EVENTS = {\n  CONNECTED: 'connected',\n  SUBSCRIBED: 'subscribed',\n  UNSUBSCRIBED: 'unsubscribed',\n  ERROR: 'error',\n  CREATE: 'create',\n  UPDATE: 'update',\n  ENTER: 'enter',\n  LEAVE: 'leave',\n  DELETE: 'delete'\n}; // The event the LiveQuery client should emit\n\nvar CLIENT_EMMITER_TYPES = {\n  CLOSE: 'close',\n  ERROR: 'error',\n  OPEN: 'open'\n}; // The event the LiveQuery subscription should emit\n\nvar SUBSCRIPTION_EMMITER_TYPES = {\n  OPEN: 'open',\n  CLOSE: 'close',\n  ERROR: 'error',\n  CREATE: 'create',\n  UPDATE: 'update',\n  ENTER: 'enter',\n  LEAVE: 'leave',\n  DELETE: 'delete'\n};\n\nvar generateInterval = function (k) {\n  return Math.random() * Math.min(30, Math.pow(2, k) - 1) * 1000;\n};\n/**\n * Creates a new LiveQueryClient.\n * Extends events.EventEmitter\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * A wrapper of a standard WebSocket client. We add several useful methods to\n * help you connect/disconnect to LiveQueryServer, subscribe/unsubscribe a ParseQuery easily.\n *\n * javascriptKey and masterKey are used for verifying the LiveQueryClient when it tries\n * to connect to the LiveQuery server\n *\n * We expose three events to help you monitor the status of the LiveQueryClient.\n *\n * <pre>\n * let Parse = require('parse/node');\n * let LiveQueryClient = Parse.LiveQueryClient;\n * let client = new LiveQueryClient({\n *   applicationId: '',\n *   serverURL: '',\n *   javascriptKey: '',\n *   masterKey: ''\n *  });\n * </pre>\n *\n * Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n * <pre>\n * client.on('open', () => {\n *\n * });</pre>\n *\n * Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n * <pre>\n * client.on('close', () => {\n *\n * });</pre>\n *\n * Error - When some network error or LiveQuery server error happens, you'll get this event.\n * <pre>\n * client.on('error', (error) => {\n *\n * });</pre>\n * @alias Parse.LiveQueryClient\n */\n\n\nvar LiveQueryClient =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  (0, _inherits2.default)(LiveQueryClient, _EventEmitter);\n  /**\n   * @param {Object} options\n   * @param {string} options.applicationId - applicationId of your Parse app\n   * @param {string} options.serverURL - <b>the URL of your LiveQuery server</b>\n   * @param {string} options.javascriptKey (optional)\n   * @param {string} options.masterKey (optional) Your Parse Master Key. (Node.js only!)\n   * @param {string} options.sessionToken (optional)\n   * @param {string} options.installationId (optional)\n   */\n\n  function LiveQueryClient(_ref) {\n    var _this;\n\n    var applicationId = _ref.applicationId,\n        serverURL = _ref.serverURL,\n        javascriptKey = _ref.javascriptKey,\n        masterKey = _ref.masterKey,\n        sessionToken = _ref.sessionToken,\n        installationId = _ref.installationId;\n    (0, _classCallCheck2.default)(this, LiveQueryClient);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LiveQueryClient).call(this));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"attempts\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"id\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"requestId\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"applicationId\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"serverURL\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"javascriptKey\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"masterKey\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"sessionToken\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"installationId\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"additionalProperties\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"connectPromise\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"subscriptions\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"socket\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", void 0);\n\n    if (!serverURL || (0, _indexOf.default)(serverURL).call(serverURL, 'ws') !== 0) {\n      throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n    }\n\n    _this.reconnectHandle = null;\n    _this.attempts = 1;\n    _this.id = 0;\n    _this.requestId = 1;\n    _this.serverURL = serverURL;\n    _this.applicationId = applicationId;\n    _this.javascriptKey = javascriptKey;\n    _this.masterKey = masterKey;\n    _this.sessionToken = sessionToken;\n    _this.installationId = installationId;\n    _this.additionalProperties = true;\n    _this.connectPromise = (0, _promiseUtils.resolvingPromise)();\n    _this.subscriptions = new _map.default();\n    _this.state = CLIENT_STATE.INITIALIZED;\n    return _this;\n  }\n\n  (0, _createClass2.default)(LiveQueryClient, [{\n    key: \"shouldOpen\",\n    value: function ()\n    /*: any*/\n    {\n      return this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED;\n    }\n    /**\n     * Subscribes to a ParseQuery\n     *\n     * If you provide the sessionToken, when the LiveQuery server gets ParseObject's\n     * updates from parse server, it'll try to check whether the sessionToken fulfills\n     * the ParseObject's ACL. The LiveQuery server will only send updates to clients whose\n     * sessionToken is fit for the ParseObject's ACL. You can check the LiveQuery protocol\n     * <a href=\"https://github.com/parse-community/parse-server/wiki/Parse-LiveQuery-Protocol-Specification\">here</a> for more details. The subscription you get is the same subscription you get\n     * from our Standard API.\n     *\n     * @param {Object} query - the ParseQuery you want to subscribe to\n     * @param {string} sessionToken (optional)\n     * @return {LiveQuerySubscription} subscription\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function (query\n    /*: Object*/\n    , sessionToken\n    /*: ?string*/\n    )\n    /*: LiveQuerySubscription*/\n    {\n      var _this2 = this;\n\n      if (!query) {\n        return;\n      }\n\n      var className = query.className;\n      var queryJSON = query.toJSON();\n      var where = queryJSON.where;\n      var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(',') : undefined;\n      var subscribeRequest = {\n        op: OP_TYPES.SUBSCRIBE,\n        requestId: this.requestId,\n        query: {\n          className: className,\n          where: where,\n          fields: fields\n        }\n      };\n\n      if (sessionToken) {\n        subscribeRequest.sessionToken = sessionToken;\n      }\n\n      var subscription = new _LiveQuerySubscription.default(this.requestId, query, sessionToken);\n      this.subscriptions.set(this.requestId, subscription);\n      this.requestId += 1;\n      this.connectPromise.then(function () {\n        _this2.socket.send((0, _stringify.default)(subscribeRequest));\n      });\n      return subscription;\n    }\n    /**\n     * After calling unsubscribe you'll stop receiving events from the subscription object.\n     *\n     * @param {Object} subscription - subscription you would like to unsubscribe from.\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function (subscription\n    /*: Object*/\n    ) {\n      var _this3 = this;\n\n      if (!subscription) {\n        return;\n      }\n\n      this.subscriptions.delete(subscription.id);\n      var unsubscribeRequest = {\n        op: OP_TYPES.UNSUBSCRIBE,\n        requestId: subscription.id\n      };\n      this.connectPromise.then(function () {\n        _this3.socket.send((0, _stringify.default)(unsubscribeRequest));\n      });\n    }\n    /**\n     * After open is called, the LiveQueryClient will try to send a connect request\n     * to the LiveQuery server.\n     *\n     */\n\n  }, {\n    key: \"open\",\n    value: function () {\n      var _this4 = this;\n\n      var WebSocketImplementation = _CoreManager.default.getWebSocketController();\n\n      if (!WebSocketImplementation) {\n        this.emit(CLIENT_EMMITER_TYPES.ERROR, 'Can not find WebSocket implementation');\n        return;\n      }\n\n      if (this.state !== CLIENT_STATE.RECONNECTING) {\n        this.state = CLIENT_STATE.CONNECTING;\n      }\n\n      this.socket = new WebSocketImplementation(this.serverURL); // Bind WebSocket callbacks\n\n      this.socket.onopen = function () {\n        _this4._handleWebSocketOpen();\n      };\n\n      this.socket.onmessage = function (event) {\n        _this4._handleWebSocketMessage(event);\n      };\n\n      this.socket.onclose = function () {\n        _this4._handleWebSocketClose();\n      };\n\n      this.socket.onerror = function (error) {\n        _this4._handleWebSocketError(error);\n      };\n    }\n  }, {\n    key: \"resubscribe\",\n    value: function () {\n      var _context,\n          _this5 = this;\n\n      (0, _forEach.default)(_context = this.subscriptions).call(_context, function (subscription, requestId) {\n        var query = subscription.query;\n        var queryJSON = query.toJSON();\n        var where = queryJSON.where;\n        var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(',') : undefined;\n        var className = query.className;\n        var sessionToken = subscription.sessionToken;\n        var subscribeRequest = {\n          op: OP_TYPES.SUBSCRIBE,\n          requestId: requestId,\n          query: {\n            className: className,\n            where: where,\n            fields: fields\n          }\n        };\n\n        if (sessionToken) {\n          subscribeRequest.sessionToken = sessionToken;\n        }\n\n        _this5.connectPromise.then(function () {\n          _this5.socket.send((0, _stringify.default)(subscribeRequest));\n        });\n      });\n    }\n    /**\n     * This method will close the WebSocket connection to this LiveQueryClient,\n     * cancel the auto reconnect and unsubscribe all subscriptions based on it.\n     *\n     */\n\n  }, {\n    key: \"close\",\n    value: function () {\n      if (this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n\n      this.state = CLIENT_STATE.DISCONNECTED;\n      this.socket.close(); // Notify each subscription about the close\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator2.default)((0, _values.default)(_context2 = this.subscriptions).call(_context2)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _context2;\n\n          var subscription = _step.value;\n          subscription.subscribed = false;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this._handleReset();\n\n      this.emit(CLIENT_EMMITER_TYPES.CLOSE);\n    } // ensure we start with valid state if connect is called again after close\n\n  }, {\n    key: \"_handleReset\",\n    value: function () {\n      this.attempts = 1;\n      this.id = 0;\n      this.requestId = 1;\n      this.connectPromise = (0, _promiseUtils.resolvingPromise)();\n      this.subscriptions = new _map.default();\n    }\n  }, {\n    key: \"_handleWebSocketOpen\",\n    value: function () {\n      this.attempts = 1;\n      var connectRequest = {\n        op: OP_TYPES.CONNECT,\n        applicationId: this.applicationId,\n        javascriptKey: this.javascriptKey,\n        masterKey: this.masterKey,\n        sessionToken: this.sessionToken\n      };\n\n      if (this.additionalProperties) {\n        connectRequest.installationId = this.installationId;\n      }\n\n      this.socket.send((0, _stringify.default)(connectRequest));\n    }\n  }, {\n    key: \"_handleWebSocketMessage\",\n    value: function (event\n    /*: any*/\n    ) {\n      var data = event.data;\n\n      if (typeof data === 'string') {\n        data = JSON.parse(data);\n      }\n\n      var subscription = null;\n\n      if (data.requestId) {\n        subscription = this.subscriptions.get(data.requestId);\n      }\n\n      var response = {\n        clientId: data.clientId,\n        installationId: data.installationId\n      };\n\n      switch (data.op) {\n        case OP_EVENTS.CONNECTED:\n          if (this.state === CLIENT_STATE.RECONNECTING) {\n            this.resubscribe();\n          }\n\n          this.emit(CLIENT_EMMITER_TYPES.OPEN);\n          this.id = data.clientId;\n          this.connectPromise.resolve();\n          this.state = CLIENT_STATE.CONNECTED;\n          break;\n\n        case OP_EVENTS.SUBSCRIBED:\n          if (subscription) {\n            subscription.subscribed = true;\n            subscription.subscribePromise.resolve();\n            subscription.emit(SUBSCRIPTION_EMMITER_TYPES.OPEN, response);\n          }\n\n          break;\n\n        case OP_EVENTS.ERROR:\n          if (data.requestId) {\n            if (subscription) {\n              subscription.subscribePromise.resolve();\n              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, data.error);\n            }\n          } else {\n            this.emit(CLIENT_EMMITER_TYPES.ERROR, data.error);\n          }\n\n          if (data.error === 'Additional properties not allowed') {\n            this.additionalProperties = false;\n          }\n\n          if (data.reconnect) {\n            this._handleReconnect();\n          }\n\n          break;\n\n        case OP_EVENTS.UNSUBSCRIBED:\n          // We have already deleted subscription in unsubscribe(), do nothing here\n          break;\n\n        default:\n          {\n            // create, update, enter, leave, delete cases\n            if (!subscription) {\n              break;\n            }\n\n            var override = false;\n\n            if (data.original) {\n              override = true;\n              delete data.original.__type; // Check for removed fields\n\n              for (var field in data.original) {\n                if (!(field in data.object)) {\n                  data.object[field] = undefined;\n                }\n              }\n\n              data.original = _ParseObject.default.fromJSON(data.original, false);\n            }\n\n            delete data.object.__type;\n\n            var parseObject = _ParseObject.default.fromJSON(data.object, override);\n\n            if (data.original) {\n              subscription.emit(data.op, parseObject, data.original, response);\n            } else {\n              subscription.emit(data.op, parseObject, response);\n            }\n\n            var localDatastore = _CoreManager.default.getLocalDatastore();\n\n            if (override && localDatastore.isEnabled) {\n              localDatastore._updateObjectIfPinned(parseObject).then(function () {});\n            }\n          }\n      }\n    }\n  }, {\n    key: \"_handleWebSocketClose\",\n    value: function () {\n      if (this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n\n      this.state = CLIENT_STATE.CLOSED;\n      this.emit(CLIENT_EMMITER_TYPES.CLOSE); // Notify each subscription about the close\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = (0, _getIterator2.default)((0, _values.default)(_context3 = this.subscriptions).call(_context3)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _context3;\n\n          var subscription = _step2.value;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this._handleReconnect();\n    }\n  }, {\n    key: \"_handleWebSocketError\",\n    value: function (error\n    /*: any*/\n    ) {\n      this.emit(CLIENT_EMMITER_TYPES.ERROR, error);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = (0, _getIterator2.default)((0, _values.default)(_context4 = this.subscriptions).call(_context4)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _context4;\n\n          var subscription = _step3.value;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this._handleReconnect();\n    }\n  }, {\n    key: \"_handleReconnect\",\n    value: function () {\n      var _context5,\n          _this6 = this; // if closed or currently reconnecting we stop attempting to reconnect\n\n\n      if (this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n\n      this.state = CLIENT_STATE.RECONNECTING;\n      var time = generateInterval(this.attempts); // handle case when both close/error occur at frequent rates we ensure we do not reconnect unnecessarily.\n      // we're unable to distinguish different between close/error when we're unable to reconnect therefore\n      // we try to reconnect in both cases\n      // server side ws and browser WebSocket behave differently in when close/error get triggered\n\n      if (this.reconnectHandle) {\n        clearTimeout(this.reconnectHandle);\n      }\n\n      this.reconnectHandle = (0, _setTimeout2.default)((0, _bind.default)(_context5 = function () {\n        _this6.attempts++;\n        _this6.connectPromise = (0, _promiseUtils.resolvingPromise)();\n\n        _this6.open();\n      }).call(_context5, this), time);\n    }\n  }]);\n  return LiveQueryClient;\n}(_EventEmitter2.default);\n\n_CoreManager.default.setWebSocketController(typeof WebSocket === 'function' || (typeof WebSocket === \"undefined\" ? \"undefined\" : (0, _typeof2.default)(WebSocket)) === 'object' ? WebSocket : null);\n\nvar _default = LiveQueryClient;\nexports.default = _default;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/node_modules/parse/lib/browser/LiveQueryClient.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_typeof2","_bind","_setTimeout2","_values","_getIterator2","_forEach","_stringify","_keys","_map","_indexOf","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_defineProperty2","_CoreManager","_EventEmitter2","_ParseObject","_LiveQuerySubscription","_promiseUtils","CLIENT_STATE","INITIALIZED","CONNECTING","CONNECTED","CLOSED","RECONNECTING","DISCONNECTED","OP_TYPES","CONNECT","SUBSCRIBE","UNSUBSCRIBE","ERROR","OP_EVENTS","SUBSCRIBED","UNSUBSCRIBED","CREATE","UPDATE","ENTER","LEAVE","DELETE","CLIENT_EMMITER_TYPES","CLOSE","OPEN","SUBSCRIPTION_EMMITER_TYPES","generateInterval","k","Math","random","min","pow","LiveQueryClient","_EventEmitter","_ref","_this","applicationId","serverURL","javascriptKey","masterKey","sessionToken","installationId","call","Error","reconnectHandle","attempts","id","requestId","additionalProperties","connectPromise","resolvingPromise","subscriptions","state","key","query","_this2","className","queryJSON","toJSON","where","fields","split","undefined","subscribeRequest","op","subscription","set","then","socket","send","_this3","delete","unsubscribeRequest","_this4","WebSocketImplementation","getWebSocketController","emit","onopen","_handleWebSocketOpen","onmessage","event","_handleWebSocketMessage","onclose","_handleWebSocketClose","onerror","error","_handleWebSocketError","_context","_this5","close","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_context2","_step","next","done","subscribed","err","return","_handleReset","connectRequest","data","JSON","parse","get","response","clientId","resubscribe","resolve","subscribePromise","reconnect","_handleReconnect","override","original","__type","field","object","fromJSON","parseObject","localDatastore","getLocalDatastore","isEnabled","_updateObjectIfPinned","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_context3","_step2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_context4","_step3","_context5","_this6","time","clearTimeout","open","setWebSocketController","WebSocket","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _bind = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/bind\"));\n\nvar _setTimeout2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/set-timeout\"));\n\nvar _values = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/values\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/map\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _EventEmitter2 = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _LiveQuerySubscription = _interopRequireDefault(require(\"./LiveQuerySubscription\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n/* global WebSocket */\n// The LiveQuery client inner state\n\n\nvar CLIENT_STATE = {\n  INITIALIZED: 'initialized',\n  CONNECTING: 'connecting',\n  CONNECTED: 'connected',\n  CLOSED: 'closed',\n  RECONNECTING: 'reconnecting',\n  DISCONNECTED: 'disconnected'\n}; // The event type the LiveQuery client should sent to server\n\nvar OP_TYPES = {\n  CONNECT: 'connect',\n  SUBSCRIBE: 'subscribe',\n  UNSUBSCRIBE: 'unsubscribe',\n  ERROR: 'error'\n}; // The event we get back from LiveQuery server\n\nvar OP_EVENTS = {\n  CONNECTED: 'connected',\n  SUBSCRIBED: 'subscribed',\n  UNSUBSCRIBED: 'unsubscribed',\n  ERROR: 'error',\n  CREATE: 'create',\n  UPDATE: 'update',\n  ENTER: 'enter',\n  LEAVE: 'leave',\n  DELETE: 'delete'\n}; // The event the LiveQuery client should emit\n\nvar CLIENT_EMMITER_TYPES = {\n  CLOSE: 'close',\n  ERROR: 'error',\n  OPEN: 'open'\n}; // The event the LiveQuery subscription should emit\n\nvar SUBSCRIPTION_EMMITER_TYPES = {\n  OPEN: 'open',\n  CLOSE: 'close',\n  ERROR: 'error',\n  CREATE: 'create',\n  UPDATE: 'update',\n  ENTER: 'enter',\n  LEAVE: 'leave',\n  DELETE: 'delete'\n};\n\nvar generateInterval = function (k) {\n  return Math.random() * Math.min(30, Math.pow(2, k) - 1) * 1000;\n};\n/**\n * Creates a new LiveQueryClient.\n * Extends events.EventEmitter\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * A wrapper of a standard WebSocket client. We add several useful methods to\n * help you connect/disconnect to LiveQueryServer, subscribe/unsubscribe a ParseQuery easily.\n *\n * javascriptKey and masterKey are used for verifying the LiveQueryClient when it tries\n * to connect to the LiveQuery server\n *\n * We expose three events to help you monitor the status of the LiveQueryClient.\n *\n * <pre>\n * let Parse = require('parse/node');\n * let LiveQueryClient = Parse.LiveQueryClient;\n * let client = new LiveQueryClient({\n *   applicationId: '',\n *   serverURL: '',\n *   javascriptKey: '',\n *   masterKey: ''\n *  });\n * </pre>\n *\n * Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n * <pre>\n * client.on('open', () => {\n *\n * });</pre>\n *\n * Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n * <pre>\n * client.on('close', () => {\n *\n * });</pre>\n *\n * Error - When some network error or LiveQuery server error happens, you'll get this event.\n * <pre>\n * client.on('error', (error) => {\n *\n * });</pre>\n * @alias Parse.LiveQueryClient\n */\n\n\nvar LiveQueryClient =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  (0, _inherits2.default)(LiveQueryClient, _EventEmitter);\n  /**\n   * @param {Object} options\n   * @param {string} options.applicationId - applicationId of your Parse app\n   * @param {string} options.serverURL - <b>the URL of your LiveQuery server</b>\n   * @param {string} options.javascriptKey (optional)\n   * @param {string} options.masterKey (optional) Your Parse Master Key. (Node.js only!)\n   * @param {string} options.sessionToken (optional)\n   * @param {string} options.installationId (optional)\n   */\n\n  function LiveQueryClient(_ref) {\n    var _this;\n\n    var applicationId = _ref.applicationId,\n        serverURL = _ref.serverURL,\n        javascriptKey = _ref.javascriptKey,\n        masterKey = _ref.masterKey,\n        sessionToken = _ref.sessionToken,\n        installationId = _ref.installationId;\n    (0, _classCallCheck2.default)(this, LiveQueryClient);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LiveQueryClient).call(this));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"attempts\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"id\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"requestId\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"applicationId\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"serverURL\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"javascriptKey\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"masterKey\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"sessionToken\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"installationId\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"additionalProperties\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"connectPromise\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"subscriptions\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"socket\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", void 0);\n\n    if (!serverURL || (0, _indexOf.default)(serverURL).call(serverURL, 'ws') !== 0) {\n      throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n    }\n\n    _this.reconnectHandle = null;\n    _this.attempts = 1;\n    _this.id = 0;\n    _this.requestId = 1;\n    _this.serverURL = serverURL;\n    _this.applicationId = applicationId;\n    _this.javascriptKey = javascriptKey;\n    _this.masterKey = masterKey;\n    _this.sessionToken = sessionToken;\n    _this.installationId = installationId;\n    _this.additionalProperties = true;\n    _this.connectPromise = (0, _promiseUtils.resolvingPromise)();\n    _this.subscriptions = new _map.default();\n    _this.state = CLIENT_STATE.INITIALIZED;\n    return _this;\n  }\n\n  (0, _createClass2.default)(LiveQueryClient, [{\n    key: \"shouldOpen\",\n    value: function ()\n    /*: any*/\n    {\n      return this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED;\n    }\n    /**\n     * Subscribes to a ParseQuery\n     *\n     * If you provide the sessionToken, when the LiveQuery server gets ParseObject's\n     * updates from parse server, it'll try to check whether the sessionToken fulfills\n     * the ParseObject's ACL. The LiveQuery server will only send updates to clients whose\n     * sessionToken is fit for the ParseObject's ACL. You can check the LiveQuery protocol\n     * <a href=\"https://github.com/parse-community/parse-server/wiki/Parse-LiveQuery-Protocol-Specification\">here</a> for more details. The subscription you get is the same subscription you get\n     * from our Standard API.\n     *\n     * @param {Object} query - the ParseQuery you want to subscribe to\n     * @param {string} sessionToken (optional)\n     * @return {LiveQuerySubscription} subscription\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function (query\n    /*: Object*/\n    , sessionToken\n    /*: ?string*/\n    )\n    /*: LiveQuerySubscription*/\n    {\n      var _this2 = this;\n\n      if (!query) {\n        return;\n      }\n\n      var className = query.className;\n      var queryJSON = query.toJSON();\n      var where = queryJSON.where;\n      var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(',') : undefined;\n      var subscribeRequest = {\n        op: OP_TYPES.SUBSCRIBE,\n        requestId: this.requestId,\n        query: {\n          className: className,\n          where: where,\n          fields: fields\n        }\n      };\n\n      if (sessionToken) {\n        subscribeRequest.sessionToken = sessionToken;\n      }\n\n      var subscription = new _LiveQuerySubscription.default(this.requestId, query, sessionToken);\n      this.subscriptions.set(this.requestId, subscription);\n      this.requestId += 1;\n      this.connectPromise.then(function () {\n        _this2.socket.send((0, _stringify.default)(subscribeRequest));\n      });\n      return subscription;\n    }\n    /**\n     * After calling unsubscribe you'll stop receiving events from the subscription object.\n     *\n     * @param {Object} subscription - subscription you would like to unsubscribe from.\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function (subscription\n    /*: Object*/\n    ) {\n      var _this3 = this;\n\n      if (!subscription) {\n        return;\n      }\n\n      this.subscriptions.delete(subscription.id);\n      var unsubscribeRequest = {\n        op: OP_TYPES.UNSUBSCRIBE,\n        requestId: subscription.id\n      };\n      this.connectPromise.then(function () {\n        _this3.socket.send((0, _stringify.default)(unsubscribeRequest));\n      });\n    }\n    /**\n     * After open is called, the LiveQueryClient will try to send a connect request\n     * to the LiveQuery server.\n     *\n     */\n\n  }, {\n    key: \"open\",\n    value: function () {\n      var _this4 = this;\n\n      var WebSocketImplementation = _CoreManager.default.getWebSocketController();\n\n      if (!WebSocketImplementation) {\n        this.emit(CLIENT_EMMITER_TYPES.ERROR, 'Can not find WebSocket implementation');\n        return;\n      }\n\n      if (this.state !== CLIENT_STATE.RECONNECTING) {\n        this.state = CLIENT_STATE.CONNECTING;\n      }\n\n      this.socket = new WebSocketImplementation(this.serverURL); // Bind WebSocket callbacks\n\n      this.socket.onopen = function () {\n        _this4._handleWebSocketOpen();\n      };\n\n      this.socket.onmessage = function (event) {\n        _this4._handleWebSocketMessage(event);\n      };\n\n      this.socket.onclose = function () {\n        _this4._handleWebSocketClose();\n      };\n\n      this.socket.onerror = function (error) {\n        _this4._handleWebSocketError(error);\n      };\n    }\n  }, {\n    key: \"resubscribe\",\n    value: function () {\n      var _context,\n          _this5 = this;\n\n      (0, _forEach.default)(_context = this.subscriptions).call(_context, function (subscription, requestId) {\n        var query = subscription.query;\n        var queryJSON = query.toJSON();\n        var where = queryJSON.where;\n        var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(',') : undefined;\n        var className = query.className;\n        var sessionToken = subscription.sessionToken;\n        var subscribeRequest = {\n          op: OP_TYPES.SUBSCRIBE,\n          requestId: requestId,\n          query: {\n            className: className,\n            where: where,\n            fields: fields\n          }\n        };\n\n        if (sessionToken) {\n          subscribeRequest.sessionToken = sessionToken;\n        }\n\n        _this5.connectPromise.then(function () {\n          _this5.socket.send((0, _stringify.default)(subscribeRequest));\n        });\n      });\n    }\n    /**\n     * This method will close the WebSocket connection to this LiveQueryClient,\n     * cancel the auto reconnect and unsubscribe all subscriptions based on it.\n     *\n     */\n\n  }, {\n    key: \"close\",\n    value: function () {\n      if (this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n\n      this.state = CLIENT_STATE.DISCONNECTED;\n      this.socket.close(); // Notify each subscription about the close\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator2.default)((0, _values.default)(_context2 = this.subscriptions).call(_context2)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _context2;\n\n          var subscription = _step.value;\n          subscription.subscribed = false;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this._handleReset();\n\n      this.emit(CLIENT_EMMITER_TYPES.CLOSE);\n    } // ensure we start with valid state if connect is called again after close\n\n  }, {\n    key: \"_handleReset\",\n    value: function () {\n      this.attempts = 1;\n      this.id = 0;\n      this.requestId = 1;\n      this.connectPromise = (0, _promiseUtils.resolvingPromise)();\n      this.subscriptions = new _map.default();\n    }\n  }, {\n    key: \"_handleWebSocketOpen\",\n    value: function () {\n      this.attempts = 1;\n      var connectRequest = {\n        op: OP_TYPES.CONNECT,\n        applicationId: this.applicationId,\n        javascriptKey: this.javascriptKey,\n        masterKey: this.masterKey,\n        sessionToken: this.sessionToken\n      };\n\n      if (this.additionalProperties) {\n        connectRequest.installationId = this.installationId;\n      }\n\n      this.socket.send((0, _stringify.default)(connectRequest));\n    }\n  }, {\n    key: \"_handleWebSocketMessage\",\n    value: function (event\n    /*: any*/\n    ) {\n      var data = event.data;\n\n      if (typeof data === 'string') {\n        data = JSON.parse(data);\n      }\n\n      var subscription = null;\n\n      if (data.requestId) {\n        subscription = this.subscriptions.get(data.requestId);\n      }\n\n      var response = {\n        clientId: data.clientId,\n        installationId: data.installationId\n      };\n\n      switch (data.op) {\n        case OP_EVENTS.CONNECTED:\n          if (this.state === CLIENT_STATE.RECONNECTING) {\n            this.resubscribe();\n          }\n\n          this.emit(CLIENT_EMMITER_TYPES.OPEN);\n          this.id = data.clientId;\n          this.connectPromise.resolve();\n          this.state = CLIENT_STATE.CONNECTED;\n          break;\n\n        case OP_EVENTS.SUBSCRIBED:\n          if (subscription) {\n            subscription.subscribed = true;\n            subscription.subscribePromise.resolve();\n            subscription.emit(SUBSCRIPTION_EMMITER_TYPES.OPEN, response);\n          }\n\n          break;\n\n        case OP_EVENTS.ERROR:\n          if (data.requestId) {\n            if (subscription) {\n              subscription.subscribePromise.resolve();\n              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, data.error);\n            }\n          } else {\n            this.emit(CLIENT_EMMITER_TYPES.ERROR, data.error);\n          }\n\n          if (data.error === 'Additional properties not allowed') {\n            this.additionalProperties = false;\n          }\n\n          if (data.reconnect) {\n            this._handleReconnect();\n          }\n\n          break;\n\n        case OP_EVENTS.UNSUBSCRIBED:\n          // We have already deleted subscription in unsubscribe(), do nothing here\n          break;\n\n        default:\n          {\n            // create, update, enter, leave, delete cases\n            if (!subscription) {\n              break;\n            }\n\n            var override = false;\n\n            if (data.original) {\n              override = true;\n              delete data.original.__type; // Check for removed fields\n\n              for (var field in data.original) {\n                if (!(field in data.object)) {\n                  data.object[field] = undefined;\n                }\n              }\n\n              data.original = _ParseObject.default.fromJSON(data.original, false);\n            }\n\n            delete data.object.__type;\n\n            var parseObject = _ParseObject.default.fromJSON(data.object, override);\n\n            if (data.original) {\n              subscription.emit(data.op, parseObject, data.original, response);\n            } else {\n              subscription.emit(data.op, parseObject, response);\n            }\n\n            var localDatastore = _CoreManager.default.getLocalDatastore();\n\n            if (override && localDatastore.isEnabled) {\n              localDatastore._updateObjectIfPinned(parseObject).then(function () {});\n            }\n          }\n      }\n    }\n  }, {\n    key: \"_handleWebSocketClose\",\n    value: function () {\n      if (this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n\n      this.state = CLIENT_STATE.CLOSED;\n      this.emit(CLIENT_EMMITER_TYPES.CLOSE); // Notify each subscription about the close\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = (0, _getIterator2.default)((0, _values.default)(_context3 = this.subscriptions).call(_context3)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _context3;\n\n          var subscription = _step2.value;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this._handleReconnect();\n    }\n  }, {\n    key: \"_handleWebSocketError\",\n    value: function (error\n    /*: any*/\n    ) {\n      this.emit(CLIENT_EMMITER_TYPES.ERROR, error);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = (0, _getIterator2.default)((0, _values.default)(_context4 = this.subscriptions).call(_context4)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _context4;\n\n          var subscription = _step3.value;\n          subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      this._handleReconnect();\n    }\n  }, {\n    key: \"_handleReconnect\",\n    value: function () {\n      var _context5,\n          _this6 = this; // if closed or currently reconnecting we stop attempting to reconnect\n\n\n      if (this.state === CLIENT_STATE.DISCONNECTED) {\n        return;\n      }\n\n      this.state = CLIENT_STATE.RECONNECTING;\n      var time = generateInterval(this.attempts); // handle case when both close/error occur at frequent rates we ensure we do not reconnect unnecessarily.\n      // we're unable to distinguish different between close/error when we're unable to reconnect therefore\n      // we try to reconnect in both cases\n      // server side ws and browser WebSocket behave differently in when close/error get triggered\n\n      if (this.reconnectHandle) {\n        clearTimeout(this.reconnectHandle);\n      }\n\n      this.reconnectHandle = (0, _setTimeout2.default)((0, _bind.default)(_context5 = function () {\n        _this6.attempts++;\n        _this6.connectPromise = (0, _promiseUtils.resolvingPromise)();\n\n        _this6.open();\n      }).call(_context5, this), time);\n    }\n  }]);\n  return LiveQueryClient;\n}(_EventEmitter2.default);\n\n_CoreManager.default.setWebSocketController(typeof WebSocket === 'function' || (typeof WebSocket === \"undefined\" ? \"undefined\" : (0, _typeof2.default)(WebSocket)) === 'object' ? WebSocket : null);\n\nvar _default = LiveQueryClient;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}