{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe, withLifecycle } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst onCreate = ({\n  setData\n}) => {\n  const query = new Parse.Query('ClouseQuery');\n  query.find().then(result => {\n    const dataSource = result.map((item, key) => ({ ...item.toJSON(),\n      key\n    }));\n    setData(d => d.set('personsList', dataSource));\n  });\n};\n\nconst addPerson = ({\n  data,\n  setData\n}) => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: data.personName\n  }).then(() => setData(d => d.merge({\n    personName: undefined,\n    personsList: d.personsList.concat(obj)\n  })));\n};\n\nconst setPersonName = ({\n  setData\n}) => personName => {\n  setData(d => d.set('personName', personName));\n};\n\nconst deletePerson = ({\n  setData,\n  data\n}) => index => {\n  const selectedPerson = data.personsList[index];\n  const query = new Parse.Query('ClouseQuery');\n  query.get(selectedPerson.id).then(response => {\n    response.destroy().then(() => setData(d => d.set('personsList', d.personsList.filter((value, i) => i !== index))));\n  });\n};\n\nconst editPerson = ({\n  data,\n  setData\n}) => index => {\n  const selectedPerson = data.personsList[index];\n  setData(d => d.merge({\n    personName: selectedPerson.name,\n    selectedPersonId: selectedPerson.objectId,\n    selectedPersonIndex: index,\n    editing: !data.editing\n  }));\n};\n\nconst makeMainQuery = ({\n  setData\n}) => oprandData => {\n  console.log('mm');\n  let mainQuery = new Parse.Query(ClouseQuery);\n\n  if (oprandData.op === 'and') {\n    oprandData.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    oprandData.childs.map((item, key) => {\n      if (!item.childs) {\n        if (key === 0) {\n          mainQuery = item;\n        }\n\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        if (key === 0) {\n          mainQuery = item.mainQuery;\n        }\n\n        mainQuery = Parse.Query.or(mainQuery, item.mainQuery);\n      }\n    });\n  }\n\n  setData(d => d.set('tmpdata', oprandData));\n  mainQuery.find().then(result => {\n    const dataSource = result.map((item, key) => ({ ...item.toJSON(),\n      key\n    }));\n    setData(d => d.set('personsList', dataSource));\n  });\n  setData(d => d.set('dataFilterVisible', false));\n};\n\nconst confirmEdit = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query('ClouseQuery');\n  query.get(data.selectedPersonId).then(response => {\n    response.save({\n      name: data.personName\n    }).then(updatedPerson => {\n      const tempList = [...data.personsList];\n      tempList.splice(data.selectedPersonIndex, 1, updatedPerson);\n      setData(d => d.merge({\n        personsList: tempList,\n        editing: !data.editing,\n        personName: undefined\n      }));\n    });\n  });\n};\n\nconst showDatafilter = ({\n  setData\n}) => () => {\n  setData(d => d.set('dataFilterVisible', true));\n};\n\nconst closeDatafilter = ({\n  setData\n}) => () => {\n  setData(d => d.set('dataFilterVisible', false));\n};\n\nconst init = () => Record({\n  personName: undefined,\n  personsList: [],\n  selectedPersonId: undefined,\n  selectedPersonIndex: undefined,\n  editing: false,\n  tmpdata: null,\n  dataFilterVisible: false\n});\n\nconst tableController = pipe(withState(() => init(), 'data', 'setData'), withHandlers({\n  addPerson,\n  setPersonName,\n  deletePerson,\n  editPerson,\n  confirmEdit,\n  makeMainQuery,\n  showDatafilter,\n  closeDatafilter\n}), withLifecycle({\n  onCreate\n}));\nexport default tableController;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/src/components/table/tableController.js"],"names":["Parse","Record","withState","withHandlers","pipe","withLifecycle","ClouseQuery","Object","extend","onCreate","setData","query","Query","find","then","result","dataSource","map","item","key","toJSON","d","set","addPerson","data","obj","save","name","personName","merge","undefined","personsList","concat","setPersonName","deletePerson","index","selectedPerson","get","id","response","destroy","filter","value","i","editPerson","selectedPersonId","objectId","selectedPersonIndex","editing","makeMainQuery","oprandData","console","log","mainQuery","op","childs","and","or","confirmEdit","updatedPerson","tempList","splice","showDatafilter","closeDatafilter","init","tmpdata","dataFilterVisible","tableController"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SACEC,SADF,EACaC,YADb,EAC2BC,IAD3B,EACiCC,aADjC,QAEO,YAFP;AAIA,MAAMC,WAAW,GAAGN,KAAK,CAACO,MAAN,CAAaC,MAAb,CAAoB,aAApB,CAApB;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC,QAAMC,KAAK,GAAG,IAAIX,KAAK,CAACY,KAAV,CAAgB,aAAhB,CAAd;AACAD,EAAAA,KAAK,CAACE,IAAN,GAAaC,IAAb,CAAmBC,MAAD,IAAY;AAC5B,UAAMC,UAAU,GAAGD,MAAM,CAACE,GAAP,CAAW,CAACC,IAAD,EAAOC,GAAP,MAAgB,EAC5C,GAAGD,IAAI,CAACE,MAAL,EADyC;AAE5CD,MAAAA;AAF4C,KAAhB,CAAX,CAAnB;AAIAT,IAAAA,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,aAAN,EAAqBN,UAArB,CAAR,CAAP;AACD,GAND;AAOD,CATD;;AAWA,MAAMO,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQd,EAAAA;AAAR,CAAD,KAAuB,MAAM;AAC7C,QAAMe,GAAG,GAAG,IAAIzB,KAAK,CAACO,MAAV,CAAiB,aAAjB,CAAZ;AACAkB,EAAAA,GAAG,CAACC,IAAJ,CAAS;AACPC,IAAAA,IAAI,EAAEH,IAAI,CAACI;AADJ,GAAT,EAEGd,IAFH,CAEQ,MAAMJ,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACQ,KAAF,CAAQ;AACnCD,IAAAA,UAAU,EAAEE,SADuB;AAEnCC,IAAAA,WAAW,EAAEV,CAAC,CAACU,WAAF,CAAcC,MAAd,CAAqBP,GAArB;AAFsB,GAAR,CAAR,CAFrB;AAMD,CARD;;AAUA,MAAMQ,aAAa,GAAG,CAAC;AAAEvB,EAAAA;AAAF,CAAD,KAAkBkB,UAAD,IAAgB;AACrDlB,EAAAA,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,YAAN,EAAoBM,UAApB,CAAR,CAAP;AACD,CAFD;;AAIA,MAAMM,YAAY,GAAG,CAAC;AAAExB,EAAAA,OAAF;AAAWc,EAAAA;AAAX,CAAD,KAAwBW,KAAD,IAAW;AACrD,QAAMC,cAAc,GAAGZ,IAAI,CAACO,WAAL,CAAiBI,KAAjB,CAAvB;AACA,QAAMxB,KAAK,GAAG,IAAIX,KAAK,CAACY,KAAV,CAAgB,aAAhB,CAAd;AACAD,EAAAA,KAAK,CAAC0B,GAAN,CAAUD,cAAc,CAACE,EAAzB,EAA6BxB,IAA7B,CAAmCyB,QAAD,IAAc;AAC9CA,IAAAA,QAAQ,CAACC,OAAT,GAAmB1B,IAAnB,CAAwB,MAAMJ,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,aAAN,EAAqBD,CAAC,CAACU,WAAF,CAAcU,MAAd,CAAqB,CAACC,KAAD,EAAQC,CAAR,KAAcA,CAAC,KAAKR,KAAzC,CAArB,CAAR,CAArC;AACD,GAFD;AAGD,CAND;;AAQA,MAAMS,UAAU,GAAG,CAAC;AAAEpB,EAAAA,IAAF;AAAQd,EAAAA;AAAR,CAAD,KAAwByB,KAAD,IAAW;AACnD,QAAMC,cAAc,GAAGZ,IAAI,CAACO,WAAL,CAAiBI,KAAjB,CAAvB;AACAzB,EAAAA,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACQ,KAAF,CAAQ;AACrBD,IAAAA,UAAU,EAAEQ,cAAc,CAACT,IADN;AAErBkB,IAAAA,gBAAgB,EAAET,cAAc,CAACU,QAFZ;AAGrBC,IAAAA,mBAAmB,EAAEZ,KAHA;AAIrBa,IAAAA,OAAO,EAAE,CAACxB,IAAI,CAACwB;AAJM,GAAR,CAAR,CAAP;AAMD,CARD;;AAUA,MAAMC,aAAa,GAAG,CAAC;AAAEvC,EAAAA;AAAF,CAAD,KAAkBwC,UAAD,IAAgB;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,MAAIC,SAAS,GAAG,IAAIrD,KAAK,CAACY,KAAV,CAAgBN,WAAhB,CAAhB;;AACA,MAAI4C,UAAU,CAACI,EAAX,KAAkB,KAAtB,EAA6B;AAC3BJ,IAAAA,UAAU,CAACK,MAAX,CAAkBtC,GAAlB,CAAuBC,IAAD,IAAU;AAC9B,UAAI,CAACA,IAAI,CAACqC,MAAV,EAAkB;AAChBF,QAAAA,SAAS,GAAGrD,KAAK,CAACY,KAAN,CAAY4C,GAAZ,CAAgBH,SAAhB,EAA2BnC,IAA3B,CAAZ;AACD,OAFD,MAEO;AACLmC,QAAAA,SAAS,GAAGrD,KAAK,CAACY,KAAN,CAAY4C,GAAZ,CAAgBH,SAAhB,EAA2BnC,IAAI,CAACmC,SAAhC,CAAZ;AACD;AACF,KAND;AAOD,GARD,MAQO;AACLH,IAAAA,UAAU,CAACK,MAAX,CAAkBtC,GAAlB,CAAsB,CAACC,IAAD,EAAOC,GAAP,KAAe;AACnC,UAAI,CAACD,IAAI,CAACqC,MAAV,EAAkB;AAChB,YAAIpC,GAAG,KAAK,CAAZ,EAAe;AAAEkC,UAAAA,SAAS,GAAGnC,IAAZ;AAAmB;;AACpCmC,QAAAA,SAAS,GAAGrD,KAAK,CAACY,KAAN,CAAY6C,EAAZ,CAAeJ,SAAf,EAA0BnC,IAA1B,CAAZ;AACD,OAHD,MAGO;AACL,YAAIC,GAAG,KAAK,CAAZ,EAAe;AAAEkC,UAAAA,SAAS,GAAGnC,IAAI,CAACmC,SAAjB;AAA6B;;AAC9CA,QAAAA,SAAS,GAAGrD,KAAK,CAACY,KAAN,CAAY6C,EAAZ,CAAeJ,SAAf,EAA0BnC,IAAI,CAACmC,SAA/B,CAAZ;AACD;AACF,KARD;AASD;;AACD3C,EAAAA,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,SAAN,EAAiB4B,UAAjB,CAAR,CAAP;AACAG,EAAAA,SAAS,CAACxC,IAAV,GAAiBC,IAAjB,CAAuBC,MAAD,IAAY;AAChC,UAAMC,UAAU,GAAGD,MAAM,CAACE,GAAP,CAAW,CAACC,IAAD,EAAOC,GAAP,MAAgB,EAC5C,GAAGD,IAAI,CAACE,MAAL,EADyC;AAE5CD,MAAAA;AAF4C,KAAhB,CAAX,CAAnB;AAIAT,IAAAA,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,aAAN,EAAqBN,UAArB,CAAR,CAAP;AACD,GAND;AAOAN,EAAAA,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,mBAAN,EAA2B,KAA3B,CAAR,CAAP;AACD,CA/BD;;AAiCA,MAAMoC,WAAW,GAAG,CAAC;AAAEhD,EAAAA,OAAF;AAAWc,EAAAA;AAAX,CAAD,KAAuB,MAAM;AAC/C,QAAMb,KAAK,GAAG,IAAIX,KAAK,CAACY,KAAV,CAAgB,aAAhB,CAAd;AACAD,EAAAA,KAAK,CAAC0B,GAAN,CAAUb,IAAI,CAACqB,gBAAf,EAAiC/B,IAAjC,CAAuCyB,QAAD,IAAc;AAClDA,IAAAA,QAAQ,CAACb,IAAT,CAAc;AACZC,MAAAA,IAAI,EAAEH,IAAI,CAACI;AADC,KAAd,EAEGd,IAFH,CAES6C,aAAD,IAAmB;AACzB,YAAMC,QAAQ,GAAG,CAAC,GAAGpC,IAAI,CAACO,WAAT,CAAjB;AACA6B,MAAAA,QAAQ,CAACC,MAAT,CAAgBrC,IAAI,CAACuB,mBAArB,EAA0C,CAA1C,EAA6CY,aAA7C;AACAjD,MAAAA,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACQ,KAAF,CAAQ;AACrBE,QAAAA,WAAW,EAAE6B,QADQ;AAErBZ,QAAAA,OAAO,EAAE,CAACxB,IAAI,CAACwB,OAFM;AAGrBpB,QAAAA,UAAU,EAAEE;AAHS,OAAR,CAAR,CAAP;AAKD,KAVD;AAWD,GAZD;AAaD,CAfD;;AAiBA,MAAMgC,cAAc,GAAG,CAAC;AAAEpD,EAAAA;AAAF,CAAD,KAAiB,MAAM;AAC5CA,EAAAA,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,mBAAN,EAA2B,IAA3B,CAAR,CAAP;AACD,CAFD;;AAIA,MAAMyC,eAAe,GAAG,CAAC;AAAErD,EAAAA;AAAF,CAAD,KAAiB,MAAM;AAC7CA,EAAAA,OAAO,CAAEW,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,mBAAN,EAA2B,KAA3B,CAAR,CAAP;AACD,CAFD;;AAIA,MAAM0C,IAAI,GAAG,MAAM/D,MAAM,CAAC;AACxB2B,EAAAA,UAAU,EAAEE,SADY;AAExBC,EAAAA,WAAW,EAAE,EAFW;AAGxBc,EAAAA,gBAAgB,EAAEf,SAHM;AAIxBiB,EAAAA,mBAAmB,EAAEjB,SAJG;AAKxBkB,EAAAA,OAAO,EAAE,KALe;AAMxBiB,EAAAA,OAAO,EAAE,IANe;AAOxBC,EAAAA,iBAAiB,EAAE;AAPK,CAAD,CAAzB;;AAWA,MAAMC,eAAe,GAAG/D,IAAI,CAC1BF,SAAS,CAAC,MAAM8D,IAAI,EAAX,EAAe,MAAf,EAAuB,SAAvB,CADiB,EAE1B7D,YAAY,CAAC;AACXoB,EAAAA,SADW;AAEXU,EAAAA,aAFW;AAGXC,EAAAA,YAHW;AAIXU,EAAAA,UAJW;AAKXc,EAAAA,WALW;AAMXT,EAAAA,aANW;AAOXa,EAAAA,cAPW;AAQXC,EAAAA;AARW,CAAD,CAFc,EAY1B1D,aAAa,CAAC;AACZI,EAAAA;AADY,CAAD,CAZa,CAA5B;AAiBA,eAAe0D,eAAf","sourcesContent":["import Parse from 'parse';\nimport { Record } from 'immutable';\nimport {\n  withState, withHandlers, pipe, withLifecycle,\n} from '../../util';\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\n\nconst onCreate = ({ setData }) => {\n  const query = new Parse.Query('ClouseQuery');\n  query.find().then((result) => {\n    const dataSource = result.map((item, key) => ({\n      ...item.toJSON(),\n      key,\n    }));\n    setData((d) => d.set('personsList', dataSource));\n  });\n};\n\nconst addPerson = ({ data, setData }) => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: data.personName,\n  }).then(() => setData((d) => d.merge({\n    personName: undefined,\n    personsList: d.personsList.concat(obj),\n  })));\n};\n\nconst setPersonName = ({ setData }) => (personName) => {\n  setData((d) => d.set('personName', personName));\n};\n\nconst deletePerson = ({ setData, data }) => (index) => {\n  const selectedPerson = data.personsList[index];\n  const query = new Parse.Query('ClouseQuery');\n  query.get(selectedPerson.id).then((response) => {\n    response.destroy().then(() => setData((d) => d.set('personsList', d.personsList.filter((value, i) => i !== index))));\n  });\n};\n\nconst editPerson = ({ data, setData }) => (index) => {\n  const selectedPerson = data.personsList[index];\n  setData((d) => d.merge({\n    personName: selectedPerson.name,\n    selectedPersonId: selectedPerson.objectId,\n    selectedPersonIndex: index,\n    editing: !data.editing,\n  }));\n};\n\nconst makeMainQuery = ({ setData }) => (oprandData) => {\n  console.log('mm');\n  let mainQuery = new Parse.Query(ClouseQuery);\n  if (oprandData.op === 'and') {\n    oprandData.childs.map((item) => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    oprandData.childs.map((item, key) => {\n      if (!item.childs) {\n        if (key === 0) { mainQuery = item; }\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        if (key === 0) { mainQuery = item.mainQuery; }\n        mainQuery = Parse.Query.or(mainQuery, item.mainQuery);\n      }\n    });\n  }\n  setData((d) => d.set('tmpdata', oprandData));\n  mainQuery.find().then((result) => {\n    const dataSource = result.map((item, key) => ({\n      ...item.toJSON(),\n      key,\n    }));\n    setData((d) => d.set('personsList', dataSource));\n  });\n  setData((d) => d.set('dataFilterVisible', false));\n};\n\nconst confirmEdit = ({ setData, data }) => () => {\n  const query = new Parse.Query('ClouseQuery');\n  query.get(data.selectedPersonId).then((response) => {\n    response.save({\n      name: data.personName,\n    }).then((updatedPerson) => {\n      const tempList = [...data.personsList];\n      tempList.splice(data.selectedPersonIndex, 1, updatedPerson);\n      setData((d) => d.merge({\n        personsList: tempList,\n        editing: !data.editing,\n        personName: undefined,\n      }));\n    });\n  });\n};\n\nconst showDatafilter = ({ setData }) => () => {\n  setData((d) => d.set('dataFilterVisible', true));\n};\n\nconst closeDatafilter = ({ setData }) => () => {\n  setData((d) => d.set('dataFilterVisible', false));\n};\n\nconst init = () => Record({\n  personName: undefined,\n  personsList: [],\n  selectedPersonId: undefined,\n  selectedPersonIndex: undefined,\n  editing: false,\n  tmpdata: null,\n  dataFilterVisible: false,\n\n});\n\nconst tableController = pipe(\n  withState(() => init(), 'data', 'setData'),\n  withHandlers({\n    addPerson,\n    setPersonName,\n    deletePerson,\n    editPerson,\n    confirmEdit,\n    makeMainQuery,\n    showDatafilter,\n    closeDatafilter,\n  }),\n  withLifecycle({\n    onCreate,\n  }),\n);\n\nexport default tableController;\n"]},"metadata":{},"sourceType":"module"}