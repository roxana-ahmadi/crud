{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.run = run;\nexports.getJobsData = getJobsData;\nexports.startJob = startJob;\nexports.getJobStatus = getJobStatus;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n  * Makes a call to a cloud function.\n  * @method run\n  * @name Parse.Cloud.run\n  * @param {String} name The function name.\n  * @param {Object} data The parameters to send to the cloud function.\n  * @param {Object} options\n  * @return {Promise} A promise that will be resolved with the result\n  * of the function.\n  */\n\n\nfunction run(name\n/*: string*/\n, data\n/*: mixed*/\n, options\n/*: RequestOptions*/\n)\n/*: Promise<mixed>*/\n{\n  options = options || {};\n\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n\n  var requestOptions = {};\n\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n/**\n  * Gets data for the current set of cloud jobs.\n  * @method getJobsData\n  * @name Parse.Cloud.getJobsData\n  * @return {Promise} A promise that will be resolved with the result\n  * of the function.\n  */\n\n\nfunction getJobsData()\n/*: Promise<Object>*/\n{\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n/**\n  * Starts a given cloud job, which will process asynchronously.\n  * @method startJob\n  * @name Parse.Cloud.startJob\n  * @param {String} name The function name.\n  * @param {Object} data The parameters to send to the cloud function.\n  * @return {Promise} A promise that will be resolved with the jobStatusId\n  * of the job.\n  */\n\n\nfunction startJob(name\n/*: string*/\n, data\n/*: mixed*/\n)\n/*: Promise<string>*/\n{\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n/**\n  * Gets job status by Id\n  * @method getJobStatus\n  * @name Parse.Cloud.getJobStatus\n  * @param {String} jobStatusId The Id of Job Status.\n  * @return {Parse.Object} Status of Job.\n  */\n\n\nfunction getJobStatus(jobStatusId\n/*: string*/\n)\n/*: Promise<ParseObject>*/\n{\n  var query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\n\nvar DefaultController = {\n  run: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    var request = RESTController.request('POST', 'functions/' + name, payload, options);\n    return request.then(function (res) {\n      if ((0, _typeof2.default)(res) === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n\n      var decoded = (0, _decode.default)(res);\n\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return _promise.default.resolve(decoded.result);\n      }\n\n      return _promise.default.resolve(undefined);\n    });\n  },\n  getJobsData: function (options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n  startJob: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    return RESTController.request('POST', 'jobs/' + name, payload, options);\n  }\n};\n\n_CoreManager.default.setCloudController(DefaultController);","map":{"version":3,"sources":["/home/roxana/React-Project/crud/node_modules/parse/lib/browser/Cloud.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","run","getJobsData","startJob","getJobStatus","_promise","_keys","_typeof2","_CoreManager","_decode","_encode","_ParseError","_ParseQuery","_ParseObject","name","data","options","length","TypeError","requestOptions","useMasterKey","sessionToken","default","getCloudController","jobStatusId","query","get","DefaultController","RESTController","getRESTController","payload","request","then","res","hasOwnProperty","INVALID_JSON","decoded","resolve","result","undefined","setCloudController"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,sDAAD,CAApC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,8DAAD,CAApC;;AAEAC,sBAAsB,CAACC,OAAD,EAAU,YAAV,EAAwB;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAAxB,CAAtB;;AAIAD,OAAO,CAACE,GAAR,GAAcA,GAAd;AACAF,OAAO,CAACG,WAAR,GAAsBA,WAAtB;AACAH,OAAO,CAACI,QAAR,GAAmBA,QAAnB;AACAJ,OAAO,CAACK,YAAR,GAAuBA,YAAvB;;AAEA,IAAIC,QAAQ,GAAGT,sBAAsB,CAACC,OAAO,CAAC,+CAAD,CAAR,CAArC;;AAEA,IAAIS,KAAK,GAAGV,sBAAsB,CAACC,OAAO,CAAC,mDAAD,CAAR,CAAlC;;AAEA,IAAIU,QAAQ,GAAGX,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAArC;;AAEA,IAAIW,YAAY,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIY,OAAO,GAAGb,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIa,OAAO,GAAGd,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIc,WAAW,GAAGf,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIe,WAAW,GAAGhB,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIgB,YAAY,GAAGjB,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;AACA;;;;;;;;;;;AAWA;;;;;;;;;;;;AAYA;;;;;;;;;;;;AAYA,SAASI,GAAT,CAAaa;AACb;AADA,EAEEC;AACF;AAHA,EAIEC;AACF;AALA;AAOA;AACA;AACEA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAI,OAAOF,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACG,MAAL,KAAgB,CAAhD,EAAmD;AACjD,UAAM,IAAIC,SAAJ,CAAc,uCAAd,CAAN;AACD;;AAED,MAAIC,cAAc,GAAG,EAArB;;AAEA,MAAIH,OAAO,CAACI,YAAZ,EAA0B;AACxBD,IAAAA,cAAc,CAACC,YAAf,GAA8BJ,OAAO,CAACI,YAAtC;AACD;;AAED,MAAIJ,OAAO,CAACK,YAAZ,EAA0B;AACxBF,IAAAA,cAAc,CAACE,YAAf,GAA8BL,OAAO,CAACK,YAAtC;AACD;;AAED,SAAOb,YAAY,CAACc,OAAb,CAAqBC,kBAArB,GAA0CtB,GAA1C,CAA8Ca,IAA9C,EAAoDC,IAApD,EAA0DI,cAA1D,CAAP;AACD;AACD;;;;;;;;;AASA,SAASjB,WAAT;AACA;AACA;AACE,SAAOM,YAAY,CAACc,OAAb,CAAqBC,kBAArB,GAA0CrB,WAA1C,CAAsD;AAC3DkB,IAAAA,YAAY,EAAE;AAD6C,GAAtD,CAAP;AAGD;AACD;;;;;;;;;;;AAWA,SAASjB,QAAT,CAAkBW;AAClB;AADA,EAEEC;AACF;AAHA;AAKA;AACA;AACE,MAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACG,MAAL,KAAgB,CAAhD,EAAmD;AACjD,UAAM,IAAIC,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,SAAOV,YAAY,CAACc,OAAb,CAAqBC,kBAArB,GAA0CpB,QAA1C,CAAmDW,IAAnD,EAAyDC,IAAzD,EAA+D;AACpEK,IAAAA,YAAY,EAAE;AADsD,GAA/D,CAAP;AAGD;AACD;;;;;;;;;AASA,SAAShB,YAAT,CAAsBoB;AACtB;AADA;AAGA;AACA;AACE,MAAIC,KAAK,GAAG,IAAIb,WAAW,CAACU,OAAhB,CAAwB,YAAxB,CAAZ;AACA,SAAOG,KAAK,CAACC,GAAN,CAAUF,WAAV,EAAuB;AAC5BJ,IAAAA,YAAY,EAAE;AADc,GAAvB,CAAP;AAGD;;AAED,IAAIO,iBAAiB,GAAG;AACtB1B,EAAAA,GAAG,EAAE,UAAUa,IAAV,EAAgBC,IAAhB,EAAsBC;AAC3B;AADK,IAEH;AACA,QAAIY,cAAc,GAAGpB,YAAY,CAACc,OAAb,CAAqBO,iBAArB,EAArB;;AAEA,QAAIC,OAAO,GAAG,CAAC,GAAGpB,OAAO,CAACY,OAAZ,EAAqBP,IAArB,EAA2B,IAA3B,CAAd;AACA,QAAIgB,OAAO,GAAGH,cAAc,CAACG,OAAf,CAAuB,MAAvB,EAA+B,eAAejB,IAA9C,EAAoDgB,OAApD,EAA6Dd,OAA7D,CAAd;AACA,WAAOe,OAAO,CAACC,IAAR,CAAa,UAAUC,GAAV,EAAe;AACjC,UAAI,CAAC,GAAG1B,QAAQ,CAACe,OAAb,EAAsBW,GAAtB,MAA+B,QAA/B,IAA2C,CAAC,GAAG3B,KAAK,CAACgB,OAAV,EAAmBW,GAAnB,EAAwBhB,MAAxB,GAAiC,CAA5E,IAAiF,CAACgB,GAAG,CAACC,cAAJ,CAAmB,QAAnB,CAAtF,EAAoH;AAClH,cAAM,IAAIvB,WAAW,CAACW,OAAhB,CAAwBX,WAAW,CAACW,OAAZ,CAAoBa,YAA5C,EAA0D,0CAA1D,CAAN;AACD;;AAED,UAAIC,OAAO,GAAG,CAAC,GAAG3B,OAAO,CAACa,OAAZ,EAAqBW,GAArB,CAAd;;AAEA,UAAIG,OAAO,IAAIA,OAAO,CAACF,cAAR,CAAuB,QAAvB,CAAf,EAAiD;AAC/C,eAAO7B,QAAQ,CAACiB,OAAT,CAAiBe,OAAjB,CAAyBD,OAAO,CAACE,MAAjC,CAAP;AACD;;AAED,aAAOjC,QAAQ,CAACiB,OAAT,CAAiBe,OAAjB,CAAyBE,SAAzB,CAAP;AACD,KAZM,CAAP;AAaD,GArBqB;AAsBtBrC,EAAAA,WAAW,EAAE,UAAUc;AACvB;AADa,IAEX;AACA,QAAIY,cAAc,GAAGpB,YAAY,CAACc,OAAb,CAAqBO,iBAArB,EAArB;;AAEA,WAAOD,cAAc,CAACG,OAAf,CAAuB,KAAvB,EAA8B,sBAA9B,EAAsD,IAAtD,EAA4Df,OAA5D,CAAP;AACD,GA5BqB;AA6BtBb,EAAAA,QAAQ,EAAE,UAAUW,IAAV,EAAgBC,IAAhB,EAAsBC;AAChC;AADU,IAER;AACA,QAAIY,cAAc,GAAGpB,YAAY,CAACc,OAAb,CAAqBO,iBAArB,EAArB;;AAEA,QAAIC,OAAO,GAAG,CAAC,GAAGpB,OAAO,CAACY,OAAZ,EAAqBP,IAArB,EAA2B,IAA3B,CAAd;AACA,WAAOa,cAAc,CAACG,OAAf,CAAuB,MAAvB,EAA+B,UAAUjB,IAAzC,EAA+CgB,OAA/C,EAAwDd,OAAxD,CAAP;AACD;AApCqB,CAAxB;;AAuCAR,YAAY,CAACc,OAAb,CAAqBkB,kBAArB,CAAwCb,iBAAxC","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.run = run;\nexports.getJobsData = getJobsData;\nexports.startJob = startJob;\nexports.getJobStatus = getJobStatus;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n  * Makes a call to a cloud function.\n  * @method run\n  * @name Parse.Cloud.run\n  * @param {String} name The function name.\n  * @param {Object} data The parameters to send to the cloud function.\n  * @param {Object} options\n  * @return {Promise} A promise that will be resolved with the result\n  * of the function.\n  */\n\n\nfunction run(name\n/*: string*/\n, data\n/*: mixed*/\n, options\n/*: RequestOptions*/\n)\n/*: Promise<mixed>*/\n{\n  options = options || {};\n\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n\n  var requestOptions = {};\n\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n/**\n  * Gets data for the current set of cloud jobs.\n  * @method getJobsData\n  * @name Parse.Cloud.getJobsData\n  * @return {Promise} A promise that will be resolved with the result\n  * of the function.\n  */\n\n\nfunction getJobsData()\n/*: Promise<Object>*/\n{\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n/**\n  * Starts a given cloud job, which will process asynchronously.\n  * @method startJob\n  * @name Parse.Cloud.startJob\n  * @param {String} name The function name.\n  * @param {Object} data The parameters to send to the cloud function.\n  * @return {Promise} A promise that will be resolved with the jobStatusId\n  * of the job.\n  */\n\n\nfunction startJob(name\n/*: string*/\n, data\n/*: mixed*/\n)\n/*: Promise<string>*/\n{\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n/**\n  * Gets job status by Id\n  * @method getJobStatus\n  * @name Parse.Cloud.getJobStatus\n  * @param {String} jobStatusId The Id of Job Status.\n  * @return {Parse.Object} Status of Job.\n  */\n\n\nfunction getJobStatus(jobStatusId\n/*: string*/\n)\n/*: Promise<ParseObject>*/\n{\n  var query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\n\nvar DefaultController = {\n  run: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    var request = RESTController.request('POST', 'functions/' + name, payload, options);\n    return request.then(function (res) {\n      if ((0, _typeof2.default)(res) === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n\n      var decoded = (0, _decode.default)(res);\n\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return _promise.default.resolve(decoded.result);\n      }\n\n      return _promise.default.resolve(undefined);\n    });\n  },\n  getJobsData: function (options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n  startJob: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    return RESTController.request('POST', 'jobs/' + name, payload, options);\n  }\n};\n\n_CoreManager.default.setCloudController(DefaultController);"]},"metadata":{},"sourceType":"script"}