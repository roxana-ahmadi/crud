{"ast":null,"code":"var _jsxFileName = \"/home/roxana/React-Project/datafilter/src/App.jsx\";\nimport React from 'react';\nimport Parse from 'parse';\nimport { Map, Record } from 'immutable';\nimport { Button } from 'antd';\nimport OprandView from './components/oprand/OprandView';\nimport appController from './appController';\nconst fields = Map({\n  name: 'string',\n  id: 'number',\n  date: 'time',\n  boolean: 'boolean'\n});\nconst constraints = Map({\n  string: ['Contains', 'StartsWith', 'EndsWith', 'EqualTo', 'NotEqualTo', 'GreaterThan', 'LessThan', 'GreaterThanOrEqualTo', 'LessThanOrEqualTo', 'IsEmpty', 'NotIsEmpty', 'IsNull', 'NotIsNull'],\n  number: ['EqualTo', 'NotEqualTo', 'GreaterThan', 'LessThan', 'GreaterThanOrEqualTo', 'LessThanOrEqualTo', 'IsNull', 'NotIsNull'],\n  time: ['EqualTo', 'NotEqualTo', 'GreaterThan', 'LessThan', 'GreaterThanOrEqualTo', 'LessThanOrEqualTo', 'IsNull', 'NotIsNull'],\n  boolean: [],\n  default: ['EqualTo', 'NotEqualTo', 'GreaterThan', 'LessThan', 'GreaterThanOrEqualTo', 'LessThanOrEqualTo', 'IsNull', 'NotIsNull']\n});\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\nconst mainQuery = new Parse.Query(ClouseQuery);\nconst filterData = {\n  op: 'and',\n  childs: [],\n  mainQuery,\n  searchResults: []\n};\n\nconst search = () => {\n  console.log(filterData.mainQuery);\n};\n\nfunction App() {\n  const {\n    onUpdate\n  } = appController();\n  return React.createElement(React.Fragment, null, React.createElement(Button, {\n    onClick: () => search(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Search\"), React.createElement(OprandView, {\n    filterData: filterData,\n    constraints: constraints,\n    fields: fields,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/App.jsx"],"names":["React","Parse","Map","Record","Button","OprandView","appController","fields","name","id","date","boolean","constraints","string","number","time","default","ClouseQuery","Object","extend","mainQuery","Query","filterData","op","childs","searchResults","search","console","log","App","onUpdate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,WAA5B;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,MAAMC,MAAM,GAAGL,GAAG,CAAC;AACjBM,EAAAA,IAAI,EAAE,QADW;AAEjBC,EAAAA,EAAE,EAAE,QAFa;AAGjBC,EAAAA,IAAI,EAAE,MAHW;AAIjBC,EAAAA,OAAO,EAAE;AAJQ,CAAD,CAAlB;AAOA,MAAMC,WAAW,GAAGV,GAAG,CAAC;AACtBW,EAAAA,MAAM,EAAE,CACN,UADM,EAEN,YAFM,EAGN,UAHM,EAIN,SAJM,EAKN,YALM,EAMN,aANM,EAON,UAPM,EAQN,sBARM,EASN,mBATM,EAUN,SAVM,EAWN,YAXM,EAYN,QAZM,EAaN,WAbM,CADc;AAgBtBC,EAAAA,MAAM,EAAE,CACN,SADM,EAEN,YAFM,EAGN,aAHM,EAIN,UAJM,EAKN,sBALM,EAMN,mBANM,EAON,QAPM,EAQN,WARM,CAhBc;AA0BtBC,EAAAA,IAAI,EAAE,CACJ,SADI,EAEJ,YAFI,EAGJ,aAHI,EAIJ,UAJI,EAKJ,sBALI,EAMJ,mBANI,EAOJ,QAPI,EAQJ,WARI,CA1BgB;AAoCtBJ,EAAAA,OAAO,EAAE,EApCa;AAqCtBK,EAAAA,OAAO,EAAE,CACP,SADO,EAEP,YAFO,EAGP,aAHO,EAIP,UAJO,EAKP,sBALO,EAMP,mBANO,EAOP,QAPO,EAQP,WARO;AArCa,CAAD,CAAvB;AAkDA,MAAMC,WAAW,GAAGhB,KAAK,CAACiB,MAAN,CAAaC,MAAb,CAAoB,aAApB,CAApB;AACA,MAAMC,SAAS,GAAG,IAAInB,KAAK,CAACoB,KAAV,CAAgBJ,WAAhB,CAAlB;AAGA,MAAMK,UAAU,GAAG;AACjBC,EAAAA,EAAE,EAAE,KADa;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBJ,EAAAA,SAHiB;AAIjBK,EAAAA,aAAa,EAAE;AAJE,CAAnB;;AAOA,MAAMC,MAAM,GAAG,MAAM;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAYN,UAAU,CAACF,SAAvB;AACD,CAFD;;AAIA,SAASS,GAAT,GAAe;AACb,QAAM;AAAEC,IAAAA;AAAF,MAAexB,aAAa,EAAlC;AACA,SACE,0CACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMoB,MAAM,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,oBAAC,UAAD;AACE,IAAA,UAAU,EAAEJ,UADd;AAEE,IAAA,WAAW,EAAEV,WAFf;AAGE,IAAA,MAAM,EAAEL,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAWD;;AAED,eAAesB,GAAf","sourcesContent":["import React from 'react';\nimport Parse from 'parse';\nimport { Map, Record } from 'immutable';\nimport { Button } from 'antd';\nimport OprandView from './components/oprand/OprandView';\nimport appController from './appController';\n\nconst fields = Map({\n  name: 'string',\n  id: 'number',\n  date: 'time',\n  boolean: 'boolean',\n});\n\nconst constraints = Map({\n  string: [\n    'Contains',\n    'StartsWith',\n    'EndsWith',\n    'EqualTo',\n    'NotEqualTo',\n    'GreaterThan',\n    'LessThan',\n    'GreaterThanOrEqualTo',\n    'LessThanOrEqualTo',\n    'IsEmpty',\n    'NotIsEmpty',\n    'IsNull',\n    'NotIsNull',\n  ],\n  number: [\n    'EqualTo',\n    'NotEqualTo',\n    'GreaterThan',\n    'LessThan',\n    'GreaterThanOrEqualTo',\n    'LessThanOrEqualTo',\n    'IsNull',\n    'NotIsNull',\n  ],\n  time: [\n    'EqualTo',\n    'NotEqualTo',\n    'GreaterThan',\n    'LessThan',\n    'GreaterThanOrEqualTo',\n    'LessThanOrEqualTo',\n    'IsNull',\n    'NotIsNull',\n  ],\n  boolean: [],\n  default: [\n    'EqualTo',\n    'NotEqualTo',\n    'GreaterThan',\n    'LessThan',\n    'GreaterThanOrEqualTo',\n    'LessThanOrEqualTo',\n    'IsNull',\n    'NotIsNull',\n  ],\n\n});\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\nconst mainQuery = new Parse.Query(ClouseQuery);\n\n\nconst filterData = {\n  op: 'and',\n  childs: [],\n  mainQuery,\n  searchResults: [],\n};\n\nconst search = () => {\n  console.log(filterData.mainQuery);\n};\n\nfunction App() {\n  const { onUpdate } = appController();\n  return (\n    <>\n      <Button onClick={() => search()}>Search</Button>\n      <OprandView\n        filterData={filterData}\n        constraints={constraints}\n        fields={fields}\n      />\n    </>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}