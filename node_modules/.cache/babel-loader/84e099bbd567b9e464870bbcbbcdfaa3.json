{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _reduce2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/reduce\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Converts a string into a regex that matches it.\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\n * the text separately.\n * @private\n */\n\n\nfunction quote(s\n/*: string*/\n) {\n  return '\\\\Q' + s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q') + '\\\\E';\n}\n/**\n * Extracts the class name from queries. If not all queries have the same\n * class name an error will be thrown.\n */\n\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/\n)\n/*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      className = q.className;\n    }\n\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\n * Handles pre-populating the result data of a query with select fields,\n * making sure that the data object contains keys for all objects that have\n * been requested with a select, so that our cached state updates correctly.\n */\n\n\nfunction handleSelectResult(data\n/*: any*/\n, select\n/*: Array<string>*/\n) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, \".\") !== -1;\n\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split(\".\");\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n\n        if (_obj !== undefined) {\n          _obj = _obj[component];\n        } //add this path component to the server mask so we can fill it in later if needed\n\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n\n  if ((0, _keys2.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\n\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  //copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      //traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\n\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n\n  if (isDescending) {\n    order = order.substring(1);\n  }\n\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n\n  return 0;\n}\n/**\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\n *\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\n * most common use case is finding all objects that match a query through the\n * <code>find</code> method. for example, this sample code fetches all objects\n * of class <code>myclass</code>. it calls a different function depending on\n * whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.find().then((results) => {\n *   // results is an array of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\n * known, through the get method. for example, this sample code fetches an\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\n * different function depending on whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.get(myid).then((object) => {\n *     // object is an instance of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to count the number of objects that match\n * the query without retrieving all of those objects. for example, this\n * sample code counts the number of objects of the class <code>myclass</code>\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.count().then((number) => {\n *     // there are number instances of myclass.\n * }).catch((error) => {\n *     // error is an instance of Parse.Error.\n * });</pre></p>\n * @alias Parse.Query\n */\n\n\nvar ParseQuery =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @property className\n   * @type String\n   */\n\n  /**\n   * @param {(String|Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false;\n    this._limit = -1; // negative limit is not sent in the server request\n\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\n   * Adds constraint that at least one of the passed in queries matches.\n   * @param {Array} queries\n   * @return {Parse.Query} Returns the query, so you can chain this call.\n   */\n\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that all of the passed in queries match.\n     * @param {Array} queries\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that none of the passed in queries match.\n     * @param {Array} queries\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\n     * Helper for condition queries\n     */\n\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/\n    , condition\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Converts string for regular expression at the beginning\n     */\n\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/\n    )\n    /*: string*/\n    {\n      return '^' + quote(string);\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(params\n      /*: any*/\n      ) {\n        var _context,\n            _this2 = this;\n\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n\n                if ((0, _keys.default)(params)) {\n                  keys = (0, _keys.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n\n                    var json = object._toFullJSON();\n\n                    (0, _forEach.default)(_context2 = (0, _keys2.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n\n                if (params.count) {\n                  count = results.length; // total count from response\n                }\n\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n\n                limit = results.length;\n\n                if (params.limit !== 0 && params.limit < results.length) {\n                  limit = params.limit;\n                }\n\n                results = (0, _splice.default)(results).call(results, 0, limit);\n\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n\n              case 15:\n                return _context3.abrupt(\"return\", results);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns a JSON representation of this query.\n     * @return {Object} The JSON representation of the query.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/\n      = {\n        where: this._where\n      };\n\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n\n      if (this._count) {\n        params.count = 1;\n      }\n\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n\n      return params;\n    }\n    /**\n     * Return a query with conditions from json, can be useful to send query from server side to client\n     * Not static, all query conditions was set before calling this method will be deleted.\n     * For example on the server side we have\n     * var query = new Parse.Query(\"className\");\n     * query.equalTo(key: value);\n     * query.limit(100);\n     * ... (others queries)\n     * Create JSON representation of Query Object\n     * var jsonFromServer = query.fromJSON();\n     *\n     * On client side getting query:\n     * var query = new Parse.Query(\"className\");\n     * query.fromJSON(jsonFromServer);\n     *\n     * and continue to query...\n     * query.skip(100).find().then(...);\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n\n      if (json.include) {\n        this._include = json.include.split(\",\");\n      }\n\n      if ((0, _keys.default)(json)) {\n        this._select = (0, _keys.default)(json).split(\",\");\n      }\n\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(\",\");\n      }\n\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n\n      if (json.order) {\n        this._order = json.order.split(\",\");\n      }\n\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n\n          if ((0, _indexOf.default)(_context4 = [\"where\", \"include\", \"keys\", \"count\", \"limit\", \"skip\", \"order\", \"readPreference\", \"includeReadPreference\", \"subqueryReadPreference\"]).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n       * Static method to restore Parse.Query by json representation\n       * Internally calling Parse.Query.withJSON\n       * @param {String} className\n       * @param {QueryJSON} json from Parse.Query.toJSON() method\n       * @returns {Parse.Query} new created query\n       */\n\n  }, {\n    key: \"get\",\n\n    /**\n     * Constructs a Parse.Object whose id is already known by fetching data from\n     * the server.  Either options.success or options.error is called when the\n     * find completes. Unlike the <code>first</code> method, it never returns undefined.\n     *\n     * @param {String} objectId The id of the object to be fetched.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    value: function (objectId\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\n     * Retrieves a list of ParseObjects that satisfy this query.\n     * Either options.success or options.error is called when the find\n     * completes.\n     *\n     * @param {Object} options Valid options\n     * are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5;\n\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n\n          return _ParseObject.default.fromJSON(data, !select);\n        });\n        var count = response.count;\n\n        if (typeof count === \"number\") {\n          return {\n            results: results,\n            count: count\n          };\n        } else {\n          return results;\n        }\n      });\n    }\n    /**\n     * Counts the number of objects that match this query.\n     * Either options.success or options.error is called when the count\n     * completes.\n     *\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the count when\n     * the query completes.\n     */\n\n  }, {\n    key: \"count\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\n     * Executes a distinct query and returns unique values\n     *\n     * @param {String} key A field to find distinct values\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function (key\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(distinctOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = {\n        distinct: key,\n        where: this._where\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Executes an aggregate query and returns aggregate results\n     *\n     * @param {Mixed} pipeline Array or Object of stages to process query\n     * @param {Object} options Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function (pipeline\n    /*: mixed*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(aggregateOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n\n      return controller.aggregate(this.className, {\n        pipeline: pipeline\n      }, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Retrieves at most one Parse.Object that satisfies this query.\n     *\n     * Either options.success or options.error is called when it completes.\n     * success is passed the object if there is one. otherwise, undefined.\n     *\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the object when\n     * the query completes.\n     */\n\n  }, {\n    key: \"first\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n\n          return objects[0];\n        });\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n\n        if (!objects[0]) {\n          return undefined;\n        }\n\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n\n        return _ParseObject.default.fromJSON(objects[0], !select);\n      });\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"each\",\n    value: function (callback\n    /*: (obj: ParseObject) => any*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _context6;\n\n      options = options || {};\n\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n\n      var query = new ParseQuery(this.className); // We can override the batch size from the options.\n      // This is undocumented, but useful for testing.\n\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context6 = this._include).call(_context6, function (i) {\n        return i;\n      });\n\n      if (this._select) {\n        var _context7;\n\n        query._select = (0, _map2.default)(_context7 = this._select).call(_context7, function (s) {\n          return s;\n        });\n      }\n\n      query._where = {};\n\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n\n      query.ascending('objectId');\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      var finished = false;\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, function () {\n        return (0, _find.default)(query).call(query, findOptions).then(function (results) {\n          var callbacksDone = _promise.default.resolve();\n\n          (0, _forEach.default)(results).call(results, function (result) {\n            callbacksDone = callbacksDone.then(function () {\n              return callback(result);\n            });\n          });\n          return callbacksDone.then(function () {\n            if (results.length >= query._limit) {\n              query.greaterThan('objectId', results[results.length - 1].id);\n            } else {\n              finished = true;\n            }\n          });\n        });\n      });\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query map was called upon.</li>\n     * </ul>\n     *\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this5 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context8.next = 4;\n                return this.each(function (object) {\n                  array.push(callback(object, index, _this5));\n                  index += 1;\n                }, options);\n\n              case 4:\n                return _context8.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback <ul>\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     * </ul>\n     * @param {Mixed} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\n      , initialValue\n      /*: any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var objects;\n        return _regenerator.default.wrap(function (_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                objects = [];\n                _context9.next = 3;\n                return this.each(function (object) {\n                  objects.push(object);\n                }, options);\n\n              case 3:\n                return _context9.abrupt(\"return\", (0, _reduce2.default)(objects).call(objects, callback, initialValue));\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query filter was called upon.</li>\n     * </ul>\n     *\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this6 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context10.next = 4;\n                return this.each(function (object) {\n                  var flag = callback(object, index, _this6);\n\n                  if (flag) {\n                    array.push(object);\n                  }\n\n                  index += 1;\n                }, options);\n\n              case 4:\n                return _context10.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions **/\n\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that the Parse.Object must contain.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"equalTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be not equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that must not be equalled.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than or equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than or equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained in the provided list of values.\n     * @param {String} key The key to check.\n     * @param {Array} values The values that will match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * not be contained in the provided list of values.\n     * @param {String} key The key to check.\n     * @param {Array} values The values that will not match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notContainedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained by the provided list of values. Get objects where all array elements match.\n     * @param {String} key The key to check.\n     * @param {Array} values The values that will match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values.\n     * @param {String} key The key to check.  This key's value must be an array.\n     * @param {Array} values The values that will match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values starting with given strings.\n     * @param {String} key The key to check.  This key's value must be an array.\n     * @param {Array<String>} values The string values that will match as starting string.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<string>*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this = this;\n\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          '$regex': _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\n     * Adds a constraint for finding objects that contain the given key.\n     * @param {String} key The key that should exist.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\n     * Adds a constraint for finding objects that do not contain a given key.\n     * @param {String} key The key that should not exist\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotExist\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\n     * Adds a regular expression constraint for finding string values that match\n     * the provided regular expression.\n     * This may be slow for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {RegExp} regex The regular expression pattern to match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matches\",\n    value: function (key\n    /*: string*/\n    , regex\n    /*: RegExp*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n\n      if (!modifiers) {\n        modifiers = '';\n      }\n\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n\n      return this;\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a Parse.Query\n     * constraint.\n     * @param {String} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value not matches a\n     * Parse.Query constraint.\n     * @param {String} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should not match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a value in\n     * an object returned by a different Parse.Query.\n     * @param {String} key The key that contains the value that is being\n     *                     matched.\n     * @param {String} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint that requires that a key's value not match a value in\n     * an object returned by a different Parse.Query.\n     * @param {String} key The key that contains the value that is being\n     *                     excluded.\n     * @param {String} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string.  This may be slow for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {String} substring The substring that the value must contain.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(value));\n    }\n    /**\n    * Adds a constraint for finding string values that contain a provided\n    * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\n    *\n    * In order to sort you must use select and ascending ($score is required)\n    *  <pre>\n    *   query.fullText('field', 'term');\n    *   query.ascending('$score');\n    *   query.select('$score');\n    *  </pre>\n    *\n    * To retrieve the weight / rank\n    *  <pre>\n    *   object->get('score');\n    *  </pre>\n    *\n    * You can define optionals by providing an object as a third parameter\n    *  <pre>\n    *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\n    *  </pre>\n    *\n    * @param {String} key The key that the string to match is stored in.\n    * @param {String} value The string to search\n    * @param {Object} options (Optional)\n    * @param {String} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\n    * @param {Boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\n    * @param {Boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\n    * @return {Parse.Query} Returns the query, so you can chain this call.\n    */\n\n  }, {\n    key: \"fullText\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    , options\n    /*: ?Object*/\n    )\n    /*: ParseQuery*/\n    {\n      options = options || {};\n\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      var fullOptions = {};\n      fullOptions.$term = value;\n\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\n     * Method to sort the full text search by text score\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"sortByTextScore\",\n    value: function () {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\n     * Adds a constraint for finding string values that start with a provided\n     * string.  This query will use the backend index, so it will be fast even\n     * for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {String} prefix The substring that the value must start with.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', this._regexStartWith(value));\n    }\n    /**\n     * Adds a constraint for finding string values that end with a provided\n     * string.  This will be slow for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {String} suffix The substring that the value must end with.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(value) + '$');\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"near\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {Number} maxDistance Maximum distance (in radians) of results to\n     *   return.\n     * @param {Boolean} sorted A Bool value that is true if results should be\n     *   sorted by distance ascending, false is no sorting is required,\n     *   defaults to true.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinRadians\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , distance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', distance);\n      } else {\n        return this._addCondition(key, '$geoWithin', {\n          '$centerSphere': [[point.longitude, point.latitude], distance]\n        });\n      }\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 3958.8 miles.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {Number} maxDistance Maximum distance (in miles) of results to\n     *   return.\n     * @param {Boolean} sorted A Bool value that is true if results should be\n     *   sorted by distance ascending, false is no sorting is required,\n     *   defaults to true.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinMiles\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , distance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, distance / 3958.8, sorted);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 6371.0 kilometers.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {Number} maxDistance Maximum distance (in kilometers) of results\n     *   to return.\n     * @param {Boolean} sorted A Bool value that is true if results should be\n     *   sorted by distance ascending, false is no sorting is required,\n     *   defaults to true.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinKilometers\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , distance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, distance / 6371.0, sorted);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within a given rectangular geographic bounding\n     * box.\n     * @param {String} key The key to be constrained.\n     * @param {Parse.GeoPoint} southwest\n     *     The lower-left inclusive corner of the box.\n     * @param {Parse.GeoPoint} northeast\n     *     The upper-right inclusive corner of the box.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinGeoBox\",\n    value: function (key\n    /*: string*/\n    , southwest\n    /*: ParseGeoPoint*/\n    , northeast\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n\n      this._addCondition(key, '$within', {\n        '$box': [southwest, northeast]\n      });\n\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within and on the bounds of a given polygon.\n     * Supports closed and open (last point is connected to first) paths\n     *\n     * Polygon must have at least 3 points\n     *\n     * @param {String} key The key to be constrained.\n     * @param {Array} array of geopoints\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinPolygon\",\n    value: function (key\n    /*: string*/\n    , points\n    /*: Array<Array<number>>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        '$polygon': points\n      });\n    }\n    /**\n     * Add a constraint to the query that requires a particular key's\n     * coordinates that contains a ParseGeoPoint\n     *\n     * @param {String} key The key to be constrained.\n     * @param {Parse.GeoPoint} GeoPoint\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"polygonContains\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        '$point': point\n      });\n    }\n    /** Query Orderings **/\n\n    /**\n     * Sorts the results in ascending order by the given key.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"ascending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n\n      return this.addAscending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in ascending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addAscending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this7 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context11;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this7._order = (0, _concat.default)(_context11 = _this7._order).call(_context11, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\n     * Sorts the results in descending order by the given key.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"descending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n\n      return this.addDescending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in descending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDescending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this8 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context12, _context13;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this8._order = (0, _concat.default)(_context12 = _this8._order).call(_context12, (0, _map2.default)(_context13 = key.replace(/\\s/g, '').split(',')).call(_context13, function (k) {\n          return '-' + k;\n        }));\n      });\n      return this;\n    }\n    /** Query Options **/\n\n    /**\n     * Sets the number of results to skip before returning any results.\n     * This is useful for pagination.\n     * Default is to skip zero results.\n     * @param {Number} n the number of results to skip.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n\n      this._skip = n;\n      return this;\n    }\n    /**\n     * Sets the limit of the number of results to return. The default limit is 100.\n     *\n     * @param {Number} n the number of results to limit to.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"limit\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n\n      this._limit = n;\n      return this;\n    }\n    /**\n     * Sets the flag to include with response the total number of objects satisfying this query,\n     * despite limits/skip. Might be useful for pagination.\n     * Note that result of this query will be wrapped as an object with\n     *`results`: holding {ParseObject} array and `count`: integer holding total number\n     * @param {boolean} b false - disable, true - enable.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withCount\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n\n      this._count = includeCount;\n      return this;\n    }\n    /**\n     * Includes nested Parse.Objects for the provided key.  You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * You can include all nested Parse.Objects by passing in '*'.\n     * Requires Parse Server 3.0.0+\n     * <pre>query.include('*');</pre>\n     *\n     * @param {...String|Array<String>} key The name(s) of the key(s) to include.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"include\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this9 = this;\n\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context14;\n\n          _this9._include = (0, _concat.default)(_context14 = _this9._include).call(_context14, key);\n        } else {\n          _this9._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Includes all nested Parse.Objects.\n     *\n     * Requires Parse Server 3.0.0+\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"includeAll\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to include only the\n     * provided keys.  If this is called multiple times, then all of the keys\n     * specified in each of the calls will be included.\n     * @param {...String|Array<String>} keys The name(s) of the key(s) to include.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"select\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this10 = this;\n\n      if (!this._select) {\n        this._select = [];\n      }\n\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context15;\n\n          _this10._select = (0, _concat.default)(_context15 = _this10._select).call(_context15, key);\n        } else {\n          _this10._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to all keys except the\n     * provided keys. Exclude takes precedence over select and include.\n     *\n     * Requires Parse Server 3.6.0+\n     *\n     * @param {...String|Array<String>} keys The name(s) of the key(s) to exclude.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exclude\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this11 = this;\n\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context16;\n\n          _this11._exclude = (0, _concat.default)(_context16 = _this11._exclude).call(_context16, key);\n        } else {\n          _this11._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Changes the read preference that the backend will use when performing the query to the database.\n     * @param {String} readPreference The read preference for the main query.\n     * @param {String} includeReadPreference The read preference for the queries to include pointers.\n     * @param {String} subqueryReadPreference The read preference for the sub queries.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"readPreference\",\n    value: function (_readPreference\n    /*: string*/\n    , includeReadPreference\n    /*:: ?: string*/\n    , subqueryReadPreference\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n    /**\n     * Subscribe this query to get liveQuery updates\n     *\n     * @param {String} sessionToken (optional) Defaults to the currentUser\n     * @return {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\n     * which can be used to get liveQuery updates.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee5(sessionToken\n      /*:: ?: string*/\n      ) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n\n              case 2:\n                currentUser = _context17.sent;\n\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n\n                _context17.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n\n              case 6:\n                liveQueryClient = _context17.sent;\n\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context17.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an or of the query1, query2, and\n     * query3.\n     * @param {...Parse.Query} var_args The list of queries to OR.\n     * @static\n     * @return {Parse.Query} The query that is the OR of the passed in queries.\n     */\n\n  }, {\n    key: \"fromNetwork\",\n\n    /**\n     * Change the source of this query to the server.\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\n     * Changes the source of this query to all pinned objects.\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\n     * Changes the source of this query to the default group of pinned objects.\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPin\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Changes the source of this query to a specific group of pinned objects.\n     *\n     * @param {String} name The name of query source.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPinWithName\",\n    value: function (name\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n\n      return this;\n    }\n    /**\n     * Cancels the current network request (if any is running).\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this12 = this;\n\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n\n        this._xhrRequest.task.abort();\n\n        this._xhrRequest.task = null;\n\n        this._xhrRequest.onchange = function () {};\n\n        return this;\n      }\n\n      return this._xhrRequest.onchange = function () {\n        return _this12.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function (options) {\n      var _this13 = this;\n\n      options.requestTask = function (task) {\n        _this13._xhrRequest.task = task;\n\n        _this13._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (className\n    /*: string*/\n    , json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._orQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an and of the query1, query2, and\n     * query3.\n     * @param {...Parse.Query} var_args The list of queries to AND.\n     * @static\n     * @return {Parse.Query} The query that is the AND of the passed in queries.\n     */\n\n  }, {\n    key: \"and\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._andQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\n     * example:\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is a nor of the query1, query2, and\n     * query3.\n     * @param {...Parse.Query} var_args The list of queries to NOR.\n     * @static\n     * @return {Parse.Query} The query that is the NOR of the passed in queries.\n     */\n\n  }, {\n    key: \"nor\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._norQuery(queries);\n\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\n\nvar DefaultController = {\n  find: function (className\n  /*: string*/\n  , params\n  /*: QueryJSON*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'classes/' + className, params, options);\n  },\n  aggregate: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'aggregate/' + className, params, options);\n  }\n};\n\n_CoreManager.default.setQueryController(DefaultController);\n\nvar _default = ParseQuery;\nexports.default = _default;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/node_modules/parse/lib/browser/ParseQuery.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_reduce2","_typeof2","_isArray","_find","_promise","_regenerator","_splice","_sort","_includes","_concat","_keys","_filter2","_asyncToGenerator2","_map2","_classCallCheck2","_createClass2","_defineProperty2","_slice","_keys2","_indexOf","_forEach","_CoreManager","_encode","_promiseUtils","_ParseError","_ParseGeoPoint","_ParseObject","_OfflineQuery","_LocalDatastoreUtils","quote","s","replace","_getClassNameFromQueries","queries","className","call","q","Error","handleSelectResult","data","select","serverDataMask","field","hasSubObjectSelect","hasOwnProperty","undefined","pathComponents","split","_obj","serverMask","component","index","arr","length","serverData","getObjectStateController","getServerData","id","objectId","copyMissingDataWithMask","src","dest","mask","copyThisLevel","_key","_key2","handleOfflineSort","a","b","sorts","order","operator","isDescending","substring","test","INVALID_KEY_NAME","concat","field1","get","field2","remainingSorts","ParseQuery","objectClass","_obj2","TypeError","_where","_include","_exclude","_count","_limit","_skip","_readPreference","_includeReadPreference","_subqueryReadPreference","_queriesLocalDatastore","_localDatastorePinName","_extraOptions","_xhrRequest","task","onchange","key","queryJSON","toJSON","where","$or","$and","$nor","condition","string","_handleOfflineQuery2","mark","_callee","params","_context","_this2","localDatastore","objects","results","keys","alwaysSelectedKeys","count","limit","wrap","_context3","prev","next","validateQuery","getLocalDatastore","_serializeObjectsFromPinName","sent","json","object","fromJSON","_localId","matchesQuery","_context2","_toFullJSON","skip","abrupt","stop","apply","arguments","include","join","excludeKeys","_select","_order","readPreference","includeReadPreference","subqueryReadPreference","_key3","_key4","_context4","options","equalTo","firstOptions","useMasterKey","sessionToken","first","then","response","errorObject","OBJECT_NOT_FOUND","reject","_this3","findOptions","_setRequestTask","controller","getQueryController","_handleOfflineQuery","_context5","override","result","distinctOptions","distinct","aggregate","pipeline","aggregateOptions","_this4","callback","_context6","query","batchSize","i","_context7","_attr","val","v","conditionMap","cond","ascending","finished","continueWhile","callbacksDone","resolve","greaterThan","_map","_callee2","_this5","array","_context8","each","push","_reduce","_callee3","initialValue","_context9","_filter","_callee4","_this6","_context10","flag","doesNotExist","_addCondition","values","_this","regexObject","_regexStartWith","containsAll","regex","modifiers","ignoreCase","multiline","queryKey","fullOptions","$term","option","$language","$caseSensitive","$diacriticSensitive","$search","point","distance","sorted","near","longitude","latitude","withinRadians","southwest","northeast","points","_len","Array","_key5","addAscending","_this7","_len2","_key6","_context11","_len3","_key7","addDescending","_this8","_len4","_key8","_context12","_context13","k","n","includeCount","_this9","_len5","_key9","_context14","_this10","_len6","_key10","_context15","_this11","_len7","_key11","_context16","_subscribe","_callee5","currentUser","liveQueryClient","subscription","_context17","getUserController","currentUserAsync","getSessionToken","getLiveQueryController","getDefaultLiveQueryClient","shouldOpen","open","subscribe","subscribePromise","fromPinWithName","DEFAULT_PIN","name","checkIfEnabled","_this12","abort","_aborted","cancel","_this13","requestTask","withJSON","_len8","_key12","_orQuery","_len9","_key13","_andQuery","_len10","_key14","_norQuery","DefaultController","find","RESTController","getRESTController","request","setQueryController","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _reduce2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/reduce\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Converts a string into a regex that matches it.\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\n * the text separately.\n * @private\n */\n\n\nfunction quote(s\n/*: string*/\n) {\n  return '\\\\Q' + s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q') + '\\\\E';\n}\n/**\n * Extracts the class name from queries. If not all queries have the same\n * class name an error will be thrown.\n */\n\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/\n)\n/*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      className = q.className;\n    }\n\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\n * Handles pre-populating the result data of a query with select fields,\n * making sure that the data object contains keys for all objects that have\n * been requested with a select, so that our cached state updates correctly.\n */\n\n\nfunction handleSelectResult(data\n/*: any*/\n, select\n/*: Array<string>*/\n) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, \".\") !== -1;\n\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split(\".\");\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n\n        if (_obj !== undefined) {\n          _obj = _obj[component];\n        } //add this path component to the server mask so we can fill it in later if needed\n\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n\n  if ((0, _keys2.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\n\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  //copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      //traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\n\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n\n  if (isDescending) {\n    order = order.substring(1);\n  }\n\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n\n  return 0;\n}\n/**\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\n *\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\n * most common use case is finding all objects that match a query through the\n * <code>find</code> method. for example, this sample code fetches all objects\n * of class <code>myclass</code>. it calls a different function depending on\n * whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.find().then((results) => {\n *   // results is an array of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\n * known, through the get method. for example, this sample code fetches an\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\n * different function depending on whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.get(myid).then((object) => {\n *     // object is an instance of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to count the number of objects that match\n * the query without retrieving all of those objects. for example, this\n * sample code counts the number of objects of the class <code>myclass</code>\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.count().then((number) => {\n *     // there are number instances of myclass.\n * }).catch((error) => {\n *     // error is an instance of Parse.Error.\n * });</pre></p>\n * @alias Parse.Query\n */\n\n\nvar ParseQuery =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @property className\n   * @type String\n   */\n\n  /**\n   * @param {(String|Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false;\n    this._limit = -1; // negative limit is not sent in the server request\n\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\n   * Adds constraint that at least one of the passed in queries matches.\n   * @param {Array} queries\n   * @return {Parse.Query} Returns the query, so you can chain this call.\n   */\n\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that all of the passed in queries match.\n     * @param {Array} queries\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that none of the passed in queries match.\n     * @param {Array} queries\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\n     * Helper for condition queries\n     */\n\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/\n    , condition\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Converts string for regular expression at the beginning\n     */\n\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/\n    )\n    /*: string*/\n    {\n      return '^' + quote(string);\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(params\n      /*: any*/\n      ) {\n        var _context,\n            _this2 = this;\n\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n\n                if ((0, _keys.default)(params)) {\n                  keys = (0, _keys.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n\n                    var json = object._toFullJSON();\n\n                    (0, _forEach.default)(_context2 = (0, _keys2.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n\n                if (params.count) {\n                  count = results.length; // total count from response\n                }\n\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n\n                limit = results.length;\n\n                if (params.limit !== 0 && params.limit < results.length) {\n                  limit = params.limit;\n                }\n\n                results = (0, _splice.default)(results).call(results, 0, limit);\n\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n\n              case 15:\n                return _context3.abrupt(\"return\", results);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns a JSON representation of this query.\n     * @return {Object} The JSON representation of the query.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/\n      = {\n        where: this._where\n      };\n\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n\n      if (this._count) {\n        params.count = 1;\n      }\n\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n\n      return params;\n    }\n    /**\n     * Return a query with conditions from json, can be useful to send query from server side to client\n     * Not static, all query conditions was set before calling this method will be deleted.\n     * For example on the server side we have\n     * var query = new Parse.Query(\"className\");\n     * query.equalTo(key: value);\n     * query.limit(100);\n     * ... (others queries)\n     * Create JSON representation of Query Object\n     * var jsonFromServer = query.fromJSON();\n     *\n     * On client side getting query:\n     * var query = new Parse.Query(\"className\");\n     * query.fromJSON(jsonFromServer);\n     *\n     * and continue to query...\n     * query.skip(100).find().then(...);\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n\n      if (json.include) {\n        this._include = json.include.split(\",\");\n      }\n\n      if ((0, _keys.default)(json)) {\n        this._select = (0, _keys.default)(json).split(\",\");\n      }\n\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(\",\");\n      }\n\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n\n      if (json.order) {\n        this._order = json.order.split(\",\");\n      }\n\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n\n          if ((0, _indexOf.default)(_context4 = [\"where\", \"include\", \"keys\", \"count\", \"limit\", \"skip\", \"order\", \"readPreference\", \"includeReadPreference\", \"subqueryReadPreference\"]).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n       * Static method to restore Parse.Query by json representation\n       * Internally calling Parse.Query.withJSON\n       * @param {String} className\n       * @param {QueryJSON} json from Parse.Query.toJSON() method\n       * @returns {Parse.Query} new created query\n       */\n\n  }, {\n    key: \"get\",\n\n    /**\n     * Constructs a Parse.Object whose id is already known by fetching data from\n     * the server.  Either options.success or options.error is called when the\n     * find completes. Unlike the <code>first</code> method, it never returns undefined.\n     *\n     * @param {String} objectId The id of the object to be fetched.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    value: function (objectId\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\n     * Retrieves a list of ParseObjects that satisfy this query.\n     * Either options.success or options.error is called when the find\n     * completes.\n     *\n     * @param {Object} options Valid options\n     * are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5;\n\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n\n          return _ParseObject.default.fromJSON(data, !select);\n        });\n        var count = response.count;\n\n        if (typeof count === \"number\") {\n          return {\n            results: results,\n            count: count\n          };\n        } else {\n          return results;\n        }\n      });\n    }\n    /**\n     * Counts the number of objects that match this query.\n     * Either options.success or options.error is called when the count\n     * completes.\n     *\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the count when\n     * the query completes.\n     */\n\n  }, {\n    key: \"count\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\n     * Executes a distinct query and returns unique values\n     *\n     * @param {String} key A field to find distinct values\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function (key\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(distinctOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = {\n        distinct: key,\n        where: this._where\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Executes an aggregate query and returns aggregate results\n     *\n     * @param {Mixed} pipeline Array or Object of stages to process query\n     * @param {Object} options Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function (pipeline\n    /*: mixed*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(aggregateOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n\n      return controller.aggregate(this.className, {\n        pipeline: pipeline\n      }, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Retrieves at most one Parse.Object that satisfies this query.\n     *\n     * Either options.success or options.error is called when it completes.\n     * success is passed the object if there is one. otherwise, undefined.\n     *\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @return {Promise} A promise that is resolved with the object when\n     * the query completes.\n     */\n\n  }, {\n    key: \"first\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n\n          return objects[0];\n        });\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n\n        if (!objects[0]) {\n          return undefined;\n        }\n\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n\n        return _ParseObject.default.fromJSON(objects[0], !select);\n      });\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"each\",\n    value: function (callback\n    /*: (obj: ParseObject) => any*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _context6;\n\n      options = options || {};\n\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n\n      var query = new ParseQuery(this.className); // We can override the batch size from the options.\n      // This is undocumented, but useful for testing.\n\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context6 = this._include).call(_context6, function (i) {\n        return i;\n      });\n\n      if (this._select) {\n        var _context7;\n\n        query._select = (0, _map2.default)(_context7 = this._select).call(_context7, function (s) {\n          return s;\n        });\n      }\n\n      query._where = {};\n\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n\n      query.ascending('objectId');\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      var finished = false;\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, function () {\n        return (0, _find.default)(query).call(query, findOptions).then(function (results) {\n          var callbacksDone = _promise.default.resolve();\n\n          (0, _forEach.default)(results).call(results, function (result) {\n            callbacksDone = callbacksDone.then(function () {\n              return callback(result);\n            });\n          });\n          return callbacksDone.then(function () {\n            if (results.length >= query._limit) {\n              query.greaterThan('objectId', results[results.length - 1].id);\n            } else {\n              finished = true;\n            }\n          });\n        });\n      });\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query map was called upon.</li>\n     * </ul>\n     *\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this5 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context8.next = 4;\n                return this.each(function (object) {\n                  array.push(callback(object, index, _this5));\n                  index += 1;\n                }, options);\n\n              case 4:\n                return _context8.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback <ul>\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     * </ul>\n     * @param {Mixed} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\n      , initialValue\n      /*: any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var objects;\n        return _regenerator.default.wrap(function (_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                objects = [];\n                _context9.next = 3;\n                return this.each(function (object) {\n                  objects.push(object);\n                }, options);\n\n              case 3:\n                return _context9.abrupt(\"return\", (0, _reduce2.default)(objects).call(objects, callback, initialValue));\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query filter was called upon.</li>\n     * </ul>\n     *\n     * @param {Object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this6 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context10.next = 4;\n                return this.each(function (object) {\n                  var flag = callback(object, index, _this6);\n\n                  if (flag) {\n                    array.push(object);\n                  }\n\n                  index += 1;\n                }, options);\n\n              case 4:\n                return _context10.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions **/\n\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that the Parse.Object must contain.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"equalTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be not equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that must not be equalled.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than or equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than or equal to the provided value.\n     * @param {String} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained in the provided list of values.\n     * @param {String} key The key to check.\n     * @param {Array} values The values that will match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * not be contained in the provided list of values.\n     * @param {String} key The key to check.\n     * @param {Array} values The values that will not match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notContainedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained by the provided list of values. Get objects where all array elements match.\n     * @param {String} key The key to check.\n     * @param {Array} values The values that will match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values.\n     * @param {String} key The key to check.  This key's value must be an array.\n     * @param {Array} values The values that will match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values starting with given strings.\n     * @param {String} key The key to check.  This key's value must be an array.\n     * @param {Array<String>} values The string values that will match as starting string.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<string>*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this = this;\n\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          '$regex': _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\n     * Adds a constraint for finding objects that contain the given key.\n     * @param {String} key The key that should exist.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\n     * Adds a constraint for finding objects that do not contain a given key.\n     * @param {String} key The key that should not exist\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotExist\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\n     * Adds a regular expression constraint for finding string values that match\n     * the provided regular expression.\n     * This may be slow for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {RegExp} regex The regular expression pattern to match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matches\",\n    value: function (key\n    /*: string*/\n    , regex\n    /*: RegExp*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n\n      if (!modifiers) {\n        modifiers = '';\n      }\n\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n\n      return this;\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a Parse.Query\n     * constraint.\n     * @param {String} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value not matches a\n     * Parse.Query constraint.\n     * @param {String} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should not match.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a value in\n     * an object returned by a different Parse.Query.\n     * @param {String} key The key that contains the value that is being\n     *                     matched.\n     * @param {String} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint that requires that a key's value not match a value in\n     * an object returned by a different Parse.Query.\n     * @param {String} key The key that contains the value that is being\n     *                     excluded.\n     * @param {String} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string.  This may be slow for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {String} substring The substring that the value must contain.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(value));\n    }\n    /**\n    * Adds a constraint for finding string values that contain a provided\n    * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\n    *\n    * In order to sort you must use select and ascending ($score is required)\n    *  <pre>\n    *   query.fullText('field', 'term');\n    *   query.ascending('$score');\n    *   query.select('$score');\n    *  </pre>\n    *\n    * To retrieve the weight / rank\n    *  <pre>\n    *   object->get('score');\n    *  </pre>\n    *\n    * You can define optionals by providing an object as a third parameter\n    *  <pre>\n    *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\n    *  </pre>\n    *\n    * @param {String} key The key that the string to match is stored in.\n    * @param {String} value The string to search\n    * @param {Object} options (Optional)\n    * @param {String} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\n    * @param {Boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\n    * @param {Boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\n    * @return {Parse.Query} Returns the query, so you can chain this call.\n    */\n\n  }, {\n    key: \"fullText\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    , options\n    /*: ?Object*/\n    )\n    /*: ParseQuery*/\n    {\n      options = options || {};\n\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      var fullOptions = {};\n      fullOptions.$term = value;\n\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\n     * Method to sort the full text search by text score\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"sortByTextScore\",\n    value: function () {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\n     * Adds a constraint for finding string values that start with a provided\n     * string.  This query will use the backend index, so it will be fast even\n     * for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {String} prefix The substring that the value must start with.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', this._regexStartWith(value));\n    }\n    /**\n     * Adds a constraint for finding string values that end with a provided\n     * string.  This will be slow for large datasets.\n     * @param {String} key The key that the string to match is stored in.\n     * @param {String} suffix The substring that the value must end with.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(value) + '$');\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"near\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {Number} maxDistance Maximum distance (in radians) of results to\n     *   return.\n     * @param {Boolean} sorted A Bool value that is true if results should be\n     *   sorted by distance ascending, false is no sorting is required,\n     *   defaults to true.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinRadians\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , distance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', distance);\n      } else {\n        return this._addCondition(key, '$geoWithin', {\n          '$centerSphere': [[point.longitude, point.latitude], distance]\n        });\n      }\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 3958.8 miles.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {Number} maxDistance Maximum distance (in miles) of results to\n     *   return.\n     * @param {Boolean} sorted A Bool value that is true if results should be\n     *   sorted by distance ascending, false is no sorting is required,\n     *   defaults to true.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinMiles\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , distance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, distance / 3958.8, sorted);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 6371.0 kilometers.\n     * @param {String} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {Number} maxDistance Maximum distance (in kilometers) of results\n     *   to return.\n     * @param {Boolean} sorted A Bool value that is true if results should be\n     *   sorted by distance ascending, false is no sorting is required,\n     *   defaults to true.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinKilometers\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , distance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, distance / 6371.0, sorted);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within a given rectangular geographic bounding\n     * box.\n     * @param {String} key The key to be constrained.\n     * @param {Parse.GeoPoint} southwest\n     *     The lower-left inclusive corner of the box.\n     * @param {Parse.GeoPoint} northeast\n     *     The upper-right inclusive corner of the box.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinGeoBox\",\n    value: function (key\n    /*: string*/\n    , southwest\n    /*: ParseGeoPoint*/\n    , northeast\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n\n      this._addCondition(key, '$within', {\n        '$box': [southwest, northeast]\n      });\n\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within and on the bounds of a given polygon.\n     * Supports closed and open (last point is connected to first) paths\n     *\n     * Polygon must have at least 3 points\n     *\n     * @param {String} key The key to be constrained.\n     * @param {Array} array of geopoints\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinPolygon\",\n    value: function (key\n    /*: string*/\n    , points\n    /*: Array<Array<number>>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        '$polygon': points\n      });\n    }\n    /**\n     * Add a constraint to the query that requires a particular key's\n     * coordinates that contains a ParseGeoPoint\n     *\n     * @param {String} key The key to be constrained.\n     * @param {Parse.GeoPoint} GeoPoint\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"polygonContains\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        '$point': point\n      });\n    }\n    /** Query Orderings **/\n\n    /**\n     * Sorts the results in ascending order by the given key.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"ascending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n\n      return this.addAscending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in ascending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addAscending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this7 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context11;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this7._order = (0, _concat.default)(_context11 = _this7._order).call(_context11, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\n     * Sorts the results in descending order by the given key.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"descending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n\n      return this.addDescending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in descending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(String|String[]|...String)} key The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDescending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this8 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context12, _context13;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this8._order = (0, _concat.default)(_context12 = _this8._order).call(_context12, (0, _map2.default)(_context13 = key.replace(/\\s/g, '').split(',')).call(_context13, function (k) {\n          return '-' + k;\n        }));\n      });\n      return this;\n    }\n    /** Query Options **/\n\n    /**\n     * Sets the number of results to skip before returning any results.\n     * This is useful for pagination.\n     * Default is to skip zero results.\n     * @param {Number} n the number of results to skip.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n\n      this._skip = n;\n      return this;\n    }\n    /**\n     * Sets the limit of the number of results to return. The default limit is 100.\n     *\n     * @param {Number} n the number of results to limit to.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"limit\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n\n      this._limit = n;\n      return this;\n    }\n    /**\n     * Sets the flag to include with response the total number of objects satisfying this query,\n     * despite limits/skip. Might be useful for pagination.\n     * Note that result of this query will be wrapped as an object with\n     *`results`: holding {ParseObject} array and `count`: integer holding total number\n     * @param {boolean} b false - disable, true - enable.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withCount\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n\n      this._count = includeCount;\n      return this;\n    }\n    /**\n     * Includes nested Parse.Objects for the provided key.  You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * You can include all nested Parse.Objects by passing in '*'.\n     * Requires Parse Server 3.0.0+\n     * <pre>query.include('*');</pre>\n     *\n     * @param {...String|Array<String>} key The name(s) of the key(s) to include.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"include\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this9 = this;\n\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context14;\n\n          _this9._include = (0, _concat.default)(_context14 = _this9._include).call(_context14, key);\n        } else {\n          _this9._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Includes all nested Parse.Objects.\n     *\n     * Requires Parse Server 3.0.0+\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"includeAll\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to include only the\n     * provided keys.  If this is called multiple times, then all of the keys\n     * specified in each of the calls will be included.\n     * @param {...String|Array<String>} keys The name(s) of the key(s) to include.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"select\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this10 = this;\n\n      if (!this._select) {\n        this._select = [];\n      }\n\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context15;\n\n          _this10._select = (0, _concat.default)(_context15 = _this10._select).call(_context15, key);\n        } else {\n          _this10._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to all keys except the\n     * provided keys. Exclude takes precedence over select and include.\n     *\n     * Requires Parse Server 3.6.0+\n     *\n     * @param {...String|Array<String>} keys The name(s) of the key(s) to exclude.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exclude\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this11 = this;\n\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context16;\n\n          _this11._exclude = (0, _concat.default)(_context16 = _this11._exclude).call(_context16, key);\n        } else {\n          _this11._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Changes the read preference that the backend will use when performing the query to the database.\n     * @param {String} readPreference The read preference for the main query.\n     * @param {String} includeReadPreference The read preference for the queries to include pointers.\n     * @param {String} subqueryReadPreference The read preference for the sub queries.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"readPreference\",\n    value: function (_readPreference\n    /*: string*/\n    , includeReadPreference\n    /*:: ?: string*/\n    , subqueryReadPreference\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n    /**\n     * Subscribe this query to get liveQuery updates\n     *\n     * @param {String} sessionToken (optional) Defaults to the currentUser\n     * @return {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\n     * which can be used to get liveQuery updates.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee5(sessionToken\n      /*:: ?: string*/\n      ) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n\n              case 2:\n                currentUser = _context17.sent;\n\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n\n                _context17.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n\n              case 6:\n                liveQueryClient = _context17.sent;\n\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context17.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an or of the query1, query2, and\n     * query3.\n     * @param {...Parse.Query} var_args The list of queries to OR.\n     * @static\n     * @return {Parse.Query} The query that is the OR of the passed in queries.\n     */\n\n  }, {\n    key: \"fromNetwork\",\n\n    /**\n     * Change the source of this query to the server.\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\n     * Changes the source of this query to all pinned objects.\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\n     * Changes the source of this query to the default group of pinned objects.\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPin\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Changes the source of this query to a specific group of pinned objects.\n     *\n     * @param {String} name The name of query source.\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPinWithName\",\n    value: function (name\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n\n      return this;\n    }\n    /**\n     * Cancels the current network request (if any is running).\n     *\n     * @return {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this12 = this;\n\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n\n        this._xhrRequest.task.abort();\n\n        this._xhrRequest.task = null;\n\n        this._xhrRequest.onchange = function () {};\n\n        return this;\n      }\n\n      return this._xhrRequest.onchange = function () {\n        return _this12.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function (options) {\n      var _this13 = this;\n\n      options.requestTask = function (task) {\n        _this13._xhrRequest.task = task;\n\n        _this13._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (className\n    /*: string*/\n    , json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._orQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an and of the query1, query2, and\n     * query3.\n     * @param {...Parse.Query} var_args The list of queries to AND.\n     * @static\n     * @return {Parse.Query} The query that is the AND of the passed in queries.\n     */\n\n  }, {\n    key: \"and\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._andQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\n     * example:\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is a nor of the query1, query2, and\n     * query3.\n     * @param {...Parse.Query} var_args The list of queries to NOR.\n     * @static\n     * @return {Parse.Query} The query that is the NOR of the passed in queries.\n     */\n\n  }, {\n    key: \"nor\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._norQuery(queries);\n\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\n\nvar DefaultController = {\n  find: function (className\n  /*: string*/\n  , params\n  /*: QueryJSON*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'classes/' + className, params, options);\n  },\n  aggregate: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'aggregate/' + className, params, options);\n  }\n};\n\n_CoreManager.default.setQueryController(DefaultController);\n\nvar _default = ParseQuery;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}