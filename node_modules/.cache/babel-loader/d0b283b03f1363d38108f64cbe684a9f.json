{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * <p>A Parse.Session object is a local representation of a revocable session.\n * This class is a subclass of a Parse.Object, and retains the same\n * functionality of a Parse.Object.</p>\n * @alias Parse.Session\n * @extends Parse.Object\n */\n\n\nvar ParseSession =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseSession, _ParseObject);\n  /**\n   *\n   * @param {Object} attributes The initial set of data to store in the user.\n   */\n\n  function ParseSession(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseSession);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseSession).call(this, '_Session'));\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Session');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Returns the session token string.\n    * @return {String}\n   */\n\n\n  (0, _createClass2.default)(ParseSession, [{\n    key: \"getSessionToken\",\n    value: function ()\n    /*: string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['createdWith', 'expiresAt', 'installationId', 'restricted', 'sessionToken', 'user'];\n    }\n    /**\n     * Retrieves the Session object for the currently logged in session.\n      * @static\n     * @return {Promise} A promise that is resolved with the Parse.Session\n     *   object after it has been fetched. If there is no current user, the\n     *   promise will be rejected.\n     */\n\n  }, {\n    key: \"current\",\n    value: function (options\n    /*: FullOptions*/\n    ) {\n      options = options || {};\n\n      var controller = _CoreManager.default.getSessionController();\n\n      var sessionOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        sessionOptions.useMasterKey = options.useMasterKey;\n      }\n\n      return _ParseUser.default.currentAsync().then(function (user) {\n        if (!user) {\n          return _promise.default.reject('There is no current user.');\n        }\n\n        sessionOptions.sessionToken = user.getSessionToken();\n        return controller.getSession(sessionOptions);\n      });\n    }\n    /**\n     * Determines whether the current session token is revocable.\n     * This method is useful for migrating Express.js or Node.js web apps to\n     * use revocable sessions. If you are migrating an app that uses the Parse\n     * SDK in the browser only, please use Parse.User.enableRevocableSession()\n     * instead, so that sessions can be automatically upgraded.\n      * @static\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isCurrentSessionRevocable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var currentUser = _ParseUser.default.current();\n\n      if (currentUser) {\n        return (0, _isRevocableSession.default)(currentUser.getSessionToken() || '');\n      }\n\n      return false;\n    }\n  }]);\n  return ParseSession;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Session', ParseSession);\n\nvar DefaultController = {\n  getSession: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseSession>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var session = new ParseSession();\n    return RESTController.request('GET', 'sessions/me', {}, options).then(function (sessionData) {\n      session._finishFetch(sessionData);\n\n      session._setExisted(true);\n\n      return session;\n    });\n  }\n};\n\n_CoreManager.default.setSessionController(DefaultController);\n\nvar _default = ParseSession;\nexports.default = _default;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/node_modules/parse/lib/browser/ParseSession.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_promise","_typeof2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_CoreManager","_isRevocableSession","_ParseObject2","_ParseUser","ParseSession","_ParseObject","attributes","_this","call","set","Error","key","token","get","options","controller","getSessionController","sessionOptions","hasOwnProperty","useMasterKey","currentAsync","then","user","reject","sessionToken","getSessionToken","getSession","currentUser","current","registerSubclass","DefaultController","RESTController","getRESTController","session","request","sessionData","_finishFetch","_setExisted","setSessionController","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,sDAAD,CAApC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,8DAAD,CAApC;;AAEAC,sBAAsB,CAACC,OAAD,EAAU,YAAV,EAAwB;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAAxB,CAAtB;;AAIAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,QAAQ,GAAGN,sBAAsB,CAACC,OAAO,CAAC,+CAAD,CAAR,CAArC;;AAEA,IAAIM,QAAQ,GAAGP,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAArC;;AAEA,IAAIO,gBAAgB,GAAGR,sBAAsB,CAACC,OAAO,CAAC,+CAAD,CAAR,CAA7C;;AAEA,IAAIQ,aAAa,GAAGT,sBAAsB,CAACC,OAAO,CAAC,4CAAD,CAAR,CAA1C;;AAEA,IAAIS,2BAA2B,GAAGV,sBAAsB,CAACC,OAAO,CAAC,0DAAD,CAAR,CAAxD;;AAEA,IAAIU,gBAAgB,GAAGX,sBAAsB,CAACC,OAAO,CAAC,+CAAD,CAAR,CAA7C;;AAEA,IAAIW,UAAU,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAAvC;;AAEA,IAAIY,YAAY,GAAGb,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIa,mBAAmB,GAAGd,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAAhD;;AAEA,IAAIc,aAAa,GAAGf,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAA1C;;AAEA,IAAIe,UAAU,GAAGhB,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC;AACA;;;;;;;;;;;AAWA;;;;;;;;;AASA,IAAIgB,YAAY;AAChB;AACA,UAAUC,YAAV,EAAwB;AACtB,GAAC,GAAGN,UAAU,CAACP,OAAf,EAAwBY,YAAxB,EAAsCC,YAAtC;AACA;;;;;AAKA,WAASD,YAAT,CAAsBE;AACtB;AADA,IAEE;AACA,QAAIC,KAAJ;;AAEA,KAAC,GAAGZ,gBAAgB,CAACH,OAArB,EAA8B,IAA9B,EAAoCY,YAApC;AACAG,IAAAA,KAAK,GAAG,CAAC,GAAGV,2BAA2B,CAACL,OAAhC,EAAyC,IAAzC,EAA+C,CAAC,GAAGM,gBAAgB,CAACN,OAArB,EAA8BY,YAA9B,EAA4CI,IAA5C,CAAiD,IAAjD,EAAuD,UAAvD,CAA/C,CAAR;;AAEA,QAAIF,UAAU,IAAI,CAAC,GAAGZ,QAAQ,CAACF,OAAb,EAAsBc,UAAtB,MAAsC,QAAxD,EAAkE;AAChE,UAAI,CAACC,KAAK,CAACE,GAAN,CAAUH,UAAU,IAAI,EAAxB,CAAL,EAAkC;AAChC,cAAM,IAAII,KAAJ,CAAU,kCAAV,CAAN;AACD;AACF;;AAED,WAAOH,KAAP;AACD;AACD;;;;;;AAMA,GAAC,GAAGX,aAAa,CAACJ,OAAlB,EAA2BY,YAA3B,EAAyC,CAAC;AACxCO,IAAAA,GAAG,EAAE,iBADmC;AAExCpB,IAAAA,KAAK,EAAE;AACP;AACA;AACE,UAAIqB,KAAK,GAAG,KAAKC,GAAL,CAAS,cAAT,CAAZ;;AAEA,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAOA,KAAP;AACD;;AAED,aAAO,EAAP;AACD;AAZuC,GAAD,CAAzC,EAaI,CAAC;AACHD,IAAAA,GAAG,EAAE,oBADF;AAEHpB,IAAAA,KAAK,EAAE,YAAY;AACjB,aAAO,CAAC,aAAD,EAAgB,WAAhB,EAA6B,gBAA7B,EAA+C,YAA/C,EAA6D,cAA7D,EAA6E,MAA7E,CAAP;AACD;AACD;;;;;;;;AALG,GAAD,EAaD;AACDoB,IAAAA,GAAG,EAAE,SADJ;AAEDpB,IAAAA,KAAK,EAAE,UAAUuB;AACjB;AADO,MAEL;AACAA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAIC,UAAU,GAAGf,YAAY,CAACR,OAAb,CAAqBwB,oBAArB,EAAjB;;AAEA,UAAIC,cAAc,GAAG,EAArB;;AAEA,UAAIH,OAAO,CAACI,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;AAC1CD,QAAAA,cAAc,CAACE,YAAf,GAA8BL,OAAO,CAACK,YAAtC;AACD;;AAED,aAAOhB,UAAU,CAACX,OAAX,CAAmB4B,YAAnB,GAAkCC,IAAlC,CAAuC,UAAUC,IAAV,EAAgB;AAC5D,YAAI,CAACA,IAAL,EAAW;AACT,iBAAO7B,QAAQ,CAACD,OAAT,CAAiB+B,MAAjB,CAAwB,2BAAxB,CAAP;AACD;;AAEDN,QAAAA,cAAc,CAACO,YAAf,GAA8BF,IAAI,CAACG,eAAL,EAA9B;AACA,eAAOV,UAAU,CAACW,UAAX,CAAsBT,cAAtB,CAAP;AACD,OAPM,CAAP;AAQD;AACD;;;;;;;;;;AAxBC,GAbC,EA+CD;AACDN,IAAAA,GAAG,EAAE,2BADJ;AAEDpB,IAAAA,KAAK,EAAE;AACP;AACA;AACE,UAAIoC,WAAW,GAAGxB,UAAU,CAACX,OAAX,CAAmBoC,OAAnB,EAAlB;;AAEA,UAAID,WAAJ,EAAiB;AACf,eAAO,CAAC,GAAG1B,mBAAmB,CAACT,OAAxB,EAAiCmC,WAAW,CAACF,eAAZ,MAAiC,EAAlE,CAAP;AACD;;AAED,aAAO,KAAP;AACD;AAZA,GA/CC,CAbJ;AA0EA,SAAOrB,YAAP;AACD,CAxGD,CAwGEF,aAAa,CAACV,OAxGhB,CAFA;;AA4GAU,aAAa,CAACV,OAAd,CAAsBqC,gBAAtB,CAAuC,UAAvC,EAAmDzB,YAAnD;;AAEA,IAAI0B,iBAAiB,GAAG;AACtBJ,EAAAA,UAAU,EAAE,UAAUZ;AACtB;AADY;AAGZ;AACA;AACE,QAAIiB,cAAc,GAAG/B,YAAY,CAACR,OAAb,CAAqBwC,iBAArB,EAArB;;AAEA,QAAIC,OAAO,GAAG,IAAI7B,YAAJ,EAAd;AACA,WAAO2B,cAAc,CAACG,OAAf,CAAuB,KAAvB,EAA8B,aAA9B,EAA6C,EAA7C,EAAiDpB,OAAjD,EAA0DO,IAA1D,CAA+D,UAAUc,WAAV,EAAuB;AAC3FF,MAAAA,OAAO,CAACG,YAAR,CAAqBD,WAArB;;AAEAF,MAAAA,OAAO,CAACI,WAAR,CAAoB,IAApB;;AAEA,aAAOJ,OAAP;AACD,KANM,CAAP;AAOD;AAhBqB,CAAxB;;AAmBAjC,YAAY,CAACR,OAAb,CAAqB8C,oBAArB,CAA0CR,iBAA1C;;AAEA,IAAIS,QAAQ,GAAGnC,YAAf;AACAd,OAAO,CAACE,OAAR,GAAkB+C,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * <p>A Parse.Session object is a local representation of a revocable session.\n * This class is a subclass of a Parse.Object, and retains the same\n * functionality of a Parse.Object.</p>\n * @alias Parse.Session\n * @extends Parse.Object\n */\n\n\nvar ParseSession =\n/*#__PURE__*/\nfunction (_ParseObject) {\n  (0, _inherits2.default)(ParseSession, _ParseObject);\n  /**\n   *\n   * @param {Object} attributes The initial set of data to store in the user.\n   */\n\n  function ParseSession(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseSession);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParseSession).call(this, '_Session'));\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error('Can\\'t create an invalid Session');\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Returns the session token string.\n    * @return {String}\n   */\n\n\n  (0, _createClass2.default)(ParseSession, [{\n    key: \"getSessionToken\",\n    value: function ()\n    /*: string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['createdWith', 'expiresAt', 'installationId', 'restricted', 'sessionToken', 'user'];\n    }\n    /**\n     * Retrieves the Session object for the currently logged in session.\n      * @static\n     * @return {Promise} A promise that is resolved with the Parse.Session\n     *   object after it has been fetched. If there is no current user, the\n     *   promise will be rejected.\n     */\n\n  }, {\n    key: \"current\",\n    value: function (options\n    /*: FullOptions*/\n    ) {\n      options = options || {};\n\n      var controller = _CoreManager.default.getSessionController();\n\n      var sessionOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        sessionOptions.useMasterKey = options.useMasterKey;\n      }\n\n      return _ParseUser.default.currentAsync().then(function (user) {\n        if (!user) {\n          return _promise.default.reject('There is no current user.');\n        }\n\n        sessionOptions.sessionToken = user.getSessionToken();\n        return controller.getSession(sessionOptions);\n      });\n    }\n    /**\n     * Determines whether the current session token is revocable.\n     * This method is useful for migrating Express.js or Node.js web apps to\n     * use revocable sessions. If you are migrating an app that uses the Parse\n     * SDK in the browser only, please use Parse.User.enableRevocableSession()\n     * instead, so that sessions can be automatically upgraded.\n      * @static\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isCurrentSessionRevocable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var currentUser = _ParseUser.default.current();\n\n      if (currentUser) {\n        return (0, _isRevocableSession.default)(currentUser.getSessionToken() || '');\n      }\n\n      return false;\n    }\n  }]);\n  return ParseSession;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Session', ParseSession);\n\nvar DefaultController = {\n  getSession: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseSession>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var session = new ParseSession();\n    return RESTController.request('GET', 'sessions/me', {}, options).then(function (sessionData) {\n      session._finishFetch(sessionData);\n\n      session._setExisted(true);\n\n      return session;\n    });\n  }\n};\n\n_CoreManager.default.setSessionController(DefaultController);\n\nvar _default = ParseSession;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}