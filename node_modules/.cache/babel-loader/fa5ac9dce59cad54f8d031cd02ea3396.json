{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe, withLifecycle } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst onCreate = ({\n  setData\n}) => {\n  const query = new Parse.Query('ClouseQuery');\n  query.find().then(result => {\n    setData(d => d.set('personsList', result));\n  });\n};\n\nconst addPerson = ({\n  data,\n  setData\n}) => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: data.personName\n  }).then(() => setData(d => d.merge({\n    personName: undefined,\n    personsList: d.personsList.concat(obj)\n  })));\n};\n\nconst setPersonName = ({\n  setData\n}) => personName => {\n  setData(d => d.set('personName', personName));\n};\n\nconst deletePerson = ({\n  setData,\n  data\n}) => index => {\n  const selectedPerson = data.personsList[index];\n  const query = new Parse.Query('ClouseQuery');\n  query.get(selectedPerson.id).then(response => {\n    response.destroy().then(() => setData(d => d.set('personsList', d.personsList.filter((value, i) => i !== index))));\n  });\n};\n\nconst makeMainQuery = ({\n  setData\n}) => oprandData => {\n  let mainQuery = new Parse.Query(ClouseQuery);\n\n  if (oprandData.op === 'and') {\n    oprandData.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    oprandData.childs.map((item, key) => {\n      if (!item.childs) {\n        if (key === 0) {\n          mainQuery = item;\n        }\n\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        if (key === 0) {\n          mainQuery = item.mainQuery;\n        }\n\n        mainQuery = Parse.Query.or(mainQuery, item.mainQuery);\n      }\n    });\n  }\n\n  setData(d => d.set('tmpdata', oprandData));\n  mainQuery.find().then(result => {\n    setData(d => d.set('personsList', result));\n  });\n};\n\nconst editPerson = ({\n  data,\n  setData\n}) => index => {\n  const selectedPerson = data.personsList[index];\n  setData(d => d.merge({\n    personName: selectedPerson.name,\n    selectedPersonId: selectedPerson.id,\n    selectedPersonIndex: index,\n    editing: !data.editing\n  }));\n};\n\nconst confirmEdit = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query('ClouseQuery');\n  query.get(data.selectedPersonId).then(response => {\n    response.save({\n      name: data.personName\n    }).then(updatedPerson => {\n      const tempList = [...data.personsList];\n      tempList.splice(data.selectedPersonIndex, 1, updatedPerson);\n      setData(d => d.merge({\n        personsList: tempList,\n        editing: !data.editing,\n        personName: undefined\n      }));\n    });\n  });\n};\n\nconst showDatafilter = ({\n  setData\n}) => () => {\n  setData(d => d.set('dataFilterVisible', true));\n};\n\nconst closeDatafilter = ({\n  setData\n}) => () => {\n  setData(d => d.merge({\n    dataFilterVisible: false\n  }));\n};\n\nconst init = () => Record({\n  personName: undefined,\n  personsList: [],\n  selectedPersonId: undefined,\n  selectedPersonIndex: undefined,\n  editing: false,\n  tmpdata: null,\n  dataFilterVisible: false\n});\n\nconst tableController = pipe(withState(() => init(), 'data', 'setData'), withHandlers({\n  addPerson,\n  setPersonName,\n  deletePerson,\n  editPerson,\n  confirmEdit,\n  makeMainQuery,\n  showDatafilter,\n  closeDatafilter\n}), withLifecycle({\n  onCreate\n}));\nexport default tableController;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/src/components/table/tableController.js"],"names":["Parse","Record","withState","withHandlers","pipe","withLifecycle","ClouseQuery","Object","extend","onCreate","setData","query","Query","find","then","result","d","set","addPerson","data","obj","save","name","personName","merge","undefined","personsList","concat","setPersonName","deletePerson","index","selectedPerson","get","id","response","destroy","filter","value","i","makeMainQuery","oprandData","mainQuery","op","childs","map","item","and","key","or","editPerson","selectedPersonId","selectedPersonIndex","editing","confirmEdit","updatedPerson","tempList","splice","showDatafilter","closeDatafilter","dataFilterVisible","init","tmpdata","tableController"],"mappings":"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","sourcesContent":["import Parse from 'parse';\nimport { Record } from 'immutable';\nimport {\n  withState, withHandlers, pipe, withLifecycle,\n} from '../../util';\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\n\nconst onCreate = ({ setData }) => {\n  const query = new Parse.Query('ClouseQuery');\n  query.find().then((result) => {\n    setData((d) => d.set('personsList', result));\n  });\n};\n\nconst addPerson = ({ data, setData }) => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: data.personName,\n  }).then(() => setData((d) => d.merge({\n    personName: undefined,\n    personsList: d.personsList.concat(obj),\n  })));\n};\n\nconst setPersonName = ({ setData }) => (personName) => {\n  setData((d) => d.set('personName', personName));\n};\n\nconst deletePerson = ({ setData, data }) => (index) => {\n  const selectedPerson = data.personsList[index];\n  const query = new Parse.Query('ClouseQuery');\n  query.get(selectedPerson.id).then((response) => {\n    response.destroy().then(() => setData((d) => d.set('personsList', d.personsList.filter((value, i) => i !== index))));\n  });\n};\n\n\nconst makeMainQuery = ({ setData }) => (oprandData) => {\n  let mainQuery = new Parse.Query(ClouseQuery);\n  if (oprandData.op === 'and') {\n    oprandData.childs.map((item) => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  } else {\n    oprandData.childs.map((item, key) => {\n      if (!item.childs) {\n        if (key === 0) { mainQuery = item; }\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        if (key === 0) { mainQuery = item.mainQuery; }\n        mainQuery = Parse.Query.or(mainQuery, item.mainQuery);\n      }\n    });\n  }\n  setData((d) => d.set('tmpdata', oprandData));\n  mainQuery.find().then((result) => {\n    setData((d) => d.set('personsList', result));\n  });\n};\n\nconst editPerson = ({ data, setData }) => (index) => {\n  const selectedPerson = data.personsList[index];\n  setData((d) => d.merge({\n    personName: selectedPerson.name,\n    selectedPersonId: selectedPerson.id,\n    selectedPersonIndex: index,\n    editing: !data.editing,\n  }));\n};\n\nconst confirmEdit = ({ setData, data }) => () => {\n  const query = new Parse.Query('ClouseQuery');\n  query.get(data.selectedPersonId).then((response) => {\n    response.save({\n      name: data.personName,\n    }).then((updatedPerson) => {\n      const tempList = [...data.personsList];\n      tempList.splice(data.selectedPersonIndex, 1, updatedPerson);\n      setData((d) => d.merge({\n        personsList: tempList,\n        editing: !data.editing,\n        personName: undefined,\n      }));\n    });\n  });\n};\n\nconst showDatafilter = ({ setData }) => () => {\n  setData((d) => d.set('dataFilterVisible', true));\n};\n\nconst closeDatafilter = ({ setData }) => () => {\n  setData((d) => d.merge({ dataFilterVisible: false }));\n};\n\nconst init = () => Record({\n  personName: undefined,\n  personsList: [],\n  selectedPersonId: undefined,\n  selectedPersonIndex: undefined,\n  editing: false,\n  tmpdata: null,\n  dataFilterVisible: false,\n\n});\n\nconst tableController = pipe(\n  withState(() => init(), 'data', 'setData'),\n  withHandlers({\n    addPerson,\n    setPersonName,\n    deletePerson,\n    editPerson,\n    confirmEdit,\n    makeMainQuery,\n    showDatafilter,\n    closeDatafilter,\n  }),\n  withLifecycle({\n    onCreate,\n  }),\n);\n\nexport default tableController;\n"]},"metadata":{},"sourceType":"module"}