{"ast":null,"code":"/*\n * Copyright (c) 2019-present, The Yumcoder Authors. All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n/**\n *\n * note about arr.reduce and arr.reduceRight\n *      let value = arr.reduce(function(previousValue, item, index, array) {// ...}, initial);\n * They are used to calculate a single value based on the array\n * example:\n *      let arr = [1, 2, 3, 4, 5];\n *      let result = arr.reduce((sum, current) => sum + current, 0);\n *      alert(result); // 15\n * But such use requires an extreme care. If the array is empty, then reduce call without initial\n * value gives an error example:\n *      let arr = [];\n *      // Error: Reduce of empty array with no initial value\n *      // if the initial value existed, reduce would return it for the empty arr.\n *      arr.reduce((sum, current) => sum + current);\n * so props should have default value to avoid error (Reduce of empty array with no initial value)\n */\nconst pipe = (...fns) => (props = {}) => fns.reduce((v, f) => f(v), props\n/* initial value */\n);\n\nexport default pipe;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/src/util/pipe.js"],"names":["pipe","fns","props","reduce","v","f"],"mappings":"AAAA;;;;;;;AAOA;;;;;;;;;;;;;;;;;AAkBA,MAAMA,IAAI,GAAG,CAAC,GAAGC,GAAJ,KAAY,CAACC,KAAK,GAAG,EAAT,KAAgBD,GAAG,CAACE,MAAJ,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACD,CAAD,CAAtB,EAA2BF;AAAM;AAAjC,CAAzC;;AAEA,eAAeF,IAAf","sourcesContent":["/*\n * Copyright (c) 2019-present, The Yumcoder Authors. All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\n/**\n *\n * note about arr.reduce and arr.reduceRight\n *      let value = arr.reduce(function(previousValue, item, index, array) {// ...}, initial);\n * They are used to calculate a single value based on the array\n * example:\n *      let arr = [1, 2, 3, 4, 5];\n *      let result = arr.reduce((sum, current) => sum + current, 0);\n *      alert(result); // 15\n * But such use requires an extreme care. If the array is empty, then reduce call without initial\n * value gives an error example:\n *      let arr = [];\n *      // Error: Reduce of empty array with no initial value\n *      // if the initial value existed, reduce would return it for the empty arr.\n *      arr.reduce((sum, current) => sum + current);\n * so props should have default value to avoid error (Reduce of empty array with no initial value)\n */\n\nconst pipe = (...fns) => (props = {}) => fns.reduce((v, f) => f(v), props /* initial value */);\n\nexport default pipe;\n"]},"metadata":{},"sourceType":"module"}