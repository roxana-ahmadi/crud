{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\n\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar uuidv4 = require('uuid/v4');\n\nvar DEFAULT_BATCH_SIZE = 20; // Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\n\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\n\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\n * Creates a new model with defined attributes.\n  *\n  * <p>You won't normally call this method directly.  It is recommended that\n  * you use a subclass of <code>Parse.Object</code> instead, created by calling\n  * <code>extend</code>.</p>\n  *\n  * <p>However, if you don't want to use a subclass, or aren't sure which\n  * subclass is appropriate, you can use this form:<pre>\n  *     var object = new Parse.Object(\"ClassName\");\n  * </pre>\n  * That is basically equivalent to:<pre>\n  *     var MyClass = Parse.Object.extend(\"ClassName\");\n  *     var object = new MyClass();\n  * </pre></p>\n  *\n * @alias Parse.Object\n */\n\n\nvar ParseObject =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {String} className The class name for the object\n   * @param {Object} attributes The initial set of data to store in the object.\n   * @param {Object} options The options for this object instance.\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/\n  , attributes\n  /*:: ?: { [attr: string]: mixed }*/\n  , options\n  /*:: ?: { ignoreValidation: boolean }*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n\n    var toSet = null;\n    this._objCount = objectCount++;\n\n    if (typeof className === 'string') {\n      this.className = className;\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error('Can\\'t create an invalid Parse Object');\n    }\n  }\n  /**\n   * The ID of this object, unique within its class.\n   * @property id\n   * @type String\n   */\n\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"_getId\",\n\n    /** Private methods **/\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     */\n    value: function ()\n    /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     */\n\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function ()\n    /*: ParseObject | {id: string, className: string}*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n\n        if (!id) {\n          id = this._getId();\n        }\n\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n\n      var unset = {};\n\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function ()\n    /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear\n    /*:: ?: Array<string>*/\n    ) {\n      var pending = this._getPendingOps();\n\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen\n    /*:: ?: Array<any>*/\n    )\n    /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/\n      = this.toJSON(seen);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      var json = {};\n\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function ()\n    /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n\n      var body = this._getSaveJSON();\n\n      var path = 'classes/' + this.className;\n\n      if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData\n    /*: AttributeMap*/\n    ) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed\n    /*: boolean*/\n    ) {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId\n    /*: string*/\n    ) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response\n    /*: AttributeMap*/\n    , status\n    /*: number*/\n    ) {\n      var changes = {};\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response)) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          changes[attr] = (0, _decode.default)(response[attr]);\n\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n\n      this._migrateId(response.objectId);\n\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n    /** Public methods **/\n\n  }, {\n    key: \"initialize\",\n    value: function () {} // NOOP\n\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     * @return {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function (seen\n    /*: Array<any> | void*/\n    )\n    /*: AttributeMap*/\n    {\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen);\n        }\n      }\n\n      var pending = this._getPendingOps();\n\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON();\n      }\n\n      if (this.id) {\n        json.objectId = this.id;\n      }\n\n      return json;\n    }\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     * @param {Object} other - An other object ot compare\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     * @param {String} attr An attribute name (optional).\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"dirty\",\n    value: function (attr\n    /*:: ?: string*/\n    )\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n\n      var pendingOps = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     * @return {String[]}\n     */\n\n  }, {\n    key: \"dirtyKeys\",\n    value: function ()\n    /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n\n      var keys = {};\n\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n\n      return (0, _keys.default)(keys);\n    }\n    /**\n     * Returns true if the object has been fetched.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isDataAvailable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var serverData = this._getServerData();\n\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     * @return {Pointer}\n     */\n\n  }, {\n    key: \"toPointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\n     * Gets the value of an attribute.\n     * @param {String} attr The string name of an attribute.\n     */\n\n  }, {\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets a relation on the given class for the attribute.\n     * @param String attr The attribute to get the relation for.\n     * @return {Parse.Relation}\n     */\n\n  }, {\n    key: \"relation\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n\n        value._ensureParentAndKey(this, attr);\n\n        return value;\n      }\n\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     * @param {String} attr The string name of an attribute.\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var val = this.attributes[attr];\n\n      if (val == null) {\n        return '';\n      }\n\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n\n        val = val.toString();\n      }\n\n      return (0, _escape2.default)(val);\n    }\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     * @param {String} attr The string name of the attribute.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: boolean*/\n    {\n      var attributes = this.attributes;\n\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n\n      return false;\n    }\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {String} key The key to set.\n     * @param {} value The value to give it.\n     * @param {Object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @return {(ParseObject|Boolean)} true if the set succeeded.\n     */\n\n  }, {\n    key: \"set\",\n    value: function (key\n    /*: mixed*/\n    , value\n    /*: mixed*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n\n      options = options || {};\n      var readonly = [];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n\n      var currentAttributes = this.attributes; // Only set nested fields if exists\n\n      var serverData = this._getServerData();\n\n      if (typeof key === 'string' && (0, _includes.default)(key).call(key, '.')) {\n        var field = key.split('.')[0];\n\n        if (!serverData[field]) {\n          return this;\n        }\n      } // Calculate new values\n\n\n      var newValues = {};\n\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return false;\n        }\n      } // Consolidate Ops\n\n\n      var pendingOps = this._getPendingOps();\n\n      var last = pendingOps.length - 1;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n\n      return this;\n    }\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     * @param {String} attr The string name of an attribute.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"unset\",\n    value: function (attr\n    /*: string*/\n    , options\n    /*:: ?: { [opt: string]: mixed }*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"increment\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"add\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"addUnique\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op} The operation, or undefined if none.\n     */\n\n  }, {\n    key: \"op\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\n     * Creates a new model with identical attributes to this one.\n     * @return {Parse.Object}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      var attributes = this.attributes;\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n\n        attributes = copy;\n      }\n\n      if (clone.set) {\n        clone.set(attributes);\n      }\n\n      return clone;\n    }\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     * @return {Parse.Object}\n     */\n\n  }, {\n    key: \"newInstance\",\n    value: function ()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      clone.id = this.id;\n\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n\n      return clone;\n    }\n    /**\n     * Returns true if this object has never been saved to Parse.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"existed\",\n    value: function ()\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        return state.existed;\n      }\n\n      return false;\n    }\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/\n      ) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.id) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                _context.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context.next = 6;\n                return query.get(this.id, options);\n\n              case 6:\n                return _context.abrupt(\"return\", true);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 13:\n                throw _context.t0;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {Object} attrs The current data to validate.\n     * @return {} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    )\n    /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns the ACL for this object.\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n\n  }, {\n    key: \"getACL\",\n    value: function ()\n    /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the ACL to be used for this object.\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {Object} options\n     * @return {(ParseObject|Boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"setACL\",\n    value: function (acl\n    /*: ParseACL*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     * @param {string} [keys] - specify which fields to revert\n     */\n\n  }, {\n    key: \"revert\",\n    value: function ()\n    /*: void*/\n    {\n      var keysToRevert;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      if (keys.length) {\n        keysToRevert = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = (0, _getIterator2.default)(keys), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _key3 = _step.value;\n\n            if (typeof _key3 === \"string\") {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error(\"Parse.Object#revert expects either no, or a list of string, arguments.\");\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\n     * Clears all attributes on a model\n     * @return {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function ()\n    /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @return {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {String|Array<string|Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     *   object.save();</pre>\n     * or<pre>\n     *   object.save(attrs);</pre>\n     * or<pre>\n     *   object.save(null, options);</pre>\n     * or<pre>\n     *   object.save(attrs, options);</pre>\n     * or<pre>\n     *   object.save(key, value, options);</pre>\n     *\n     * For example, <pre>\n     *   gameTurn.save({\n     *     player: \"Jake Cutter\",\n     *     diceRoll: 2\n     *   }).then(function(gameTurnAgain) {\n     *     // The save was successful.\n     *   }, function(error) {\n     *     // The save failed.  Error is an instance of Parse.Error.\n     *   });</pre>\n     *\n     * @param {String|Object|null} [attrs]\n     * Valid options are:<ul>\n     *   <li>`Object` - Key/value pairs to update on the object.</li>\n     *   <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     *   <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     *\n     * @param {String|Object} [options]\n     * <ul>\n     *   <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     *   <li>`Object` Options - Valid options are:\n     *     <ul>\n     *       <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *       <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *       <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     *     </ul>\n     *   </li>\n     * </ul>\n     *\n     * @param {Object} [options]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *       be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * </ul>\n     *\n     * @return {Promise} A promise that is fulfilled when the save\n     *     completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (arg1\n    /*: ?string | { [attr: string]: mixed }*/\n    , arg2\n    /*: SaveOptions | mixed*/\n    , arg3\n    /*:: ?: SaveOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this = this;\n\n      var attrs;\n      var options;\n\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      } // TODO: safely remove me\n      // Support save({ success: function() {}, error: function() {} })\n\n\n      if (!options && attrs) {\n        options = {};\n\n        if (typeof attrs.success === 'function') {\n          options.success = attrs.success;\n          delete attrs.success;\n        }\n\n        if (typeof attrs.error === 'function') {\n          options.error = attrs.error;\n          delete attrs.error;\n        }\n      }\n\n      if (attrs) {\n        var validation = this.validate(attrs);\n\n        if (validation) {\n          if (options && typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return _promise.default.reject(validation);\n        }\n\n        this.set(attrs, options);\n      }\n\n      options = options || {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @return {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @return {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context4.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n\n              case 6:\n                pin = _context4.sent;\n                return _context4.abrupt(\"return\", pin.length > 0);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {String} name Name of Pin.\n     * @return {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {String} name Name of Pin.\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @return {Promise} A promise that is fulfilled when the fetch completes.\n     */\n\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context5.next = 6;\n                return localDatastore._serializeObject(objectKey);\n\n              case 6:\n                pinned = _context5.sent;\n\n                if (pinned) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                throw new Error('Cannot fetch an unsaved ParseObject');\n\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n\n                this._finishFetch(result.toJSON());\n\n                return _context5.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods **/\n\n  }, {\n    key: \"attributes\",\n\n    /** Prototype getters / setters **/\n    get: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\n     * The first time this object was saved on the server.\n     * @property createdAt\n     * @type Date\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\n     * The last time this object was updated on the server.\n     * @property updatedAt\n     * @type Date\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n  }], [{\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.clearAllState();\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     */\n\n  }, {\n    key: \"fetchAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {String|Array<string|Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     */\n\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {String|Array<string|Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     */\n\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {Object} options\n     * @static\n     */\n\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , options) {\n      options = options || {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n\n      if ((0, _isArray.default)(options.include)) {\n        var _context6;\n\n        (0, _forEach.default)(_context6 = options.include).call(_context6, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n\n      return include;\n    }\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     *   <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     *       array of other Parse.Error objects. Each error object in this array\n     *       has an \"object\" property that references the object that could not be\n     *       deleted (for instance, because that object could not be found).</li>\n     *   <li>A non-aggregate Parse.Error. This indicates a serious error that\n     *       caused the delete operation to be aborted partway through (for\n     *       instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     *   Parse.Object.destroyAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were deleted.\n     *    }, (error) => {\n     *      // An error occurred while deleting one or more of the objects.\n     *      // If this is an aggregate error, then we can inspect each error\n     *      // object individually to determine the reason why a particular\n     *      // object was not deleted.\n     *      if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     *        for (var i = 0; i < error.errors.length; i++) {\n     *          console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     *            \"due to \" + error.errors[i].message);\n     *        }\n     *      } else {\n     *        console.log(\"Delete aborted because of \" + error.message);\n     *      }\n     *   });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {Object} options\n     * @static\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>batchSize: Number of objects to process per request\n     * </ul>\n     * @return {Promise} A promise that is fulfilled when the destroyAll\n     *     completes.\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.saveAll([object1, object2, ...])\n     *    .then((list) => {\n     *       // All the objects were saved.\n     *    }, (error) => {\n     *       // An error occurred while saving one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {Object} options\n     * @static\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>batchSize: Number of objects to process per request\n     * </ul>\n     */\n\n  }, {\n    key: \"saveAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {String} id The ID of the object to create a reference to.\n     * @static\n     * @return {Parse.Object} A Parse.Object reference.\n     */\n\n  }, {\n    key: \"createWithoutData\",\n    value: function (id\n    /*: string*/\n    ) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     * @param {Object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @static\n     * @return {Parse.Object} A Parse.Object reference\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function (json\n    /*: any*/\n    , override\n    /*:: ?: boolean*/\n    ) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor() : new ParseObject(json.className);\n      var otherAttributes = {};\n\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n        }\n      }\n\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n\n        var preserved = null;\n\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n\n        o._clearServerData();\n\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n\n      o._finishFetch(otherAttributes);\n\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n\n      return o;\n    }\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     * @param {String} className The class name of the subclass\n     * @param {Class} constructor The subclass\n     */\n\n  }, {\n    key: \"registerSubclass\",\n    value: function (className\n    /*: string*/\n    , constructor\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n\n      classMap[className] = constructor;\n\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {String} className The name of the Parse class backing this model.\n     * @param {Object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {Object} classProps Class properties to add the class returned from\n     *     this method.\n     * @return {Class} A new subclass of Parse.Object.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (className\n    /*: any*/\n    , protoProps\n    /*: any*/\n    , classProps\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error('Parse.Object.extend\\'s first argument should be the className.');\n        }\n      }\n\n      var adjustedClassName = className;\n\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n\n      var parentProto = ParseObject.prototype;\n\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error('Can\\'t create an invalid Parse Object');\n          }\n        }\n      };\n\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     * @static\n     */\n\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     * @static\n     */\n\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @return {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {String} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @return {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {String} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjects\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {String} name Name of Pin.\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\n\nvar DefaultController = {\n  fetch: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , forceFetch\n  /*: boolean*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n\n        if (!className) {\n          className = el.className;\n        }\n\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n\n        results.push(el);\n      });\n\n      if (error) {\n        return _promise.default.reject(error);\n      }\n\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n\n      if (options && options.include) {\n        query.include(options.include);\n      }\n\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then(\n      /*#__PURE__*/\n      function () {\n        var _ref = (0, _asyncToGenerator2.default)(\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee4(objects) {\n          var idMap, i, obj, _i, _obj, id, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, object;\n\n          return _regenerator.default.wrap(function (_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context7.next = 11;\n                    break;\n                  }\n\n                  obj = objs[i];\n\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context7.next = 8;\n                    break;\n                  }\n\n                  if (!forceFetch) {\n                    _context7.next = 8;\n                    break;\n                  }\n\n                  return _context7.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n\n                case 8:\n                  i++;\n                  _context7.next = 3;\n                  break;\n\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n\n                        _obj._finishFetch(idMap[id].toJSON());\n\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n\n                  _iteratorNormalCompletion2 = true;\n                  _didIteratorError2 = false;\n                  _iteratorError2 = undefined;\n                  _context7.prev = 15;\n                  _iterator2 = (0, _getIterator2.default)(results);\n\n                case 17:\n                  if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                    _context7.next = 24;\n                    break;\n                  }\n\n                  object = _step2.value;\n                  _context7.next = 21;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 21:\n                  _iteratorNormalCompletion2 = true;\n                  _context7.next = 17;\n                  break;\n\n                case 24:\n                  _context7.next = 30;\n                  break;\n\n                case 26:\n                  _context7.prev = 26;\n                  _context7.t0 = _context7[\"catch\"](15);\n                  _didIteratorError2 = true;\n                  _iteratorError2 = _context7.t0;\n\n                case 30:\n                  _context7.prev = 30;\n                  _context7.prev = 31;\n\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n\n                case 33:\n                  _context7.prev = 33;\n\n                  if (!_didIteratorError2) {\n                    _context7.next = 36;\n                    break;\n                  }\n\n                  throw _iteratorError2;\n\n                case 36:\n                  return _context7.finish(33);\n\n                case 37:\n                  return _context7.finish(30);\n\n                case 38:\n                  return _context7.abrupt(\"return\", _promise.default.resolve(results));\n\n                case 39:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee4, null, [[15, 26, 30, 38], [31,, 33, 37]]);\n        }));\n\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else {\n      var RESTController = _CoreManager.default.getRESTController();\n\n      var params = {};\n\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = (0, _asyncToGenerator2.default)(\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee5(response) {\n          return _regenerator.default.wrap(function (_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  if (target instanceof ParseObject) {\n                    target._clearPendingOps();\n\n                    target._clearServerData();\n\n                    target._finishFetch(response);\n                  }\n\n                  _context8.next = 3;\n                  return localDatastore._updateObjectIfPinned(target);\n\n                case 3:\n                  return _context8.abrupt(\"return\", target);\n\n                case 4:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  },\n  destroy: function () {\n    var _destroy = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee8(target\n    /*: ParseObject | Array<ParseObject>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : DEFAULT_BATCH_SIZE;\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n\n              if (!(0, _isArray.default)(target)) {\n                _context11.next = 15;\n                break;\n              }\n\n              if (!(target.length < 1)) {\n                _context11.next = 6;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", _promise.default.resolve([]));\n\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n\n                batches[batches.length - 1].push(obj);\n\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      return {\n                        method: 'DELETE',\n                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                        err.object = batch[i];\n                        errors.push(err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context11.abrupt(\"return\", deleteCompleted.then(\n              /*#__PURE__*/\n              (0, _asyncToGenerator2.default)(\n              /*#__PURE__*/\n              _regenerator.default.mark(function _callee6() {\n                var aggregate, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, object;\n\n                return _regenerator.default.wrap(function (_context9) {\n                  while (1) {\n                    switch (_context9.prev = _context9.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context9.next = 4;\n                          break;\n                        }\n\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context9.abrupt(\"return\", _promise.default.reject(aggregate));\n\n                      case 4:\n                        _iteratorNormalCompletion3 = true;\n                        _didIteratorError3 = false;\n                        _iteratorError3 = undefined;\n                        _context9.prev = 7;\n                        _iterator3 = (0, _getIterator2.default)(target);\n\n                      case 9:\n                        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                          _context9.next = 16;\n                          break;\n                        }\n\n                        object = _step3.value;\n                        _context9.next = 13;\n                        return localDatastore._destroyObjectIfPinned(object);\n\n                      case 13:\n                        _iteratorNormalCompletion3 = true;\n                        _context9.next = 9;\n                        break;\n\n                      case 16:\n                        _context9.next = 22;\n                        break;\n\n                      case 18:\n                        _context9.prev = 18;\n                        _context9.t0 = _context9[\"catch\"](7);\n                        _didIteratorError3 = true;\n                        _iteratorError3 = _context9.t0;\n\n                      case 22:\n                        _context9.prev = 22;\n                        _context9.prev = 23;\n\n                        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                          _iterator3.return();\n                        }\n\n                      case 25:\n                        _context9.prev = 25;\n\n                        if (!_didIteratorError3) {\n                          _context9.next = 28;\n                          break;\n                        }\n\n                        throw _iteratorError3;\n\n                      case 28:\n                        return _context9.finish(25);\n\n                      case 29:\n                        return _context9.finish(22);\n\n                      case 30:\n                        return _context9.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 31:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }\n                }, _callee6, null, [[7, 18, 22, 30], [23,, 25, 29]]);\n              }))));\n\n            case 15:\n              if (!(target instanceof ParseObject)) {\n                _context11.next = 17;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then(\n              /*#__PURE__*/\n              (0, _asyncToGenerator2.default)(\n              /*#__PURE__*/\n              _regenerator.default.mark(function _callee7() {\n                return _regenerator.default.wrap(function (_context10) {\n                  while (1) {\n                    switch (_context10.prev = _context10.next) {\n                      case 0:\n                        _context10.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n\n                      case 2:\n                        return _context10.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 3:\n                      case \"end\":\n                        return _context10.stop();\n                    }\n                  }\n                }, _callee7);\n              }))));\n\n            case 17:\n              _context11.next = 19;\n              return localDatastore._destroyObjectIfPinned(target);\n\n            case 19:\n              return _context11.abrupt(\"return\", _promise.default.resolve(target));\n\n            case 20:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function () {\n      return _destroy.apply(this, arguments);\n    };\n  }(),\n  save: function (target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var batchSize = options && options.batchSize ? options.batchSize : DEFAULT_BATCH_SIZE;\n\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    var mapIdForPin = {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var unsaved = (0, _concat.default)(target).call(target);\n\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n\n      unsaved = (0, _unique.default)(unsaved);\n\n      var filesSaved = _promise.default.resolve();\n\n      var pending\n      /*: Array<ParseObject>*/\n      = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved = filesSaved.then(function () {\n            return el.save();\n          });\n        } else if (el instanceof ParseObject) {\n          pending.push(el);\n        }\n      });\n      return filesSaved.then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n\n          var res, rej;\n          var batchReturned = new _promise.default(function (resolve, reject) {\n            res = resolve;\n            rej = reject;\n          });\n          batchReturned.resolve = res;\n          batchReturned.reject = rej;\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var res, rej;\n            var ready = new _promise.default(function (resolve, reject) {\n              res = resolve;\n              rej = reject;\n            });\n            ready.resolve = res;\n            ready.reject = rej;\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then(\n        /*#__PURE__*/\n        (0, _asyncToGenerator2.default)(\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee9() {\n          var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, object;\n\n          return _regenerator.default.wrap(function (_context12) {\n            while (1) {\n              switch (_context12.prev = _context12.next) {\n                case 0:\n                  if (!objectError) {\n                    _context12.next = 2;\n                    break;\n                  }\n\n                  return _context12.abrupt(\"return\", _promise.default.reject(objectError));\n\n                case 2:\n                  _iteratorNormalCompletion4 = true;\n                  _didIteratorError4 = false;\n                  _iteratorError4 = undefined;\n                  _context12.prev = 5;\n                  _iterator4 = (0, _getIterator2.default)(target);\n\n                case 7:\n                  if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {\n                    _context12.next = 16;\n                    break;\n                  }\n\n                  object = _step4.value;\n                  _context12.next = 11;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n\n                case 11:\n                  _context12.next = 13;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 13:\n                  _iteratorNormalCompletion4 = true;\n                  _context12.next = 7;\n                  break;\n\n                case 16:\n                  _context12.next = 22;\n                  break;\n\n                case 18:\n                  _context12.prev = 18;\n                  _context12.t0 = _context12[\"catch\"](5);\n                  _didIteratorError4 = true;\n                  _iteratorError4 = _context12.t0;\n\n                case 22:\n                  _context12.prev = 22;\n                  _context12.prev = 23;\n\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n\n                case 25:\n                  _context12.prev = 25;\n\n                  if (!_didIteratorError4) {\n                    _context12.next = 28;\n                    break;\n                  }\n\n                  throw _iteratorError4;\n\n                case 28:\n                  return _context12.finish(25);\n\n                case 29:\n                  return _context12.finish(22);\n\n                case 30:\n                  return _context12.abrupt(\"return\", _promise.default.resolve(target));\n\n                case 31:\n                case \"end\":\n                  return _context12.stop();\n              }\n            }\n          }, _callee9, null, [[5, 18, 22, 30], [23,, 25, 29]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      // copying target lets Flow guarantee the pointer isn't modified elsewhere\n      var localId = target._localId;\n      var targetCopy = target;\n\n      var task = function () {\n        var params = targetCopy._getSaveParams();\n\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n\n          return _promise.default.reject(error);\n        });\n      };\n\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then(\n      /*#__PURE__*/\n      (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee10() {\n        return _regenerator.default.wrap(function (_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n\n              case 2:\n                _context13.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n\n              case 4:\n                return _context13.abrupt(\"return\", target);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee10);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n\n    return _promise.default.resolve();\n  }\n};\n\n_CoreManager.default.setObjectController(DefaultController);\n\nvar _default = ParseObject;\nexports.default = _default;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/node_modules/parse/lib/browser/ParseObject.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","_Object$defineProperty2","exports","value","default","_map","_find","_defineProperty2","_create","_freeze","_promise","_isArray","_getIterator2","_regenerator","_asyncToGenerator2","_concat","_includes","_stringify","_forEach","_keys","_typeof2","_classCallCheck2","_createClass2","_defineProperty3","_indexOf","_CoreManager","_canBeSerialized","_decode","_encode","_escape2","_ParseACL","_parseDate","_ParseError","_ParseFile","_promiseUtils","_LocalDatastoreUtils","_ParseOp","_ParseQuery","_ParseRelation","SingleInstanceStateController","_unique","UniqueInstanceStateController","_unsavedChildren","uuidv4","DEFAULT_BATCH_SIZE","classMap","objectCount","singleInstance","get","setObjectStateController","getServerUrlPath","serverUrl","length","url","replace","substr","call","ParseObject","className","attributes","options","initialize","apply","arguments","toSet","_objCount","_attr","set","Error","key","id","_localId","localId","_getId","stateController","getObjectStateController","getServerData","_getStateIdentifier","serverData","_getServerData","unset","_attr2","undefined","setServerData","getPendingOps","keysToClear","pending","_getPendingOps","latest","keys","objectCache","getObjectCache","dirty","_attr3","val","json","stringified","e","seen","toJSON","__type","dirtyObjects","_getDirtyObjectAttributes","attr","isDotNotation","i","field","fieldName","split","SetOp","method","body","_getSaveJSON","path","objectId","initializeState","decoded","_attr4","_ensureParentAndKey","createdAt","updatedAt","commitServerChanges","existed","state","getState","serverId","oldState","removeState","response","status","changes","popPendingState","RelationOp","applyTo","UnsetOp","_migrateId","_setExisted","mergeFirstPendingState","seenEntry","attrs","_attr5","_attr6","other","pendingOps","hasOwnProperty","_attr7","_attr8","toString","newOps","readonly","constructor","readOnlyAttributes","k","Op","__op","opFromJSON","relation","targetClassName","currentAttributes","newValues","_attr9","ignoreValidation","validation","validate","error","last","_attr10","nextOp","mergeWith","setPendingOp","amount","IncrementOp","item","AddOp","items","AddUniqueOp","RemoveOp","clone","copy","a","duplicateState","_exists","mark","_callee","query","wrap","_context","prev","next","abrupt","t0","code","OBJECT_NOT_FOUND","stop","ACL","OTHER_CAUSE","_key","test","INVALID_KEY_NAME","acl","keysToRevert","_len","Array","_key2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","done","_key3","push","err","return","_clearPendingOps","erasable","_attr11","fetchOptions","useMasterKey","sessionToken","include","_context2","_context3","controller","getObjectController","fetch","arg1","arg2","arg3","_this","success","reject","saveOptions","installationId","unsaved","cascadeSave","save","then","destroyOptions","resolve","destroy","pinAllWithName","DEFAULT_PIN","unPinAllWithName","_isPinned","_callee2","localDatastore","objectKey","pin","_context4","getLocalDatastore","isEnabled","getKeyForObject","fromPinWithName","sent","name","_fetchFromLocalDatastore","_callee3","pinned","result","_context5","_serializeObject","fromJSON","_finishFetch","estimateAttributes","clearAllState","list","queryOptions","handleIncludeOptions","fetchAll","fetchAllIfNeeded","_context6","batchSize","obj","override","o","otherAttributes","_attr12","preserved","_preserveFieldsOnFetch","_clearServerData","TypeError","protoProps","classProps","extend","adjustedClassName","parentProto","prototype","__super__","ParseObjectSubclass","enumerable","writable","configurable","prop","_prop","createWithoutData","objects","_handlePinAllWithName","_handleUnPinAllWithName","unPinWithName","PIN_PREFIX","DefaultController","target","forceFetch","objs","ids","results","el","INVALID_CLASS_NAME","MISSING_OBJECT_ID","isDataAvailable","containedIn","_limit","_ref","_callee4","idMap","_i","_obj","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","object","_context7","_updateObjectIfPinned","finish","RESTController","getRESTController","params","join","request","_ref2","_callee5","_context8","_destroy","_callee8","batches","deleteCompleted","errors","_context11","pop","batch","requests","_callee6","aggregate","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_context9","AGGREGATE_ERROR","_destroyObjectIfPinned","_callee7","_context10","mapIdForPin","returnStatus","filesSaved","objectError","continueWhile","nextPending","res","rej","batchReturned","batchReady","batchTasks","index","ready","pushPendingState","enqueueTask","responses","_status","_handleSaveResponse","serverError","_handleSaveError","when","_getSaveParams","INCORRECT_TYPE","message","_callee9","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_context12","_updateLocalIdForObject","targetCopy","task","_callee10","_context13","setObjectController","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs3/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\n\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar uuidv4 = require('uuid/v4');\n\nvar DEFAULT_BATCH_SIZE = 20; // Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\n\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\n\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\n * Creates a new model with defined attributes.\n  *\n  * <p>You won't normally call this method directly.  It is recommended that\n  * you use a subclass of <code>Parse.Object</code> instead, created by calling\n  * <code>extend</code>.</p>\n  *\n  * <p>However, if you don't want to use a subclass, or aren't sure which\n  * subclass is appropriate, you can use this form:<pre>\n  *     var object = new Parse.Object(\"ClassName\");\n  * </pre>\n  * That is basically equivalent to:<pre>\n  *     var MyClass = Parse.Object.extend(\"ClassName\");\n  *     var object = new MyClass();\n  * </pre></p>\n  *\n * @alias Parse.Object\n */\n\n\nvar ParseObject =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {String} className The class name for the object\n   * @param {Object} attributes The initial set of data to store in the object.\n   * @param {Object} options The options for this object instance.\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/\n  , attributes\n  /*:: ?: { [attr: string]: mixed }*/\n  , options\n  /*:: ?: { ignoreValidation: boolean }*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n\n    var toSet = null;\n    this._objCount = objectCount++;\n\n    if (typeof className === 'string') {\n      this.className = className;\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error('Can\\'t create an invalid Parse Object');\n    }\n  }\n  /**\n   * The ID of this object, unique within its class.\n   * @property id\n   * @type String\n   */\n\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"_getId\",\n\n    /** Private methods **/\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     */\n    value: function ()\n    /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     */\n\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function ()\n    /*: ParseObject | {id: string, className: string}*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n\n        if (!id) {\n          id = this._getId();\n        }\n\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n\n      var unset = {};\n\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function ()\n    /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear\n    /*:: ?: Array<string>*/\n    ) {\n      var pending = this._getPendingOps();\n\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen\n    /*:: ?: Array<any>*/\n    )\n    /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/\n      = this.toJSON(seen);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      var json = {};\n\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function ()\n    /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n\n      var body = this._getSaveJSON();\n\n      var path = 'classes/' + this.className;\n\n      if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData\n    /*: AttributeMap*/\n    ) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed\n    /*: boolean*/\n    ) {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId\n    /*: string*/\n    ) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response\n    /*: AttributeMap*/\n    , status\n    /*: number*/\n    ) {\n      var changes = {};\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response)) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          changes[attr] = (0, _decode.default)(response[attr]);\n\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n\n      this._migrateId(response.objectId);\n\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n    /** Public methods **/\n\n  }, {\n    key: \"initialize\",\n    value: function () {} // NOOP\n\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     * @return {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function (seen\n    /*: Array<any> | void*/\n    )\n    /*: AttributeMap*/\n    {\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen);\n        }\n      }\n\n      var pending = this._getPendingOps();\n\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON();\n      }\n\n      if (this.id) {\n        json.objectId = this.id;\n      }\n\n      return json;\n    }\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     * @param {Object} other - An other object ot compare\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     * @param {String} attr An attribute name (optional).\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"dirty\",\n    value: function (attr\n    /*:: ?: string*/\n    )\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n\n      var pendingOps = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     * @return {String[]}\n     */\n\n  }, {\n    key: \"dirtyKeys\",\n    value: function ()\n    /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n\n      var keys = {};\n\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n\n      return (0, _keys.default)(keys);\n    }\n    /**\n     * Returns true if the object has been fetched.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isDataAvailable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var serverData = this._getServerData();\n\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     * @return {Pointer}\n     */\n\n  }, {\n    key: \"toPointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\n     * Gets the value of an attribute.\n     * @param {String} attr The string name of an attribute.\n     */\n\n  }, {\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets a relation on the given class for the attribute.\n     * @param String attr The attribute to get the relation for.\n     * @return {Parse.Relation}\n     */\n\n  }, {\n    key: \"relation\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n\n        value._ensureParentAndKey(this, attr);\n\n        return value;\n      }\n\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     * @param {String} attr The string name of an attribute.\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var val = this.attributes[attr];\n\n      if (val == null) {\n        return '';\n      }\n\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n\n        val = val.toString();\n      }\n\n      return (0, _escape2.default)(val);\n    }\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     * @param {String} attr The string name of the attribute.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: boolean*/\n    {\n      var attributes = this.attributes;\n\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n\n      return false;\n    }\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {String} key The key to set.\n     * @param {} value The value to give it.\n     * @param {Object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @return {(ParseObject|Boolean)} true if the set succeeded.\n     */\n\n  }, {\n    key: \"set\",\n    value: function (key\n    /*: mixed*/\n    , value\n    /*: mixed*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n\n      options = options || {};\n      var readonly = [];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n\n      var currentAttributes = this.attributes; // Only set nested fields if exists\n\n      var serverData = this._getServerData();\n\n      if (typeof key === 'string' && (0, _includes.default)(key).call(key, '.')) {\n        var field = key.split('.')[0];\n\n        if (!serverData[field]) {\n          return this;\n        }\n      } // Calculate new values\n\n\n      var newValues = {};\n\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return false;\n        }\n      } // Consolidate Ops\n\n\n      var pendingOps = this._getPendingOps();\n\n      var last = pendingOps.length - 1;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n\n      return this;\n    }\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     * @param {String} attr The string name of an attribute.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"unset\",\n    value: function (attr\n    /*: string*/\n    , options\n    /*:: ?: { [opt: string]: mixed }*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"increment\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"add\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"addUnique\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @return {(ParseObject|Boolean)}\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op} The operation, or undefined if none.\n     */\n\n  }, {\n    key: \"op\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\n     * Creates a new model with identical attributes to this one.\n     * @return {Parse.Object}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      var attributes = this.attributes;\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n\n        attributes = copy;\n      }\n\n      if (clone.set) {\n        clone.set(attributes);\n      }\n\n      return clone;\n    }\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     * @return {Parse.Object}\n     */\n\n  }, {\n    key: \"newInstance\",\n    value: function ()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      clone.id = this.id;\n\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n\n      return clone;\n    }\n    /**\n     * Returns true if this object has never been saved to Parse.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"existed\",\n    value: function ()\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        return state.existed;\n      }\n\n      return false;\n    }\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/\n      ) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.id) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                _context.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context.next = 6;\n                return query.get(this.id, options);\n\n              case 6:\n                return _context.abrupt(\"return\", true);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 13:\n                throw _context.t0;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {Object} attrs The current data to validate.\n     * @return {} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    )\n    /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns the ACL for this object.\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n\n  }, {\n    key: \"getACL\",\n    value: function ()\n    /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the ACL to be used for this object.\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {Object} options\n     * @return {(ParseObject|Boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"setACL\",\n    value: function (acl\n    /*: ParseACL*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     * @param {string} [keys] - specify which fields to revert\n     */\n\n  }, {\n    key: \"revert\",\n    value: function ()\n    /*: void*/\n    {\n      var keysToRevert;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      if (keys.length) {\n        keysToRevert = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = (0, _getIterator2.default)(keys), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _key3 = _step.value;\n\n            if (typeof _key3 === \"string\") {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error(\"Parse.Object#revert expects either no, or a list of string, arguments.\");\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\n     * Clears all attributes on a model\n     * @return {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function ()\n    /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @return {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {String|Array<string|Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     *   object.save();</pre>\n     * or<pre>\n     *   object.save(attrs);</pre>\n     * or<pre>\n     *   object.save(null, options);</pre>\n     * or<pre>\n     *   object.save(attrs, options);</pre>\n     * or<pre>\n     *   object.save(key, value, options);</pre>\n     *\n     * For example, <pre>\n     *   gameTurn.save({\n     *     player: \"Jake Cutter\",\n     *     diceRoll: 2\n     *   }).then(function(gameTurnAgain) {\n     *     // The save was successful.\n     *   }, function(error) {\n     *     // The save failed.  Error is an instance of Parse.Error.\n     *   });</pre>\n     *\n     * @param {String|Object|null} [attrs]\n     * Valid options are:<ul>\n     *   <li>`Object` - Key/value pairs to update on the object.</li>\n     *   <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     *   <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     *\n     * @param {String|Object} [options]\n     * <ul>\n     *   <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     *   <li>`Object` Options - Valid options are:\n     *     <ul>\n     *       <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *       <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *       <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     *     </ul>\n     *   </li>\n     * </ul>\n     *\n     * @param {Object} [options]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *       be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * </ul>\n     *\n     * @return {Promise} A promise that is fulfilled when the save\n     *     completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (arg1\n    /*: ?string | { [attr: string]: mixed }*/\n    , arg2\n    /*: SaveOptions | mixed*/\n    , arg3\n    /*:: ?: SaveOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this = this;\n\n      var attrs;\n      var options;\n\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      } // TODO: safely remove me\n      // Support save({ success: function() {}, error: function() {} })\n\n\n      if (!options && attrs) {\n        options = {};\n\n        if (typeof attrs.success === 'function') {\n          options.success = attrs.success;\n          delete attrs.success;\n        }\n\n        if (typeof attrs.error === 'function') {\n          options.error = attrs.error;\n          delete attrs.error;\n        }\n      }\n\n      if (attrs) {\n        var validation = this.validate(attrs);\n\n        if (validation) {\n          if (options && typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return _promise.default.reject(validation);\n        }\n\n        this.set(attrs, options);\n      }\n\n      options = options || {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @return {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @return {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @return {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context4.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n\n              case 6:\n                pin = _context4.sent;\n                return _context4.abrupt(\"return\", pin.length > 0);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {String} name Name of Pin.\n     * @return {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {String} name Name of Pin.\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @return {Promise} A promise that is fulfilled when the fetch completes.\n     */\n\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context5.next = 6;\n                return localDatastore._serializeObject(objectKey);\n\n              case 6:\n                pinned = _context5.sent;\n\n                if (pinned) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                throw new Error('Cannot fetch an unsaved ParseObject');\n\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n\n                this._finishFetch(result.toJSON());\n\n                return _context5.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods **/\n\n  }, {\n    key: \"attributes\",\n\n    /** Prototype getters / setters **/\n    get: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\n     * The first time this object was saved on the server.\n     * @property createdAt\n     * @type Date\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\n     * The last time this object was updated on the server.\n     * @property updatedAt\n     * @type Date\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n  }], [{\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.clearAllState();\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     */\n\n  }, {\n    key: \"fetchAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {String|Array<string|Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     */\n\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {String|Array<string|Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {Object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     */\n\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String|Array<string|Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {Object} options\n     * @static\n     */\n\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , options) {\n      options = options || {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n\n      if ((0, _isArray.default)(options.include)) {\n        var _context6;\n\n        (0, _forEach.default)(_context6 = options.include).call(_context6, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n\n      return include;\n    }\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     *   <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     *       array of other Parse.Error objects. Each error object in this array\n     *       has an \"object\" property that references the object that could not be\n     *       deleted (for instance, because that object could not be found).</li>\n     *   <li>A non-aggregate Parse.Error. This indicates a serious error that\n     *       caused the delete operation to be aborted partway through (for\n     *       instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     *   Parse.Object.destroyAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were deleted.\n     *    }, (error) => {\n     *      // An error occurred while deleting one or more of the objects.\n     *      // If this is an aggregate error, then we can inspect each error\n     *      // object individually to determine the reason why a particular\n     *      // object was not deleted.\n     *      if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     *        for (var i = 0; i < error.errors.length; i++) {\n     *          console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     *            \"due to \" + error.errors[i].message);\n     *        }\n     *      } else {\n     *        console.log(\"Delete aborted because of \" + error.message);\n     *      }\n     *   });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {Object} options\n     * @static\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>batchSize: Number of objects to process per request\n     * </ul>\n     * @return {Promise} A promise that is fulfilled when the destroyAll\n     *     completes.\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.saveAll([object1, object2, ...])\n     *    .then((list) => {\n     *       // All the objects were saved.\n     *    }, (error) => {\n     *       // An error occurred while saving one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {Object} options\n     * @static\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>batchSize: Number of objects to process per request\n     * </ul>\n     */\n\n  }, {\n    key: \"saveAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {String} id The ID of the object to create a reference to.\n     * @static\n     * @return {Parse.Object} A Parse.Object reference.\n     */\n\n  }, {\n    key: \"createWithoutData\",\n    value: function (id\n    /*: string*/\n    ) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     * @param {Object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @static\n     * @return {Parse.Object} A Parse.Object reference\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function (json\n    /*: any*/\n    , override\n    /*:: ?: boolean*/\n    ) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor() : new ParseObject(json.className);\n      var otherAttributes = {};\n\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n        }\n      }\n\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n\n        var preserved = null;\n\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n\n        o._clearServerData();\n\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n\n      o._finishFetch(otherAttributes);\n\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n\n      return o;\n    }\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     * @param {String} className The class name of the subclass\n     * @param {Class} constructor The subclass\n     */\n\n  }, {\n    key: \"registerSubclass\",\n    value: function (className\n    /*: string*/\n    , constructor\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n\n      classMap[className] = constructor;\n\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {String} className The name of the Parse class backing this model.\n     * @param {Object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {Object} classProps Class properties to add the class returned from\n     *     this method.\n     * @return {Class} A new subclass of Parse.Object.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (className\n    /*: any*/\n    , protoProps\n    /*: any*/\n    , classProps\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error('Parse.Object.extend\\'s first argument should be the className.');\n        }\n      }\n\n      var adjustedClassName = className;\n\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n\n      var parentProto = ParseObject.prototype;\n\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error('Can\\'t create an invalid Parse Object');\n          }\n        }\n      };\n\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     * @static\n     */\n\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     * @static\n     */\n\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @return {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {String} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @return {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {String} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjects\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {String} name Name of Pin.\n     * @return {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\n\nvar DefaultController = {\n  fetch: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , forceFetch\n  /*: boolean*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n\n        if (!className) {\n          className = el.className;\n        }\n\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n\n        results.push(el);\n      });\n\n      if (error) {\n        return _promise.default.reject(error);\n      }\n\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n\n      if (options && options.include) {\n        query.include(options.include);\n      }\n\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then(\n      /*#__PURE__*/\n      function () {\n        var _ref = (0, _asyncToGenerator2.default)(\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee4(objects) {\n          var idMap, i, obj, _i, _obj, id, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, object;\n\n          return _regenerator.default.wrap(function (_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context7.next = 11;\n                    break;\n                  }\n\n                  obj = objs[i];\n\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context7.next = 8;\n                    break;\n                  }\n\n                  if (!forceFetch) {\n                    _context7.next = 8;\n                    break;\n                  }\n\n                  return _context7.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n\n                case 8:\n                  i++;\n                  _context7.next = 3;\n                  break;\n\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n\n                        _obj._finishFetch(idMap[id].toJSON());\n\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n\n                  _iteratorNormalCompletion2 = true;\n                  _didIteratorError2 = false;\n                  _iteratorError2 = undefined;\n                  _context7.prev = 15;\n                  _iterator2 = (0, _getIterator2.default)(results);\n\n                case 17:\n                  if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                    _context7.next = 24;\n                    break;\n                  }\n\n                  object = _step2.value;\n                  _context7.next = 21;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 21:\n                  _iteratorNormalCompletion2 = true;\n                  _context7.next = 17;\n                  break;\n\n                case 24:\n                  _context7.next = 30;\n                  break;\n\n                case 26:\n                  _context7.prev = 26;\n                  _context7.t0 = _context7[\"catch\"](15);\n                  _didIteratorError2 = true;\n                  _iteratorError2 = _context7.t0;\n\n                case 30:\n                  _context7.prev = 30;\n                  _context7.prev = 31;\n\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n\n                case 33:\n                  _context7.prev = 33;\n\n                  if (!_didIteratorError2) {\n                    _context7.next = 36;\n                    break;\n                  }\n\n                  throw _iteratorError2;\n\n                case 36:\n                  return _context7.finish(33);\n\n                case 37:\n                  return _context7.finish(30);\n\n                case 38:\n                  return _context7.abrupt(\"return\", _promise.default.resolve(results));\n\n                case 39:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee4, null, [[15, 26, 30, 38], [31,, 33, 37]]);\n        }));\n\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else {\n      var RESTController = _CoreManager.default.getRESTController();\n\n      var params = {};\n\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = (0, _asyncToGenerator2.default)(\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee5(response) {\n          return _regenerator.default.wrap(function (_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  if (target instanceof ParseObject) {\n                    target._clearPendingOps();\n\n                    target._clearServerData();\n\n                    target._finishFetch(response);\n                  }\n\n                  _context8.next = 3;\n                  return localDatastore._updateObjectIfPinned(target);\n\n                case 3:\n                  return _context8.abrupt(\"return\", target);\n\n                case 4:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  },\n  destroy: function () {\n    var _destroy = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee8(target\n    /*: ParseObject | Array<ParseObject>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : DEFAULT_BATCH_SIZE;\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n\n              if (!(0, _isArray.default)(target)) {\n                _context11.next = 15;\n                break;\n              }\n\n              if (!(target.length < 1)) {\n                _context11.next = 6;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", _promise.default.resolve([]));\n\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n\n                batches[batches.length - 1].push(obj);\n\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      return {\n                        method: 'DELETE',\n                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                        err.object = batch[i];\n                        errors.push(err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context11.abrupt(\"return\", deleteCompleted.then(\n              /*#__PURE__*/\n              (0, _asyncToGenerator2.default)(\n              /*#__PURE__*/\n              _regenerator.default.mark(function _callee6() {\n                var aggregate, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, object;\n\n                return _regenerator.default.wrap(function (_context9) {\n                  while (1) {\n                    switch (_context9.prev = _context9.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context9.next = 4;\n                          break;\n                        }\n\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context9.abrupt(\"return\", _promise.default.reject(aggregate));\n\n                      case 4:\n                        _iteratorNormalCompletion3 = true;\n                        _didIteratorError3 = false;\n                        _iteratorError3 = undefined;\n                        _context9.prev = 7;\n                        _iterator3 = (0, _getIterator2.default)(target);\n\n                      case 9:\n                        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                          _context9.next = 16;\n                          break;\n                        }\n\n                        object = _step3.value;\n                        _context9.next = 13;\n                        return localDatastore._destroyObjectIfPinned(object);\n\n                      case 13:\n                        _iteratorNormalCompletion3 = true;\n                        _context9.next = 9;\n                        break;\n\n                      case 16:\n                        _context9.next = 22;\n                        break;\n\n                      case 18:\n                        _context9.prev = 18;\n                        _context9.t0 = _context9[\"catch\"](7);\n                        _didIteratorError3 = true;\n                        _iteratorError3 = _context9.t0;\n\n                      case 22:\n                        _context9.prev = 22;\n                        _context9.prev = 23;\n\n                        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                          _iterator3.return();\n                        }\n\n                      case 25:\n                        _context9.prev = 25;\n\n                        if (!_didIteratorError3) {\n                          _context9.next = 28;\n                          break;\n                        }\n\n                        throw _iteratorError3;\n\n                      case 28:\n                        return _context9.finish(25);\n\n                      case 29:\n                        return _context9.finish(22);\n\n                      case 30:\n                        return _context9.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 31:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }\n                }, _callee6, null, [[7, 18, 22, 30], [23,, 25, 29]]);\n              }))));\n\n            case 15:\n              if (!(target instanceof ParseObject)) {\n                _context11.next = 17;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then(\n              /*#__PURE__*/\n              (0, _asyncToGenerator2.default)(\n              /*#__PURE__*/\n              _regenerator.default.mark(function _callee7() {\n                return _regenerator.default.wrap(function (_context10) {\n                  while (1) {\n                    switch (_context10.prev = _context10.next) {\n                      case 0:\n                        _context10.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n\n                      case 2:\n                        return _context10.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 3:\n                      case \"end\":\n                        return _context10.stop();\n                    }\n                  }\n                }, _callee7);\n              }))));\n\n            case 17:\n              _context11.next = 19;\n              return localDatastore._destroyObjectIfPinned(target);\n\n            case 19:\n              return _context11.abrupt(\"return\", _promise.default.resolve(target));\n\n            case 20:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function () {\n      return _destroy.apply(this, arguments);\n    };\n  }(),\n  save: function (target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var batchSize = options && options.batchSize ? options.batchSize : DEFAULT_BATCH_SIZE;\n\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    var mapIdForPin = {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var unsaved = (0, _concat.default)(target).call(target);\n\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n\n      unsaved = (0, _unique.default)(unsaved);\n\n      var filesSaved = _promise.default.resolve();\n\n      var pending\n      /*: Array<ParseObject>*/\n      = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved = filesSaved.then(function () {\n            return el.save();\n          });\n        } else if (el instanceof ParseObject) {\n          pending.push(el);\n        }\n      });\n      return filesSaved.then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n\n          var res, rej;\n          var batchReturned = new _promise.default(function (resolve, reject) {\n            res = resolve;\n            rej = reject;\n          });\n          batchReturned.resolve = res;\n          batchReturned.reject = rej;\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var res, rej;\n            var ready = new _promise.default(function (resolve, reject) {\n              res = resolve;\n              rej = reject;\n            });\n            ready.resolve = res;\n            ready.reject = rej;\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then(\n        /*#__PURE__*/\n        (0, _asyncToGenerator2.default)(\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee9() {\n          var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, object;\n\n          return _regenerator.default.wrap(function (_context12) {\n            while (1) {\n              switch (_context12.prev = _context12.next) {\n                case 0:\n                  if (!objectError) {\n                    _context12.next = 2;\n                    break;\n                  }\n\n                  return _context12.abrupt(\"return\", _promise.default.reject(objectError));\n\n                case 2:\n                  _iteratorNormalCompletion4 = true;\n                  _didIteratorError4 = false;\n                  _iteratorError4 = undefined;\n                  _context12.prev = 5;\n                  _iterator4 = (0, _getIterator2.default)(target);\n\n                case 7:\n                  if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {\n                    _context12.next = 16;\n                    break;\n                  }\n\n                  object = _step4.value;\n                  _context12.next = 11;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n\n                case 11:\n                  _context12.next = 13;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 13:\n                  _iteratorNormalCompletion4 = true;\n                  _context12.next = 7;\n                  break;\n\n                case 16:\n                  _context12.next = 22;\n                  break;\n\n                case 18:\n                  _context12.prev = 18;\n                  _context12.t0 = _context12[\"catch\"](5);\n                  _didIteratorError4 = true;\n                  _iteratorError4 = _context12.t0;\n\n                case 22:\n                  _context12.prev = 22;\n                  _context12.prev = 23;\n\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n\n                case 25:\n                  _context12.prev = 25;\n\n                  if (!_didIteratorError4) {\n                    _context12.next = 28;\n                    break;\n                  }\n\n                  throw _iteratorError4;\n\n                case 28:\n                  return _context12.finish(25);\n\n                case 29:\n                  return _context12.finish(22);\n\n                case 30:\n                  return _context12.abrupt(\"return\", _promise.default.resolve(target));\n\n                case 31:\n                case \"end\":\n                  return _context12.stop();\n              }\n            }\n          }, _callee9, null, [[5, 18, 22, 30], [23,, 25, 29]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      // copying target lets Flow guarantee the pointer isn't modified elsewhere\n      var localId = target._localId;\n      var targetCopy = target;\n\n      var task = function () {\n        var params = targetCopy._getSaveParams();\n\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n\n          return _promise.default.reject(error);\n        });\n      };\n\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then(\n      /*#__PURE__*/\n      (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee10() {\n        return _regenerator.default.wrap(function (_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n\n              case 2:\n                _context13.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n\n              case 4:\n                return _context13.abrupt(\"return\", target);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee10);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n\n    return _promise.default.resolve();\n  }\n};\n\n_CoreManager.default.setObjectController(DefaultController);\n\nvar _default = ParseObject;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}