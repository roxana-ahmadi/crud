{"ast":null,"code":"var _jsxFileName = \"/home/roxana/React-Project/crud/src/App.jsx\";\nimport React from \"react\";\nimport TableView from \"./components/table/TableView\";\nimport Parse from \"parse\";\nimport { Map } from \"immutable\"; // const fields = Map({\n//   name: \"string\",\n//   id: \"number\",\n//   date: \"time\",\n//   boolean: \"boolean\"\n// });\n// const constraints = Map({\n//   string: [\n//     \"Contains\",\n//     \"StartsWith\",\n//     \"EndsWith\",\n//     \"EqualTo\",\n//     \"NotEqualTo\",\n//     \"GreaterThan\",\n//     \"LessThan\",\n//     \"GreaterThanOrEqualTo\",\n//     \"LessThanOrEqualTo\",\n//     \"IsEmpty\",\n//     \"NotIsEmpty\",\n//     \"IsNull\",\n//     \"NotIsNull\"\n//   ],\n//   number: [\n//     \"EqualTo\",\n//     \"NotEqualTo\",\n//     \"GreaterThan\",\n//     \"LessThan\",\n//     \"GreaterThanOrEqualTo\",\n//     \"LessThanOrEqualTo\",\n//     \"IsNull\",\n//     \"NotIsNull\"\n//   ],\n//   time: [\n//     \"EqualTo\",\n//     \"NotEqualTo\",\n//     \"GreaterThan\",\n//     \"LessThan\",\n//     \"GreaterThanOrEqualTo\",\n//     \"LessThanOrEqualTo\",\n//     \"IsNull\",\n//     \"NotIsNull\"\n//   ],\n//   boolean: [],\n//   default: [\n//     \"EqualTo\",\n//     \"NotEqualTo\",\n//     \"GreaterThan\",\n//     \"LessThan\",\n//     \"GreaterThanOrEqualTo\",\n//     \"LessThanOrEqualTo\",\n//     \"IsNull\",\n//     \"NotIsNull\"\n//   ]\n// });\n// const ClouseQuery = Parse.Object.extend(\"ClouseQuery\");\n// const mainQuery = new Parse.Query(ClouseQuery);\n// const filterData = {\n//   op: \"and\",\n//   childs: [],\n//   mainQuery,\n//   searchResults: []\n// };\n// let tmpdata;\n// const makeMainQuery = oprandData => {\n//   let mainQuery = new Parse.Query(ClouseQuery);\n//   if (oprandData.op === \"and\") {\n//     oprandData.childs.map(item => {\n//       if (!item.childs) {\n//         mainQuery = Parse.Query.and(mainQuery, item);\n//       } else {\n//         mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n//       }\n//     });\n//   } else {\n//     oprandData.childs.map(item => {\n//       if (!item.childs) {\n//         mainQuery = Parse.Query.or(mainQuery, item);\n//       } else {\n//         mainQuery = Parse.Query.or(mainQuery, item.mainQuery);\n//       }\n//     });\n//   }\n//   filterData.mainQuery = mainQuery;\n//   tmpdata = oprandData;\n//   mainQuery.find().then(result => {console.log(result)\n//     filterData.searchResults=result});\n//   console.log(filterData.searchResults,'app')\n// };\n\nconst ClouseQuery = Parse.Object.extend(\"ClouseQuery\");\nconst mainQuery = new Parse.Query(ClouseQuery);\nconst filterData = {\n  op: \"and\",\n  childs: [],\n  mainQuery,\n  searchResults: []\n};\n\nfunction App() {\n  console.log(\"appppp\");\n  const ClouseQuery = Parse.Object.extend(\"ClouseQuery\");\n  const mainQuery = new Parse.Query(ClouseQuery);\n  const filterData = {\n    op: \"and\",\n    childs: [],\n    mainQuery,\n    searchResults: []\n  };\n  return React.createElement(TableView, {\n    filterData: filterData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/src/App.jsx"],"names":["React","TableView","Parse","Map","ClouseQuery","Object","extend","mainQuery","Query","filterData","op","childs","searchResults","App","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,WAApB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAaC,MAAb,CAAoB,aAApB,CAApB;AACA,MAAMC,SAAS,GAAG,IAAIL,KAAK,CAACM,KAAV,CAAgBJ,WAAhB,CAAlB;AAEA,MAAMK,UAAU,GAAG;AACjBC,EAAAA,EAAE,EAAE,KADa;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBJ,EAAAA,SAHiB;AAIjBK,EAAAA,aAAa,EAAE;AAJE,CAAnB;;AAOA,SAASC,GAAT,GAAe;AACbC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAMX,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAaC,MAAb,CAAoB,aAApB,CAApB;AACA,QAAMC,SAAS,GAAG,IAAIL,KAAK,CAACM,KAAV,CAAgBJ,WAAhB,CAAlB;AAEA,QAAMK,UAAU,GAAG;AACjBC,IAAAA,EAAE,EAAE,KADa;AAEjBC,IAAAA,MAAM,EAAE,EAFS;AAGjBJ,IAAAA,SAHiB;AAIjBK,IAAAA,aAAa,EAAE;AAJE,GAAnB;AAOA,SAAO,oBAAC,SAAD;AAAW,IAAA,UAAU,EAAEH,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAED,eAAeI,GAAf","sourcesContent":["import React from \"react\";\nimport TableView from \"./components/table/TableView\";\nimport Parse from \"parse\";\nimport { Map } from \"immutable\";\n\n// const fields = Map({\n//   name: \"string\",\n//   id: \"number\",\n//   date: \"time\",\n//   boolean: \"boolean\"\n// });\n\n// const constraints = Map({\n//   string: [\n//     \"Contains\",\n//     \"StartsWith\",\n//     \"EndsWith\",\n//     \"EqualTo\",\n//     \"NotEqualTo\",\n//     \"GreaterThan\",\n//     \"LessThan\",\n//     \"GreaterThanOrEqualTo\",\n//     \"LessThanOrEqualTo\",\n//     \"IsEmpty\",\n//     \"NotIsEmpty\",\n//     \"IsNull\",\n//     \"NotIsNull\"\n//   ],\n//   number: [\n//     \"EqualTo\",\n//     \"NotEqualTo\",\n//     \"GreaterThan\",\n//     \"LessThan\",\n//     \"GreaterThanOrEqualTo\",\n//     \"LessThanOrEqualTo\",\n//     \"IsNull\",\n//     \"NotIsNull\"\n//   ],\n//   time: [\n//     \"EqualTo\",\n//     \"NotEqualTo\",\n//     \"GreaterThan\",\n//     \"LessThan\",\n//     \"GreaterThanOrEqualTo\",\n//     \"LessThanOrEqualTo\",\n//     \"IsNull\",\n//     \"NotIsNull\"\n//   ],\n//   boolean: [],\n//   default: [\n//     \"EqualTo\",\n//     \"NotEqualTo\",\n//     \"GreaterThan\",\n//     \"LessThan\",\n//     \"GreaterThanOrEqualTo\",\n//     \"LessThanOrEqualTo\",\n//     \"IsNull\",\n//     \"NotIsNull\"\n//   ]\n// });\n\n// const ClouseQuery = Parse.Object.extend(\"ClouseQuery\");\n// const mainQuery = new Parse.Query(ClouseQuery);\n\n// const filterData = {\n//   op: \"and\",\n//   childs: [],\n//   mainQuery,\n//   searchResults: []\n// };\n\n// let tmpdata;\n\n// const makeMainQuery = oprandData => {\n//   let mainQuery = new Parse.Query(ClouseQuery);\n//   if (oprandData.op === \"and\") {\n//     oprandData.childs.map(item => {\n//       if (!item.childs) {\n//         mainQuery = Parse.Query.and(mainQuery, item);\n//       } else {\n//         mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n//       }\n//     });\n//   } else {\n//     oprandData.childs.map(item => {\n//       if (!item.childs) {\n//         mainQuery = Parse.Query.or(mainQuery, item);\n//       } else {\n//         mainQuery = Parse.Query.or(mainQuery, item.mainQuery);\n//       }\n//     });\n//   }\n//   filterData.mainQuery = mainQuery;\n//   tmpdata = oprandData;\n//   mainQuery.find().then(result => {console.log(result)\n//     filterData.searchResults=result});\n//   console.log(filterData.searchResults,'app')\n// };\n\nconst ClouseQuery = Parse.Object.extend(\"ClouseQuery\");\nconst mainQuery = new Parse.Query(ClouseQuery);\n\nconst filterData = {\n  op: \"and\",\n  childs: [],\n  mainQuery,\n  searchResults: []\n};\n\nfunction App() {\n  console.log(\"appppp\");\n  const ClouseQuery = Parse.Object.extend(\"ClouseQuery\");\n  const mainQuery = new Parse.Query(ClouseQuery);\n\n  const filterData = {\n    op: \"and\",\n    childs: [],\n    mainQuery,\n    searchResults: []\n  };\n\n  return <TableView filterData={filterData} />;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}