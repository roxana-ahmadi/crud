{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe, withLifecycle } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = props => props.filterData;\n\nconst addClouse = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data\n  };\n  console.log('newd', newd);\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n};\n\nconst deleteChild = ({\n  setData,\n  data\n}) => index => {\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n};\n\nconst changeOprand = ({\n  setData,\n  data\n}) => oprand => {\n  const newd = { ...data\n  };\n  newd.op = oprand;\n  setData(newd); // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData,\n  data\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data\n  };\n  newd.childs = newd.childs.concat({\n    op: 'and',\n    childs: [],\n    mainQuery: query,\n    searchResults: []\n  });\n  setData(newd); // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\nconst makeMainQuery = ({\n  setData\n}) => data => {\n  let mainQuery = new Parse.Query(ClouseQuery);\n\n  if (data.op === 'and') {\n    data.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.and(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(makeMainQuery()(item), item.mainQuery);\n      }\n    });\n  } else {\n    data.childs.map(item => {\n      if (!item.childs) {\n        mainQuery = Parse.Query.or(mainQuery, item);\n      } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  }\n\n  const newd = { ...data\n  };\n  newd.mainQuery = mainQuery;\n  mainQuery.find().then(response => {\n    newd.searchResults = response;\n    setData(newd);\n  });\n};\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'naz',\n    number: 456\n  });\n};\n\nconst oprandController = pipe(withState(init), withHandlers({\n  addClouse,\n  deleteChild,\n  changeOprand,\n  addOprand,\n  addObject\n}));\nexport default oprandController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/oprand/oprandController.js"],"names":["Parse","Record","withState","withHandlers","pipe","withLifecycle","ClouseQuery","Object","extend","init","props","filterData","addClouse","setData","data","query","Query","newd","console","log","childs","concat","deleteChild","index","filter","value","i","changeOprand","oprand","op","addOprand","mainQuery","searchResults","makeMainQuery","map","item","and","or","find","then","response","addObject","obj","save","name","number","oprandController"],"mappings":"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","sourcesContent":["\nimport Parse from 'parse';\nimport {\n  Record,\n} from 'immutable';\nimport {\n  withState, withHandlers, pipe, withLifecycle,\n} from '../../util';\n\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\n\nconst init = (props) => props.filterData;\n\nconst addClouse = ({ setData, data }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data };\n  console.log('newd', newd);\n  newd.childs = newd.childs.concat(query);\n  setData(newd);\n};\n\nconst deleteChild = ({ setData, data }) => (index) => {\n  const newd = { ...data };\n  newd.childs = newd.childs.filter((value, i) => i !== index);\n  setData(newd);\n};\n\nconst changeOprand = ({ setData, data }) => (oprand) => {\n  const newd = { ...data };\n  newd.op = oprand;\n  setData(newd);\n  // setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({ setData, data }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  const newd = { ...data };\n  newd.childs = newd.childs.concat({\n    op: 'and', childs: [], mainQuery: query, searchResults: [],\n  });\n  setData(newd);\n  // setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\n\nconst makeMainQuery = ({ setData }) => (data) => {\n  let mainQuery = new Parse.Query(ClouseQuery);\n  if (data.op === 'and') {\n    data.childs.map((item) => {\n      if (!item.childs) { mainQuery = Parse.Query.and(mainQuery, item); } else {\n        mainQuery = Parse.Query.and(makeMainQuery()(item), item.mainQuery);\n      }\n    });\n  } else {\n    data.childs.map((item) => {\n      if (!item.childs) { mainQuery = Parse.Query.or(mainQuery, item); } else {\n        mainQuery = Parse.Query.and(mainQuery, item.mainQuery);\n      }\n    });\n  }\n  const newd = { ...data };\n  newd.mainQuery = mainQuery;\n  mainQuery.find().then((response) => {\n    newd.searchResults = response;\n    setData(newd);\n  });\n};\n\nconst addObject = () => () => {\n  const obj = new Parse.Object('ClouseQuery');\n  obj.save({\n    name: 'naz',\n    number: 456,\n\n  });\n};\n\n\nconst oprandController = pipe(\n  withState(init),\n  withHandlers({\n    addClouse,\n    deleteChild,\n    changeOprand,\n    addOprand,\n\n    addObject,\n  }),\n\n);\n\nexport default oprandController;\n"]},"metadata":{},"sourceType":"module"}