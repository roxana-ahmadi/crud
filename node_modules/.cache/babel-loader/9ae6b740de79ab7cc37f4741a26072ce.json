{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/* global XMLHttpRequest, Blob */\n\n\nvar XHR = null;\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  XHR = XMLHttpRequest;\n}\n/*:: type Base64 = { base64: string };*/\n\n/*:: type Uri = { uri: string };*/\n\n/*:: type FileData = Array<number> | Base64 | Blob | Uri;*/\n\n/*:: export type FileSource = {\n  format: 'file';\n  file: Blob;\n  type: string\n} | {\n  format: 'base64';\n  base64: string;\n  type: string\n} | {\n  format: 'uri';\n  uri: string;\n  type: string\n};*/\n\n\nvar dataUriRegexp = /^data:([a-zA-Z]+\\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\\-\\/]*)?;base64,/;\n\nfunction b64Digit(number\n/*: number*/\n)\n/*: string*/\n{\n  if (number < 26) {\n    return String.fromCharCode(65 + number);\n  }\n\n  if (number < 52) {\n    return String.fromCharCode(97 + (number - 26));\n  }\n\n  if (number < 62) {\n    return String.fromCharCode(48 + (number - 52));\n  }\n\n  if (number === 62) {\n    return '+';\n  }\n\n  if (number === 63) {\n    return '/';\n  }\n\n  throw new TypeError('Tried to encode large digit ' + number + ' in base64.');\n}\n/**\n * A Parse.File is a local representation of a file that is saved to the Parse\n * cloud.\n * @alias Parse.File\n */\n\n\nvar ParseFile =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param name {String} The file's name. This will be prefixed by a unique\n   *     value once the file has finished saving. The file name must begin with\n   *     an alphanumeric character, and consist of alphanumeric characters,\n   *     periods, spaces, underscores, or dashes.\n   * @param data {Array} The data for the file, as either:\n   *     1. an Array of byte value Numbers, or\n   *     2. an Object like { base64: \"...\" } with a base64-encoded String.\n   *     3. an Object like { uri: \"...\" } with a uri String.\n   *     4. a File object selected with a file upload control. (3) only works\n   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.\n   *        For example:\n   * <pre>\n   * var fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\n   * if (fileUploadControl.files.length > 0) {\n   *   var file = fileUploadControl.files[0];\n   *   var name = \"photo.jpg\";\n   *   var parseFile = new Parse.File(name, file);\n   *   parseFile.save().then(function() {\n   *     // The file has been saved to Parse.\n   *   }, function(error) {\n   *     // The file either could not be read, or could not be saved to Parse.\n   *   });\n   * }</pre>\n   * @param type {String} Optional Content-Type header to use for the file. If\n   *     this is omitted, the content type will be inferred from the name's\n   *     extension.\n   */\n  function ParseFile(name\n  /*: string*/\n  , data\n  /*:: ?: FileData*/\n  , type\n  /*:: ?: string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseFile);\n    (0, _defineProperty2.default)(this, \"_name\", void 0);\n    (0, _defineProperty2.default)(this, \"_url\", void 0);\n    (0, _defineProperty2.default)(this, \"_source\", void 0);\n    (0, _defineProperty2.default)(this, \"_previousSave\", void 0);\n    (0, _defineProperty2.default)(this, \"_data\", void 0);\n    (0, _defineProperty2.default)(this, \"_requestTask\", void 0);\n    var specifiedType = type || '';\n    this._name = name;\n\n    if (data !== undefined) {\n      if ((0, _isArray.default)(data)) {\n        this._data = ParseFile.encodeBase64(data);\n        this._source = {\n          format: 'base64',\n          base64: this._data,\n          type: specifiedType\n        };\n      } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\n        this._source = {\n          format: 'file',\n          file: data,\n          type: specifiedType\n        };\n      } else if (data && typeof data.uri === 'string' && data.uri !== undefined) {\n        this._source = {\n          format: 'uri',\n          uri: data.uri,\n          type: specifiedType\n        };\n      } else if (data && typeof data.base64 === 'string') {\n        var base64 = data.base64;\n        var commaIndex = (0, _indexOf.default)(base64).call(base64, ',');\n\n        if (commaIndex !== -1) {\n          var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1)); // if data URI with type and charset, there will be 4 matches.\n\n          this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);\n          this._source = {\n            format: 'base64',\n            base64: this._data,\n            type: matches[1]\n          };\n        } else {\n          this._data = base64;\n          this._source = {\n            format: 'base64',\n            base64: base64,\n            type: specifiedType\n          };\n        }\n      } else {\n        throw new TypeError('Cannot create a Parse.File with that data.');\n      }\n    }\n  }\n  /**\n   * Return the data for the file, downloading it if not already present.\n   * Data is present if initialized with Byte Array, Base64 or Saved with Uri.\n   * Data is cleared if saved with File object selected with a file upload control\n   *\n   * @return {Promise} Promise that is resolve with base64 data\n   */\n\n\n  (0, _createClass2.default)(ParseFile, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee() {\n        var _this = this;\n\n        var options, controller, result;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._data) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._data);\n\n              case 2:\n                if (this._url) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error('Cannot retrieve data for unsaved ParseFile.');\n\n              case 4:\n                options = {\n                  requestTask: function (task) {\n                    return _this._requestTask = task;\n                  }\n                };\n                controller = _CoreManager.default.getFileController();\n                _context.next = 8;\n                return controller.download(this._url, options);\n\n              case 8:\n                result = _context.sent;\n                this._data = result.base64;\n                return _context.abrupt(\"return\", this._data);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _getData.apply(this, arguments);\n      };\n    }()\n    /**\n     * Gets the name of the file. Before save is called, this is the filename\n     * given by the user. After save is called, that name gets prefixed with a\n     * unique identifier.\n     * @return {String}\n     */\n\n  }, {\n    key: \"name\",\n    value: function ()\n    /*: string*/\n    {\n      return this._name;\n    }\n    /**\n     * Gets the url of the file. It is only available after you save the file or\n     * after you get the file from a Parse.Object.\n     * @param {Object} options An object to specify url options\n     * @return {String}\n     */\n\n  }, {\n    key: \"url\",\n    value: function (options\n    /*:: ?: { forceSecure?: boolean }*/\n    )\n    /*: ?string*/\n    {\n      options = options || {};\n\n      if (!this._url) {\n        return;\n      }\n\n      if (options.forceSecure) {\n        return this._url.replace(/^http:\\/\\//i, 'https://');\n      } else {\n        return this._url;\n      }\n    }\n    /**\n     * Saves the file to the Parse cloud.\n     * @param {Object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>progress: In Browser only, callback for upload progress\n     * </ul>\n     * @return {Promise} Promise that is resolved when the save finishes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    ) {\n      var _this2 = this;\n\n      options = options || {};\n\n      options.requestTask = function (task) {\n        return _this2._requestTask = task;\n      };\n\n      var controller = _CoreManager.default.getFileController();\n\n      if (!this._previousSave) {\n        if (this._source.format === 'file') {\n          this._previousSave = controller.saveFile(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._data = null;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else if (this._source.format === 'uri') {\n          this._previousSave = controller.download(this._source.uri, options).then(function (result) {\n            if (!(result && result.base64)) {\n              return {};\n            }\n\n            var newSource = {\n              format: 'base64',\n              base64: result.base64,\n              type: result.contentType\n            };\n            _this2._data = result.base64;\n            _this2._requestTask = null;\n            return controller.saveBase64(_this2._name, newSource, options);\n          }).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else {\n          this._previousSave = controller.saveBase64(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        }\n      }\n\n      if (this._previousSave) {\n        return this._previousSave;\n      }\n    }\n    /**\n     * Aborts the request if it has already been sent.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function () {\n      if (this._requestTask && typeof this._requestTask.abort === 'function') {\n        this._requestTask.abort();\n      }\n\n      this._requestTask = null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { name: ?string, url: ?string }*/\n    {\n      return {\n        __type: 'File',\n        name: this._name,\n        url: this._url\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      } // Unsaved Files are never equal, since they will be saved to different URLs\n\n\n      return other instanceof ParseFile && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== 'undefined';\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (obj)\n    /*: ParseFile*/\n    {\n      if (obj.__type !== 'File') {\n        throw new TypeError('JSON object does not represent a ParseFile');\n      }\n\n      var file = new ParseFile(obj.name);\n      file._url = obj.url;\n      return file;\n    }\n  }, {\n    key: \"encodeBase64\",\n    value: function (bytes\n    /*: Array<number>*/\n    )\n    /*: string*/\n    {\n      var chunks = [];\n      chunks.length = Math.ceil(bytes.length / 3);\n\n      for (var i = 0; i < chunks.length; i++) {\n        var b1 = bytes[i * 3];\n        var b2 = bytes[i * 3 + 1] || 0;\n        var b3 = bytes[i * 3 + 2] || 0;\n        var has2 = i * 3 + 1 < bytes.length;\n        var has3 = i * 3 + 2 < bytes.length;\n        chunks[i] = [b64Digit(b1 >> 2 & 0x3F), b64Digit(b1 << 4 & 0x30 | b2 >> 4 & 0x0F), has2 ? b64Digit(b2 << 2 & 0x3C | b3 >> 6 & 0x03) : '=', has3 ? b64Digit(b3 & 0x3F) : '='].join('');\n      }\n\n      return chunks.join('');\n    }\n  }]);\n  return ParseFile;\n}();\n\nvar DefaultController = {\n  saveFile: function (name\n  /*: string*/\n  , source\n  /*: FileSource*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    if (source.format !== 'file') {\n      throw new Error('saveFile can only be used with File-type sources.');\n    } // To directly upload a File, we use a REST-style AJAX request\n\n\n    var headers = {\n      'X-Parse-Application-ID': _CoreManager.default.get('APPLICATION_ID'),\n      'Content-Type': source.type || (source.file ? source.file.type : null)\n    };\n\n    var jsKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n\n    if (jsKey) {\n      headers['X-Parse-JavaScript-Key'] = jsKey;\n    }\n\n    var url = _CoreManager.default.get('SERVER_URL');\n\n    if (url[url.length - 1] !== '/') {\n      url += '/';\n    }\n\n    url += 'files/' + name;\n    return _CoreManager.default.getRESTController().ajax('POST', url, source.file, headers, options).then(function (res) {\n      return res.response;\n    });\n  },\n  saveBase64: function (name\n  /*: string*/\n  , source\n  /*: FileSource*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    if (source.format !== 'base64') {\n      throw new Error('saveBase64 can only be used with Base64-type sources.');\n    }\n\n    var data\n    /*: { base64: any; _ContentType?: any }*/\n    = {\n      base64: source.base64\n    };\n\n    if (source.type) {\n      data._ContentType = source.type;\n    }\n\n    return _CoreManager.default.getRESTController().request('POST', 'files/' + name, data, options);\n  },\n  download: function (uri, options) {\n    if (XHR) {\n      return this.downloadAjax(uri, options);\n    } else {\n      return _promise.default.reject('Cannot make a request: No definition of XMLHttpRequest was found.');\n    }\n  },\n  downloadAjax: function (uri, options) {\n    return new _promise.default(function (resolve, reject) {\n      var xhr = new XHR();\n      xhr.open('GET', uri, true);\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onerror = function (e) {\n        reject(e);\n      };\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState !== xhr.DONE) {\n          return;\n        }\n\n        if (!this.response) {\n          return resolve({});\n        }\n\n        var bytes = new Uint8Array(this.response);\n        resolve({\n          base64: ParseFile.encodeBase64(bytes),\n          contentType: xhr.getResponseHeader('content-type')\n        });\n      };\n\n      options.requestTask(xhr);\n      xhr.send();\n    });\n  },\n  _setXHR: function (xhr\n  /*: any*/\n  ) {\n    XHR = xhr;\n  }\n};\n\n_CoreManager.default.setFileController(DefaultController);\n\nvar _default = ParseFile;\nexports.default = _default;","map":{"version":3,"sources":["/home/roxana/React-Project/crud/node_modules/parse/lib/browser/ParseFile.js"],"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_promise","_regenerator","_asyncToGenerator2","_slice","_indexOf","_isArray","_classCallCheck2","_createClass2","_defineProperty2","_CoreManager","XHR","XMLHttpRequest","dataUriRegexp","b64Digit","number","String","fromCharCode","TypeError","ParseFile","name","data","type","specifiedType","_name","undefined","_data","encodeBase64","_source","format","base64","Blob","file","uri","commaIndex","call","matches","exec","key","_getData","mark","_callee","_this","options","controller","result","wrap","_context","prev","next","abrupt","_url","Error","requestTask","task","_requestTask","getFileController","download","sent","stop","apply","arguments","forceSecure","replace","_this2","_previousSave","saveFile","then","res","url","newSource","contentType","saveBase64","abort","__type","other","obj","bytes","chunks","length","Math","ceil","i","b1","b2","b3","has2","has3","join","DefaultController","source","headers","get","jsKey","getRESTController","ajax","response","_ContentType","request","downloadAjax","reject","resolve","xhr","open","responseType","onerror","e","onreadystatechange","readyState","DONE","Uint8Array","getResponseHeader","send","_setXHR","setFileController","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/* global XMLHttpRequest, Blob */\n\n\nvar XHR = null;\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  XHR = XMLHttpRequest;\n}\n\n/*:: type Base64 = { base64: string };*/\n\n/*:: type Uri = { uri: string };*/\n\n/*:: type FileData = Array<number> | Base64 | Blob | Uri;*/\n\n/*:: export type FileSource = {\n  format: 'file';\n  file: Blob;\n  type: string\n} | {\n  format: 'base64';\n  base64: string;\n  type: string\n} | {\n  format: 'uri';\n  uri: string;\n  type: string\n};*/\nvar dataUriRegexp = /^data:([a-zA-Z]+\\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\\-\\/]*)?;base64,/;\n\nfunction b64Digit(number\n/*: number*/\n)\n/*: string*/\n{\n  if (number < 26) {\n    return String.fromCharCode(65 + number);\n  }\n\n  if (number < 52) {\n    return String.fromCharCode(97 + (number - 26));\n  }\n\n  if (number < 62) {\n    return String.fromCharCode(48 + (number - 52));\n  }\n\n  if (number === 62) {\n    return '+';\n  }\n\n  if (number === 63) {\n    return '/';\n  }\n\n  throw new TypeError('Tried to encode large digit ' + number + ' in base64.');\n}\n/**\n * A Parse.File is a local representation of a file that is saved to the Parse\n * cloud.\n * @alias Parse.File\n */\n\n\nvar ParseFile =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param name {String} The file's name. This will be prefixed by a unique\n   *     value once the file has finished saving. The file name must begin with\n   *     an alphanumeric character, and consist of alphanumeric characters,\n   *     periods, spaces, underscores, or dashes.\n   * @param data {Array} The data for the file, as either:\n   *     1. an Array of byte value Numbers, or\n   *     2. an Object like { base64: \"...\" } with a base64-encoded String.\n   *     3. an Object like { uri: \"...\" } with a uri String.\n   *     4. a File object selected with a file upload control. (3) only works\n   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.\n   *        For example:\n   * <pre>\n   * var fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\n   * if (fileUploadControl.files.length > 0) {\n   *   var file = fileUploadControl.files[0];\n   *   var name = \"photo.jpg\";\n   *   var parseFile = new Parse.File(name, file);\n   *   parseFile.save().then(function() {\n   *     // The file has been saved to Parse.\n   *   }, function(error) {\n   *     // The file either could not be read, or could not be saved to Parse.\n   *   });\n   * }</pre>\n   * @param type {String} Optional Content-Type header to use for the file. If\n   *     this is omitted, the content type will be inferred from the name's\n   *     extension.\n   */\n  function ParseFile(name\n  /*: string*/\n  , data\n  /*:: ?: FileData*/\n  , type\n  /*:: ?: string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseFile);\n    (0, _defineProperty2.default)(this, \"_name\", void 0);\n    (0, _defineProperty2.default)(this, \"_url\", void 0);\n    (0, _defineProperty2.default)(this, \"_source\", void 0);\n    (0, _defineProperty2.default)(this, \"_previousSave\", void 0);\n    (0, _defineProperty2.default)(this, \"_data\", void 0);\n    (0, _defineProperty2.default)(this, \"_requestTask\", void 0);\n    var specifiedType = type || '';\n    this._name = name;\n\n    if (data !== undefined) {\n      if ((0, _isArray.default)(data)) {\n        this._data = ParseFile.encodeBase64(data);\n        this._source = {\n          format: 'base64',\n          base64: this._data,\n          type: specifiedType\n        };\n      } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\n        this._source = {\n          format: 'file',\n          file: data,\n          type: specifiedType\n        };\n      } else if (data && typeof data.uri === 'string' && data.uri !== undefined) {\n        this._source = {\n          format: 'uri',\n          uri: data.uri,\n          type: specifiedType\n        };\n      } else if (data && typeof data.base64 === 'string') {\n        var base64 = data.base64;\n        var commaIndex = (0, _indexOf.default)(base64).call(base64, ',');\n\n        if (commaIndex !== -1) {\n          var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1)); // if data URI with type and charset, there will be 4 matches.\n\n          this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);\n          this._source = {\n            format: 'base64',\n            base64: this._data,\n            type: matches[1]\n          };\n        } else {\n          this._data = base64;\n          this._source = {\n            format: 'base64',\n            base64: base64,\n            type: specifiedType\n          };\n        }\n      } else {\n        throw new TypeError('Cannot create a Parse.File with that data.');\n      }\n    }\n  }\n  /**\n   * Return the data for the file, downloading it if not already present.\n   * Data is present if initialized with Byte Array, Base64 or Saved with Uri.\n   * Data is cleared if saved with File object selected with a file upload control\n   *\n   * @return {Promise} Promise that is resolve with base64 data\n   */\n\n\n  (0, _createClass2.default)(ParseFile, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee() {\n        var _this = this;\n\n        var options, controller, result;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._data) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._data);\n\n              case 2:\n                if (this._url) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error('Cannot retrieve data for unsaved ParseFile.');\n\n              case 4:\n                options = {\n                  requestTask: function (task) {\n                    return _this._requestTask = task;\n                  }\n                };\n                controller = _CoreManager.default.getFileController();\n                _context.next = 8;\n                return controller.download(this._url, options);\n\n              case 8:\n                result = _context.sent;\n                this._data = result.base64;\n                return _context.abrupt(\"return\", this._data);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _getData.apply(this, arguments);\n      };\n    }()\n    /**\n     * Gets the name of the file. Before save is called, this is the filename\n     * given by the user. After save is called, that name gets prefixed with a\n     * unique identifier.\n     * @return {String}\n     */\n\n  }, {\n    key: \"name\",\n    value: function ()\n    /*: string*/\n    {\n      return this._name;\n    }\n    /**\n     * Gets the url of the file. It is only available after you save the file or\n     * after you get the file from a Parse.Object.\n     * @param {Object} options An object to specify url options\n     * @return {String}\n     */\n\n  }, {\n    key: \"url\",\n    value: function (options\n    /*:: ?: { forceSecure?: boolean }*/\n    )\n    /*: ?string*/\n    {\n      options = options || {};\n\n      if (!this._url) {\n        return;\n      }\n\n      if (options.forceSecure) {\n        return this._url.replace(/^http:\\/\\//i, 'https://');\n      } else {\n        return this._url;\n      }\n    }\n    /**\n     * Saves the file to the Parse cloud.\n     * @param {Object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>progress: In Browser only, callback for upload progress\n     * </ul>\n     * @return {Promise} Promise that is resolved when the save finishes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    ) {\n      var _this2 = this;\n\n      options = options || {};\n\n      options.requestTask = function (task) {\n        return _this2._requestTask = task;\n      };\n\n      var controller = _CoreManager.default.getFileController();\n\n      if (!this._previousSave) {\n        if (this._source.format === 'file') {\n          this._previousSave = controller.saveFile(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._data = null;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else if (this._source.format === 'uri') {\n          this._previousSave = controller.download(this._source.uri, options).then(function (result) {\n            if (!(result && result.base64)) {\n              return {};\n            }\n\n            var newSource = {\n              format: 'base64',\n              base64: result.base64,\n              type: result.contentType\n            };\n            _this2._data = result.base64;\n            _this2._requestTask = null;\n            return controller.saveBase64(_this2._name, newSource, options);\n          }).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else {\n          this._previousSave = controller.saveBase64(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        }\n      }\n\n      if (this._previousSave) {\n        return this._previousSave;\n      }\n    }\n    /**\n     * Aborts the request if it has already been sent.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function () {\n      if (this._requestTask && typeof this._requestTask.abort === 'function') {\n        this._requestTask.abort();\n      }\n\n      this._requestTask = null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { name: ?string, url: ?string }*/\n    {\n      return {\n        __type: 'File',\n        name: this._name,\n        url: this._url\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      } // Unsaved Files are never equal, since they will be saved to different URLs\n\n\n      return other instanceof ParseFile && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== 'undefined';\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (obj)\n    /*: ParseFile*/\n    {\n      if (obj.__type !== 'File') {\n        throw new TypeError('JSON object does not represent a ParseFile');\n      }\n\n      var file = new ParseFile(obj.name);\n      file._url = obj.url;\n      return file;\n    }\n  }, {\n    key: \"encodeBase64\",\n    value: function (bytes\n    /*: Array<number>*/\n    )\n    /*: string*/\n    {\n      var chunks = [];\n      chunks.length = Math.ceil(bytes.length / 3);\n\n      for (var i = 0; i < chunks.length; i++) {\n        var b1 = bytes[i * 3];\n        var b2 = bytes[i * 3 + 1] || 0;\n        var b3 = bytes[i * 3 + 2] || 0;\n        var has2 = i * 3 + 1 < bytes.length;\n        var has3 = i * 3 + 2 < bytes.length;\n        chunks[i] = [b64Digit(b1 >> 2 & 0x3F), b64Digit(b1 << 4 & 0x30 | b2 >> 4 & 0x0F), has2 ? b64Digit(b2 << 2 & 0x3C | b3 >> 6 & 0x03) : '=', has3 ? b64Digit(b3 & 0x3F) : '='].join('');\n      }\n\n      return chunks.join('');\n    }\n  }]);\n  return ParseFile;\n}();\n\nvar DefaultController = {\n  saveFile: function (name\n  /*: string*/\n  , source\n  /*: FileSource*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    if (source.format !== 'file') {\n      throw new Error('saveFile can only be used with File-type sources.');\n    } // To directly upload a File, we use a REST-style AJAX request\n\n\n    var headers = {\n      'X-Parse-Application-ID': _CoreManager.default.get('APPLICATION_ID'),\n      'Content-Type': source.type || (source.file ? source.file.type : null)\n    };\n\n    var jsKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n\n    if (jsKey) {\n      headers['X-Parse-JavaScript-Key'] = jsKey;\n    }\n\n    var url = _CoreManager.default.get('SERVER_URL');\n\n    if (url[url.length - 1] !== '/') {\n      url += '/';\n    }\n\n    url += 'files/' + name;\n    return _CoreManager.default.getRESTController().ajax('POST', url, source.file, headers, options).then(function (res) {\n      return res.response;\n    });\n  },\n  saveBase64: function (name\n  /*: string*/\n  , source\n  /*: FileSource*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    if (source.format !== 'base64') {\n      throw new Error('saveBase64 can only be used with Base64-type sources.');\n    }\n\n    var data\n    /*: { base64: any; _ContentType?: any }*/\n    = {\n      base64: source.base64\n    };\n\n    if (source.type) {\n      data._ContentType = source.type;\n    }\n\n    return _CoreManager.default.getRESTController().request('POST', 'files/' + name, data, options);\n  },\n  download: function (uri, options) {\n    if (XHR) {\n      return this.downloadAjax(uri, options);\n    } else {\n      return _promise.default.reject('Cannot make a request: No definition of XMLHttpRequest was found.');\n    }\n  },\n  downloadAjax: function (uri, options) {\n    return new _promise.default(function (resolve, reject) {\n      var xhr = new XHR();\n      xhr.open('GET', uri, true);\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onerror = function (e) {\n        reject(e);\n      };\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState !== xhr.DONE) {\n          return;\n        }\n\n        if (!this.response) {\n          return resolve({});\n        }\n\n        var bytes = new Uint8Array(this.response);\n        resolve({\n          base64: ParseFile.encodeBase64(bytes),\n          contentType: xhr.getResponseHeader('content-type')\n        });\n      };\n\n      options.requestTask(xhr);\n      xhr.send();\n    });\n  },\n  _setXHR: function (xhr\n  /*: any*/\n  ) {\n    XHR = xhr;\n  }\n};\n\n_CoreManager.default.setFileController(DefaultController);\n\nvar _default = ParseFile;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}