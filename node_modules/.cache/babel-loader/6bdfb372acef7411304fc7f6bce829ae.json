{"ast":null,"code":"import Parse from 'parse';\nimport { Record } from 'immutable';\nimport { withState, withHandlers, pipe } from '../../util';\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\nconst mainQuery = new Parse.Query(ClouseQuery);\n\nconst init = props => props.filterData;\n\nconst addClouse = ({\n  setData\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData(d => d.set('childs', d.childs.concat(query)));\n};\n\nconst deleteChild = ({\n  setData\n}) => index => {\n  setData(d => d.set('childs', d.childs.filter((value, i) => i !== index)));\n};\n\nconst changeOprand = ({\n  setData\n}) => oprand => {\n  setData(d => d.set('op', oprand));\n};\n\nconst addOprand = ({\n  setData\n}) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData(d => d.set('childs', d.childs.concat(Record({\n    op: 'and',\n    childs: [],\n    mainQuery: query\n  })())));\n};\n\nconst makeMainQuery = () => data => {\n  if (treeData.child) {\n    data.child.map(x => treeData.mainQuery = Parse.Query.and(mainQuery, makeMainQuery(x)));\n  }\n\n  return treeData; // console.log('maake main query start', data);\n  // console.log(data.mainQuery);\n  // if (data.childs) {\n  //   const { op } = data;\n  //   data.childs.map((x) => {\n  //     if (op === 'and') {\n  //       return Parse.Query.or(mainQuery, makeMainQuery(x));\n  //     }\n  //     if (op === 'or') {\n  //       console.log('op', data.op);\n  //       return mainQuery = Parse.Query.or(mainQuery, makeMainQuery(x));\n  //     }\n  //     if (!x.op) {\n  //       if (op === 'and') {\n  //         console.log('op', op);\n  //         mainQuery = Parse.Query.and(mainQuery, x);\n  //       } else {\n  //         mainQuery = Parse.Query.or(mainQuery, x);\n  //       }\n  //     }\n  //     return makeMainQuery(x);\n  //   });\n  // } else {\n  //   console.log('nochilds');\n  //   return data;\n  // }\n};\n\nconst oprandController = pipe(withState(init), withHandlers({\n  addClouse,\n  deleteChild,\n  changeOprand,\n  addOprand,\n  makeMainQuery\n}));\nexport default oprandController;","map":{"version":3,"sources":["/home/roxana/React-Project/datafilter/src/components/oprand/oprandController.js"],"names":["Parse","Record","withState","withHandlers","pipe","ClouseQuery","Object","extend","mainQuery","Query","init","props","filterData","addClouse","setData","query","d","set","childs","concat","deleteChild","index","filter","value","i","changeOprand","oprand","addOprand","op","makeMainQuery","data","treeData","child","map","x","and","oprandController"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,MADF,QAEO,WAFP;AAGA,SACEC,SADF,EACaC,YADb,EAC2BC,IAD3B,QAEO,YAFP;AAKA,MAAMC,WAAW,GAAGL,KAAK,CAACM,MAAN,CAAaC,MAAb,CAAoB,aAApB,CAApB;AACA,MAAMC,SAAS,GAAG,IAAIR,KAAK,CAACS,KAAV,CAAgBJ,WAAhB,CAAlB;;AAEA,MAAMK,IAAI,GAAIC,KAAD,IAAWA,KAAK,CAACC,UAA9B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB,MAAM;AACvC,QAAMC,KAAK,GAAG,IAAIf,KAAK,CAACS,KAAV,CAAgBJ,WAAhB,CAAd;AACAS,EAAAA,OAAO,CAAEE,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,QAAN,EAAgBD,CAAC,CAACE,MAAF,CAASC,MAAT,CAAgBJ,KAAhB,CAAhB,CAAR,CAAP;AACD,CAHD;;AAKA,MAAMK,WAAW,GAAG,CAAC;AAAEN,EAAAA;AAAF,CAAD,KAAkBO,KAAD,IAAW;AAC9CP,EAAAA,OAAO,CAAEE,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,QAAN,EAAgBD,CAAC,CAACE,MAAF,CAASI,MAAT,CAAgB,CAACC,KAAD,EAAQC,CAAR,KAAcA,CAAC,KAAKH,KAApC,CAAhB,CAAR,CAAP;AACD,CAFD;;AAIA,MAAMI,YAAY,GAAG,CAAC;AAAEX,EAAAA;AAAF,CAAD,KAAkBY,MAAD,IAAY;AAChDZ,EAAAA,OAAO,CAAEE,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,IAAN,EAAYS,MAAZ,CAAR,CAAP;AACD,CAFD;;AAIA,MAAMC,SAAS,GAAG,CAAC;AAAEb,EAAAA;AAAF,CAAD,KAAiB,MAAM;AACvC,QAAMC,KAAK,GAAG,IAAIf,KAAK,CAACS,KAAV,CAAgBJ,WAAhB,CAAd;AACAS,EAAAA,OAAO,CAAEE,CAAD,IAAOA,CAAC,CAACC,GAAF,CAAM,QAAN,EAAgBD,CAAC,CAACE,MAAF,CAASC,MAAT,CAAgBlB,MAAM,CAAC;AAAE2B,IAAAA,EAAE,EAAE,KAAN;AAAaV,IAAAA,MAAM,EAAE,EAArB;AAAyBV,IAAAA,SAAS,EAAEO;AAApC,GAAD,CAAN,EAAhB,CAAhB,CAAR,CAAP;AACD,CAHD;;AAMA,MAAMc,aAAa,GAAG,MAAOC,IAAD,IAAU;AACpC,MAAIC,QAAQ,CAACC,KAAb,EAAoB;AAClBF,IAAAA,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAgBC,CAAD,IAAOH,QAAQ,CAACvB,SAAT,GAAqBR,KAAK,CAACS,KAAN,CAAY0B,GAAZ,CAAgB3B,SAAhB,EAA2BqB,aAAa,CAACK,CAAD,CAAxC,CAA3C;AACD;;AACD,SAAOH,QAAP,CAJoC,CAKpC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAhCD;;AAmCA,MAAMK,gBAAgB,GAAGhC,IAAI,CAC3BF,SAAS,CAACQ,IAAD,CADkB,EAE3BP,YAAY,CAAC;AACXU,EAAAA,SADW;AAEXO,EAAAA,WAFW;AAGXK,EAAAA,YAHW;AAIXE,EAAAA,SAJW;AAKXE,EAAAA;AALW,CAAD,CAFe,CAA7B;AAWA,eAAeO,gBAAf","sourcesContent":["import Parse from 'parse';\nimport {\n  Record,\n} from 'immutable';\nimport {\n  withState, withHandlers, pipe,\n} from '../../util';\n\n\nconst ClouseQuery = Parse.Object.extend('ClouseQuery');\nconst mainQuery = new Parse.Query(ClouseQuery);\n\nconst init = (props) => props.filterData;\n\nconst addClouse = ({ setData }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData((d) => d.set('childs', d.childs.concat(query)));\n};\n\nconst deleteChild = ({ setData }) => (index) => {\n  setData((d) => d.set('childs', d.childs.filter((value, i) => i !== index)));\n};\n\nconst changeOprand = ({ setData }) => (oprand) => {\n  setData((d) => d.set('op', oprand));\n};\n\nconst addOprand = ({ setData }) => () => {\n  const query = new Parse.Query(ClouseQuery);\n  setData((d) => d.set('childs', d.childs.concat(Record({ op: 'and', childs: [], mainQuery: query })())));\n};\n\n\nconst makeMainQuery = () => (data) => {\n  if (treeData.child) {\n    data.child.map((x) => treeData.mainQuery = Parse.Query.and(mainQuery, makeMainQuery(x)));\n  }\n  return treeData;\n  // console.log('maake main query start', data);\n  // console.log(data.mainQuery);\n\n  // if (data.childs) {\n  //   const { op } = data;\n  //   data.childs.map((x) => {\n  //     if (op === 'and') {\n  //       return Parse.Query.or(mainQuery, makeMainQuery(x));\n  //     }\n  //     if (op === 'or') {\n  //       console.log('op', data.op);\n  //       return mainQuery = Parse.Query.or(mainQuery, makeMainQuery(x));\n  //     }\n  //     if (!x.op) {\n  //       if (op === 'and') {\n  //         console.log('op', op);\n  //         mainQuery = Parse.Query.and(mainQuery, x);\n  //       } else {\n  //         mainQuery = Parse.Query.or(mainQuery, x);\n  //       }\n  //     }\n  //     return makeMainQuery(x);\n  //   });\n  // } else {\n  //   console.log('nochilds');\n  //   return data;\n  // }\n};\n\n\nconst oprandController = pipe(\n  withState(init),\n  withHandlers({\n    addClouse,\n    deleteChild,\n    changeOprand,\n    addOprand,\n    makeMainQuery,\n  }),\n);\n\nexport default oprandController;\n"]},"metadata":{},"sourceType":"module"}